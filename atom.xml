<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Triple Eh?</title>
 <link href="https://www.triple-aye.com/atom.xml" rel="self"/>
 <link href="https://www.triple-aye.com/"/>
 <updated>2017-06-01T09:16:38+03:00</updated>
 <id>https://www.triple-aye.com</id>
 <author>
   <name>Gareth Noyce</name>
   <email></email>
 </author>

 
 <entry>
   <title>Devlog: Replication</title>
   <link href="https://www.triple-aye.com/2017/05/12/Devlog-12.05.17-Replication/"/>
   <updated>2017-05-12T00:00:00+03:00</updated>
   <id>https://www.triple-aye.com/2017/05/12/Devlog:-12.05.17---Replication</id>
   <content type="html">&lt;p&gt;First week back on Next Game, for oooh, a few weeks, and time to tackle the networking side of things. I had an inkling that retro-fitting multiplayer into the work I’d already done would be a bit of a ball-ache, but I was wrong. It was a massive fucking pain in the hairy-tits.&lt;/p&gt;

&lt;p&gt;The problem wasn’t so much that I didn’t understand the theory behind it all — although it does take a while to bed-in, and in all honesty Epic could really do with providing some better documentation on the C++ side of things — but that switching something simple, like the character responses to items being picked up, involves changing a lot of small bits of code in various classes. So where, sensibly, do you start?&lt;/p&gt;

&lt;p&gt;I tried a couple of things, first the pickups, then the weapons, but half-way through each it was clear that I’d basically have to refactor a whole bunch of supporting code. Admittedly, there’re some easy wins with the default replication that’s built into the engine; things move, things spawn and you can feel good about your progress quite quickly. But the devil’s in the detail. Do things destroy themselves correctly for client and server, when either side triggers the event? Are modifications happening on the server instance and replicating correctly? Should this multi-cast or is there a better way?&lt;/p&gt;

&lt;p&gt;And obviously, debugging this stuff isn’t fun when you have multiple copies of the same instance running, and try to breakpoint something.&lt;/p&gt;

&lt;p&gt;I spent four days poking about at this, and although I’d made pretty reasonable progress there were bugs, little fiddly fucks that I really didn’t want to carry along with me. So yesterday I started a clean project and wrote a very simple Team Deathmatch game. Even re-built the characters from the ground up, this time using the Animation Starter Kit from the UE4 Marketplace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-05-11-TDM_8Player.png&quot; alt=&quot;TDM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s not a particularly exciting screenshot, but it’s 8 players in a TDM game mode, with a dedicated server. Players automatically join and leave teams and you can run around and kill each other.&lt;/p&gt;

&lt;p&gt;If you’d told me a week ago that I’d effectively be starting from scratch to get this working I’d have given you the sad panda eyes, but now I’m on the other-side I’m happy. It was a good thing to do. I’m pretty confident I’m entering and exiting the game mode properly, I’m going through the login process and I’m cleaning transferring Player States and Controllers about. None of that was working 100% properly in the previous branch. And, I still have all the “old” code lying about. The HUDs, menus etc will “just work” when I drop them back in, and under the hood it’s going to be easier to migrate things over, piece-by-piece, test, and then move forward.&lt;/p&gt;

&lt;p&gt;So, lesson of the week — and worse, something I knew anyway — if you’re making a networked game, do it from the beginning, don’t try and bolt it on afterwards.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quite pleased I managed to get through all that without making the obvious “built to last” Bladerunner/Replicant joke.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Oh.&lt;/em&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Devlog: Making Pixels Glow</title>
   <link href="https://www.triple-aye.com/2017/04/29/Devlog-Making-Pixels-Glow/"/>
   <updated>2017-04-29T00:00:00+03:00</updated>
   <id>https://www.triple-aye.com/2017/04/29/Devlog:-Making-Pixels-Glow</id>
   <content type="html">&lt;p&gt;Easter and consultancy work have got in the way a bit, but the side project’s taken a big step forward…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-04-28-AddedAudio.PNG&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;neutrino&quot;&gt;Neutrino&lt;/h1&gt;
&lt;p&gt;When I last wrote Neutrino was rendering directly to the screen, which wasn’t exactly the look I was after for low resolution, pixel-based games. So last week I took a day to sit down and finish off the rendering path, with the aim being to have some control over the process and get closer to a CRT “glow”.&lt;/p&gt;

&lt;p&gt;I’ve ended up with a fairly standard process that you’ve probably read about before.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stage 1:&lt;/em&gt; The background tile-map and all the sprites collected in the VBO during the current tick are rendered to a 480x270 pixel texture. I picked this size because it’s a quarter of a 1080p screen, so scales nicely to my 4k monitor, but isn’t too chunky as to leave pixels the size of my face on-screen.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stage2:&lt;/em&gt; The texture generated in Stage 1 is then rendered to a second 480x270 texture, via a high-pass “filter”. Atm this filter checks for pixel luminance, rendering any pixel above a certain brightness as normal, and any below that level at some, definable, smaller multiple of itself. I could discard these failing pixels completely, but I found the effect looks nicer when there’s a ramp.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stage3:&lt;/em&gt; The texture from stage 2 is blurred in two passes, once horizontally, and once vertically. The resolution of this can be defined at run-time, but I’ve found that I get good results by blurring the low resolution texture from stage 2, and then getting the benefits of bi-linear filtering as I draw the blurred result, enlarged, as part of the final composite&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stage4:&lt;/em&gt; I draw a single full-screen quad to the screen, using the low resolution texture from stage 1. This is rendered with a trivially simple “scanline” shader, that checks the output position of the pixel: Every other line is rendered “dark”, for the scanlines. For “normal” lines, the shader checks the pixel, rendering the 1st biased to red, the 2nd biased to green, the 3rd biased to blue and the 4th “dark”. After this, the same quad is re-drawn, but using the blurred textured from pass 4, and again, I have controls for how much this bloomed texture contributes…&lt;/p&gt;

&lt;p&gt;This is probably the simplest form of scanline effect. It’s not emulating PAL, or NTSC screens. There’s no phosphor persistence — although I probably will add that in, to a degree, by using the blurred “bloom” texture as an accumulator — and there is no barrel shifter to simulate the curve of an old screen.&lt;/p&gt;

&lt;p&gt;I did look at &lt;a href=&quot;https://www.shadertoy.com/view/XsjSzR&quot;&gt;Tim Lottes CRT pixel shader&lt;/a&gt; but it needs a fair amount of tweaking to run well on my X1’s Intel GPU. And there’s also Kyle PIttman’s &lt;a href=&quot;http://www.gamasutra.com/blogs/KylePittman/20150420/241442/CRT_Simulation_in_Super_Win_the_Game.php&quot;&gt;shader from Super Win The Game&lt;/a&gt;, which I also discounted.&lt;/p&gt;

&lt;p&gt;To be honest, I’m not going for either of these looks. All I actually care about is the feel of staring into an arcade, in a dark room, where those white pixels were too white, and where certain colours left a bit of a tint on your eyeball. The screenshot at the top of the page is a fairly toned down example of where I’ll end up, cos, If I crank some of the settings up, I can get to some pretty mad places.&lt;/p&gt;

&lt;p&gt;All of this will be optional for the player. I know some people hate scanlines — why emulate broken technology? — but I’ll probably setup a few different presets to pick and choose from, so those of us of a certain vintage feel a bit more at home.&lt;/p&gt;

&lt;p&gt;(I’d be tempted to leave all the settings available, but that’d probably mean that every time I saw a screenshot of the game online it’d be at some crazy-bastard setting, that I hate…)&lt;/p&gt;

&lt;p&gt;Possible todo items: Adding some saturation controls to this may be handy. And maybe a colour look-up table, so I can set curves in Affinty Photo and have them baked into the final output?&lt;/p&gt;

&lt;h1 id=&quot;next-game&quot;&gt;Next Game&lt;/h1&gt;
&lt;p&gt;I’m dead excited. Hoping to have more to show soon. ;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Devlog - 08.04.17</title>
   <link href="https://www.triple-aye.com/2017/04/08/Devlog-08.04.17/"/>
   <updated>2017-04-08T00:00:00+03:00</updated>
   <id>https://www.triple-aye.com/2017/04/08/Devlog---08.04.17</id>
   <content type="html">&lt;p&gt;Zelda has been pushed to the back-burner, I’ve been to the UK for a trade show, and started up a new consultancy gig. Even found some time to do some programming…&lt;/p&gt;

&lt;h2 id=&quot;eurogamer-rezzed&quot;&gt;Eurogamer: Rezzed&lt;/h2&gt;

&lt;p&gt;I’ve not been to Rezzed in four or five years, but I can safely say that it’s my favourite “trade” show. It’s far more chill than the Expo, and there are plenty of opportunities to 
catch up with Developers, ask them techie questions, and get the shizz on who’s getting published by whom, and where the funding’s at. Eurogamer also do a good range of panel discussions, 
which are great to watch, and what with it being in central London, getting ruinously drunk in the evening is entirely possible.&lt;/p&gt;

&lt;p&gt;It’s hard to pick stand-outs at shows like these, but ExoOne and Tokyo 42 were the two that got me, and were by far the best looking Unity developed games at the show. I 
know it doesn’t matter what engine a game is written in, but having spent 2 days walking around it was incredibly obvious - for the most part - who was using what. Unity on the
Nintendo Switch looking rough as balls (Overcooked was running at 15-20fps at points) and there were many many tales of people having the same problems as I had, while shipping Lumo. So I did leave the 
show thinking that I’d made the right choice moving to UE4, and Epic having a large presence at the venue definitely didn’t hurt that.&lt;/p&gt;

&lt;p&gt;And if Snake Pass really was ported to Switch in a week, well, I’m looking forward to begging Nintendo for some Devkits toward the end of the year… :D&lt;/p&gt;

&lt;p&gt;I didn’t show anything, or talk to publishers this time around. It was just nice to go to a show with no pressure and mooch around. My Zub t-shirt had its first public airing. :D&lt;/p&gt;

&lt;h2 id=&quot;new-gig&quot;&gt;New Gig&lt;/h2&gt;

&lt;p&gt;I’ve picked up some consultancy work with a start-up in Helsinki. Can’t say much about it atm, but that’s one or two days a week helping them get going with their project. It’s time away from 
doing my own stuff, but extra cash in the bank is never a bad thing, and I’m working in an area I’ve not really touched before, so a few things to learn.&lt;/p&gt;

&lt;h2 id=&quot;neutrino&quot;&gt;Neutrino&lt;/h2&gt;

&lt;p&gt;You’d think with all the planes and trains I’ve been on this month, I’d have done more, but it turns out that in my excitement at getting exit row seats on the plane, I forgot that no bags are allowed to be stashed and the table barely 
holds a cup, let alone my laptop. But I did manage to do a few things.&lt;/p&gt;

&lt;p&gt;I’ve put in the various game states so Neutrino moves through the splash-screen, “main menu”, and into a test level, and finished off the saving of tilemaps to a binary file. I can load this, and I can create a static 
VBO that holds the tile-data. But I’ve not quite got it all hooked up so the level is being displayed. That’s the next job.&lt;/p&gt;

&lt;p&gt;Most games have several versions, Debug and Release being the most common. Normally these will do slightly different things: Debug will have more integrity checks, print out more logging information, and may even contain different modes 
(none of Neurino’s editors, for example, are even compiled into the release build).&lt;/p&gt;

&lt;p&gt;Release, as the name suggests, is normally what gets shipped to the players. To date I’ve only ever been working in Debug builds, so I thought it was about time 
that I checked out how the release build was getting on… And the good news is, excellently! I’d made a couple of mistakes with some #ifdef wrapping, but once fixed, Release was up and running in a couple of minutes. I’m mildly 
surprised about that.&lt;/p&gt;

&lt;h2 id=&quot;next-game&quot;&gt;Next Game&lt;/h2&gt;

&lt;p&gt;Work’s been a bit stop/start, but quite a lot’s been done. The bulk of the effort has been working on the game-flow: at launch the game presents a little splash-screen with the company logo on, which nicely fades into the main 
menu. From there, you can jump into the first level, or quit out to the desktop. In-game it’s now possible to pause (in single player) and the level’s exit teleporters will take control away from the player and 
present an end of level stats screen, showing score, items collected, time taken and any bonuses earned, etc.&lt;/p&gt;

&lt;p&gt;This was a good exercise and I uncovered a few things: for a start, I’m still not using the various game and player state classes correctly. Things like the inventory are currently in my Player Controller, and should
be in the Player State class. Level pick-ups and secrets aren’t being tracked in the Game State class, but by the player or individually. All of this comes back to UE4 being opinionated about how to structure the 
game, and I’m still learning that stuff. What I have “works”, but will be completely broken in a networked game.&lt;/p&gt;

&lt;p&gt;I’m at the point now - having basically got my head around how to do the single player stuff - that I’m going to refactor the bits I’ve got wrong, and then make a start on the network replication. I’ve no idea how to handle 
the lobby system, or picking game-modes, but if I can get the players, weapons, projectiles and pick-ups replicating, that puts me in a good position to then start on the AI. I can work the rest out later.&lt;/p&gt;

&lt;p&gt;I also discovered that it was possible to have a static library of C++ functions you could provide to Blueprints, but despite this working well for a few days it eventually started to give me 
build errors, complaining that things were compiled with out-of-date outers (or something). I’ve no idea what this meant, and I’m starting to become more and more distrustful of Blueprints in general. They’re ok for little 
throw-away things, but even doing the UI flow in them was tedious. Debugging them is an absolute nightmare…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLqfZolvobgUADL9xLhimuX3TQONLZGJO5&quot;&gt;51Daedalus&lt;/a&gt; is giving a serious of lighting lectures over on his You Tube channel. I can highly recommend these, as I’ve learned a lot from the 
few hours he’s already done, including a lovely little trick for faking volumetric light areas (which I’ve nicked and slapped all over my test level). I think lit particles and these sorts of faked volumetric tricks 
are going to be really important, in Next Game. Some of the best looking stuff at Rezzed was doing of a lot of this for atmosphere, so it’s something I’m really keen to try and learn.&lt;/p&gt;

&lt;p&gt;Also, a shout out to the Unofficial Unreal Discord Community: &lt;a href=&quot;http://unrealslackers.org/&quot;&gt;Unreal Slackers&lt;/a&gt; I’ve been able to get a few questions answered, and people seem nice and friendly. It’s good to be able to bounce 
stuff off other developers now and again.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Devlog - 17.03.17</title>
   <link href="https://www.triple-aye.com/2017/04/08/Devlog-17.03.17/"/>
   <updated>2017-04-08T00:00:00+03:00</updated>
   <id>https://www.triple-aye.com/2017/04/08/Devlog---17.03.17</id>
   <content type="html">&lt;p&gt;The flip-side to blogging about my progress is that you get to see the occasions where I’ve not been massively productive. So I’m going to waffle on about what’s really had its hooks in me over the last couple of weeks…&lt;/p&gt;

&lt;h2 id=&quot;zelda-breath-of-the-wild&quot;&gt;Zelda: Breath of the Wild&lt;/h2&gt;

&lt;p&gt;Of course I bought a Nintendo Switch at launch!&lt;/p&gt;

&lt;p&gt;I’ll probably find some time to talk about the device over on my personal blog, for it is perfect in many, many ways, but Zelda? Wow, what a game. 
“Not much” has been done since it came out and this week I basically gave up any pretence of getting work done. It’s been time very well spent…&lt;/p&gt;

&lt;p&gt;During the middle part of Lumo’s development I completed Link Between Worlds. That was a bit of a double-edged sword at the time, as, naturally, I started to become influenced by what I was playing. 
I have pages of notes about things to do in “dungeons”, but Lumo wasn’t ever that sort of game. Overlaid systems design — things that work well across multiple rooms &amp;amp; outer-world based travel, for 
example — wouldn’t be introduced to the genre until the Pickford brother’s Equinox, and I was determined to stick as closely to the confines defined by Jon Ritman’s early work as possible, 
and then poke out in directions from there…&lt;/p&gt;

&lt;p&gt;(Lumo would have been “better” if the scope was wider, but, honestly, that was never really the point.)&lt;/p&gt;

&lt;p&gt;Because of this (and with the exception of the occasionally mooted “Lost Levels”) it’s been obvious since the start that any spiritual sequel to Lumo would move more toward Zelda’s 
dungeons and away from the bespoke, single room designs. Not because the genre necessarily dictates it — although it is a natural progression — but because it’s the thing I want to make. 
It’s the direction that I’d have taken it, back in the ‘90s. It’s also exactly the design pattern that Nintendo have moved away from…&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Having grown up in the ’80s I’m a student of the Arcades, and I came of age with the SNES. Systems design is important. The best game mechanics are simple systems, confined by a set of rules, 
that are obscured from the player by the machine. Their rules may evolve, slowly, over time, but the player is always encouraged to explore these confines, to learn the rules, through play. 
Great games — for me — are not about story, or narrative (although these may work well to support an overall theme) but about sets of systems that encourage and allow for the player to create 
their own experiences. To make “stories” in their head. Some of these stories will be to mentally explain a system’s ruleset. Others will be entirely unique to the player, based on how they interpret 
and apply their ‘abillities’ through play.&lt;/p&gt;

&lt;p&gt;I was lucky enough to work with teams that understood this — Crackdown and Fable spring to mind — but I’ll never forget one meeting, where the publisher’s large and expensive writing team tried to “fix” 
our proposals by spending several hours arguing over the feelings and motivations of the NPCs in the world. The player wasn’t even mentioned once. I fucking hate this about modern, predominantly western, 
AAA games, and I could explain it succinctly with an animated gif I saw on Twitter, that I stupidly didn’t save. It showed Lara Croft climbing up a cliff as a thunder storm raged, and then cut away to the 
same design, done in the style of an Atari VCS. Lara dodges a rock, lightning strikes, it looks and sounds amazing, she says something to herself (the player) … and the dot on the VCS moves right one space, 
before slowly continuing up, along its pre-determined path.&lt;/p&gt;

&lt;p&gt;When I play games I just see the dot.&lt;/p&gt;

&lt;p&gt;Zelda has several easily understood systems that are very robustly engineered. This has given Nintendo license to let the player explore them deeply, and not worry about too much about unintended consequences. 
If anything, I think they’re fully aware of some of the exploits and are happy for you to use them (the hidden Koroks give the game away), but how these are applied in the world, and more importantly, how Nintendo 
nudge you toward their uses, will be studied for quite a while. At least by me.&lt;/p&gt;

&lt;p&gt;Probably the simplest example is cooking — something I never normally like in games — a self-determined means to buff (as well as heal), whose different ingredients are distributed over every region of the map. 
It’s only possible to uncover all the recipes through extended play, but that 20 minute break to cook everything you’ve foraged over the last couple of hours becomes an enjoyable, repeatable ritual. I’m 50 hours 
in and I’m still making new things, and more importantly, I still want to see what I can do with it. The world design backs up this system’s rules: There will always be something spicy growing halfway up a mountain. 
Melons grow in hot regions, and their watery content will cool you. The body parts of electric Krese can be made into an elixir that provides shock protection. It’s simple, easy to break down — trivial when you look 
at it — but the player groks it with very little conscious thought. Only one example of how to combine these things for a given end is provided, but it’s enough to explain that experimentation is key, so off you trot, 
try and shoot every animal, and cook everything you see. I’m reminded of Minecraft’s crafting table.&lt;/p&gt;

&lt;p&gt;Another easy example is Link’s stamina. You can run, climb or cling onto your para-glider for a short-period of time via a button press, and a simple UI shows the drain on your stamina. But Breath of the Wild 
is an enormous world that requires exertion to explore. Even the short-cuts to travel — tame animals — require a certain level of stamina in order to bring them under your control. And you’re encouraged to ignore 
these limitations by cooking up elixirs that will replenish your stamina whenever you need it.&lt;/p&gt;

&lt;p&gt;My first few hours were all about cheating this “artificial limitation”. Pockets full of potions, I was desperate to run to the horizon and climb everything I could see, which is entirely possible as soon as you 
leave the starting plateau. Can you imagine how much better World of Warcraft, or Guildwars 2 would be if you could climb ANY mountain you could see? And when you got to the top there’d be a hidden Korok, or a mini-boss, 
or even just a breakable rock containing a diamond, waiting for you? Vista after vista unfolds, reinforcing a sense of place, and by the end-game, when you’ve powered this system up, you’re no longer taking your time, 
mapping out a safe route up the mountain, but leaping and bounding to the top with barely a care in the world. It feels a bit Crackdown-y, and makes a compete fucking mockery of Assassin’s Creed. 
Stamina moves from a game-y limitation to something empowering in the space of a few hours. And you should see the horses I have now…&lt;/p&gt;

&lt;p&gt;Combat stays closest to the old Zelda way of doing things (from an interaction point of view) but even that has been completely over-turned. The traditional Z-Lock, jumps and doges are there, but now with weapons that are breakable.&lt;/p&gt;

&lt;p&gt;On the face of it, breakable weapons should be a design faux pas best left to the F2P market, but the way it’s been applied is entirely logical within the context of the rest of the world. 
Each region’s NPCs have different weapons, some many times stronger than others, and if you’re like me and you’ve Leeroy’d off into the distance, one hit kills will be rife. Disarmed NPCs will run to 
whatever is lying on the ground and use it to attack you (even their fallen comrades, in some cases), but this is exactly Nintendo’s expectation for the player: Pick up the weapons that you see lying around. 
You’re a scavenger, as well. Save your best ones for the larger foes, and use a branch for the pests. You can even sneak into a camp to steal enemy weapons before they see you, meaning any resulting fight will 
be comically one-sided. Simple, easily understood, but with the benefit of giving real meaning to some of the items you discover. (And if you have a favourite, keep hold of it, as you can repair it by letting an Octorock eat it!)&lt;/p&gt;

&lt;p&gt;There’s example after example of how the rules for the player are applied — designed — with thought to the other interactive elements in the world. Even the mechanic for taming a horse can be used with other animals you find in the wild. Want to rock-up riding a glowing Stag, or a Bear? Well, you can. Experiment. Explore.&lt;/p&gt;

&lt;p&gt;The areas I love most though, and the thing I’d steal in a heart-beat, are the Shrines. (Oddly enough, the closest thing to what I wanted to do, but couldn’t, with the rooms in Lumo…)&lt;/p&gt;

&lt;p&gt;Shrines in BotW serve multiple purposes. They act as fast-travel waypoints. The Spirit Orbs you collect from them are the means to more hearts and stamina. They act as bespoke puzzle and combat arenas, 
replacing the monolithic dungeon designs of Zeldas-past. And for me, they became the biggest driver to explore the world, safe in the knowledge that if I could just get to that orange glow, 
I’d be able to return at some later point.&lt;/p&gt;

&lt;p&gt;The shrines are often just one or two puzzle ideas, beautifully crafted, but on a grander scale than you’d get in previous Zelda dungeons. A 20–30 minute diversion, often toying with the physics 
engine, that serve to distil the sort of inventiveness we only see when the Nintendo’s design-team is firing on all cylinders. I absolutely fucking love them, and the way you can dip in-and-out of 
them as a break from whatever you’re doing, makes them a constant, compelling, distraction.&lt;/p&gt;

&lt;p&gt;And perhaps that is Breath of the Wild’s greatest strength. Open world games have always tried to distract you, but at their core has been the constant nagging of NPCs, and the gentle redirection back 
onto the “Golden Path”. Fable 2 — OK, not an “open world” game in the sense of GTA — took it so far as to manifest the Golden Path in the world itself (!) but BotW just does not care. At no point do I 
feel the need to “do” the “game”. I’m allowed the freedom to explore anywhere, at any point, to make of my avatar what I want. And even when I do sit down with the express desire to get back onto the 
main-quest, I invariably end up doing something entirely different. Nearly every NPC in the game is intent on sending you off, away, from the Golden Path. The number of half finished sub-quests I have 
is insane and I justkeep uncovering more.&lt;/p&gt;

&lt;p&gt;On one of these diversions I saw Farosh…&lt;/p&gt;

&lt;p&gt;I spend the first few weeks of my design lectures trying to explain what a game mechanic is by breaking down “systems”. Why systems design and implementation is the real meat-and-potatoes of a 
great development team, not story or “ideas”. About how to communicate things in-world, without text, and why that’s more important than the things we explain to a player verbally. How you can 
reward styles of play through the simple placement of “secrets”, how the player’s experimentation and mastery of things provides them ownership over the experience. I’m constantly pulling from 
Nintendo’s back catalogue for examples of all this, but now I could pretty much re-write the entire course and just use Breath of the Wild. I’ve not even spoken here about the camera, the slate’s 
powers and how these manifest differently across the “world” and the “dungeons”. It all makes me a little breathless at times. :D&lt;/p&gt;

&lt;p&gt;Personally, I think it takes monumental brass-balls to be as confident in what you’ve made as this, to let go, to let the player just be. Many, many aspects of BotW will be copied in the future 
(I’ll be nicking stuff), but this is a game I’m worried could only be made in Japan, and now Kojima is off, probably only by Nintendo. I cannot see any Western publisher funding the level of
experimentation and iteration that’s required to design and implement these mechanics, this world, so robustly. To eschew business model (for the most part, DLC and Amiibos &lt;em&gt;cough&lt;/em&gt;) and trust in 
quality. Certainly not on a scale as grand and as beautiful as this.&lt;/p&gt;

&lt;p&gt;That’s a fucking shame, really, isn’t it?&lt;/p&gt;

&lt;p&gt;Anyway, I’ve got that Friday feeling, and I’ve only one Divine Beast left to do.&lt;/p&gt;

&lt;p&gt;Maybe a quick go before I get back to doing some real work. Next week…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Devlog - 08.03.17</title>
   <link href="https://www.triple-aye.com/2017/03/08/Devlog-08.03.17/"/>
   <updated>2017-03-08T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2017/03/08/Devlog---08.03.17</id>
   <content type="html">&lt;p&gt;Early update, this time, as I’m off to the UK for a wedding. Because of that – and because I’m meeting up with a friend 
who’s helping me with some concept art – it’s been a race-to-make-a-face since my last post.&lt;/p&gt;

&lt;h2 id=&quot;next-game&quot;&gt;Next Game&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-03-08-TestLevel_Courtyard2.jpg&quot;&gt;&lt;img src=&quot;/images/2017-03-08-TestLevel_Courtyard2.jpg&quot; alt=&quot;Screenie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second iteration of the test level is basically done. As I said, it’s super chunky and super low-poly, but it looks a lot better than my 
first iteration. And I can get very dark areas, as well as very light areas. Pretty important for a Quake-a-like.&lt;/p&gt;

&lt;p&gt;Although this scene is essentially outdoor, I don’t actually think I’ll do that in many of the levels. My plan for most of it is 
to do something darker and not as well lit, but for the purposes of a test I just wanted to see if I could do both. So I’ve aped a bit of the 
Quake 1 start thing, and done an imaginary “intro” level.&lt;/p&gt;

&lt;p&gt;There’s a lot wrong with it; the scale is on the, er, large side – but the minute you start rocket jumping that’s less of a problem –  there’s a lack of secondary motion – wibbly grass, lights swaying, stuff like that – 
and hardly any props to dress the scene. Although the colours work for me, a bit more detail would definitely help.&lt;/p&gt;

&lt;p&gt;I’m not too bothered about all this atm, the main function 
of the test was to find a workflow that’s quick enough to let me bang out [reasonably] good looking geometry, and the lack of texturing definitely helps that. I’ve
gone from zero to a level I can run around, in 8 days. And half that time’s been trying to understand lighting.  Nearly all the missing things 
will happen over time and I can dress the scenes with more props as and when I make them. It’s how I worked the environment in Lumo.&lt;/p&gt;

&lt;p&gt;I’m still toying with the idea of bevelling the larger geometry pieces as 
the extra edges would play in the light. Nintendo do this all the time in Mario and Zelda, so it might be worth a test…&lt;/p&gt;

&lt;p&gt;Anyway. After the mild depression at going down the wrong path and throwing out a couple of week’s work, this whole exercise turned out to be super useful. The untextured “matte” look forced me to work out how the baked lighting is applied, especially 
when the various shadow schemes are thrown into the mix. There’s no where to hide so setting this up was a lot of trial and error, not helped by the 
fact that my lighting build-quality was set to “preview” for God knows how long. That flushed out lots of stupid things, but derp. Fucking idiot, etc.&lt;/p&gt;

&lt;p&gt;The Modo side of things has been great, although it took me a long time to uvunwrap for clean bakes.  Initially I was just ignoring it, letting the UE importer 
generate the lightmaps and then wondering why I had dirty big splotches everywhere. Then I started adding a second UV channel in the model to mitigate, 
which gives some control over how the model parts are split. But the real-trick, which it took me a couple of days to clock-on to, is making sure edges/verts 
are clamped to texel boundaries. In Modo this is trivial, you can set the UVGrid to 1/64, and then use the snapping tool to make sure that edges/verts are all 
nice and clean. It’s a bit handraulic, but if done right, a one shot deal.  I think.&lt;/p&gt;

&lt;p&gt;I still have some light-bleeding in parts of the level, but this is either where I’ve not added an edge to the wall (one model) where it meets the floors 
(a different model), or have a polygon that extrudes through the wall, so catches the light and the dark. The second issue is just me not knowing what I was&lt;br /&gt;
doing at the start and then being too lazy to go back in and fix it. You can see it on the window frames.&lt;/p&gt;

&lt;p&gt;I’ve also had a good play around with Cascade, and although I don’t feel as confident with it as Unity’s particle system, I’m able to do the basics. The same 
can be pretty much said for the material editor. I’m hoping to pick stuff up via osmosis and concentrate on the big things for the foreseeable.&lt;/p&gt;

&lt;p&gt;Code-wise, I don’t think I’ve had any problems. I’ve even started doing a few things – the on screen messages for example – in Blueprints. Quick and dirty is, 
as Quick and Dirty does, and all that.&lt;/p&gt;

&lt;p&gt;I’ve stuck a little video of all this up on You Tube. It should go without saying that the Quake 1 sound effects won’t be there for long, and everything is liable 
to change. It’s heading in the right direction, though.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/gxeUt0OoUMo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Click screenies to enbiggen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-03-08-TestLevel_Underground.jpg&quot;&gt;&lt;img src=&quot;/images/2017-03-08-TestLevel_Underground.jpg&quot; alt=&quot;Screenie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-03-08-TestLevel_TP1.jpg&quot;&gt;&lt;img src=&quot;/images/2017-03-08-TestLevel_TP1.jpg&quot; alt=&quot;Screenie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-03-08-TestLevel_Armour.jpg&quot;&gt;&lt;img src=&quot;/images/2017-03-08-TestLevel_Armour.jpg&quot; alt=&quot;Screenie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-03-08-TestLevel_Corridor2.jpg&quot;&gt;&lt;img src=&quot;/images/2017-03-08-TestLevel_Corridor2.jpg&quot; alt=&quot;Screenie&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Devlog - 24.02.17</title>
   <link href="https://www.triple-aye.com/2017/02/24/Devlog-24.02.17/"/>
   <updated>2017-02-24T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2017/02/24/Devlog---24.02.17</id>
   <content type="html">&lt;p&gt;Oops, I missed a week and the devlog is late. Sorry! Game Dev and all that. Shipping late’s what we do…&lt;/p&gt;

&lt;p&gt;I put off posting as I was hopeful that I’d have something nice to show, but things haven’t quite worked out as planned:&lt;/p&gt;

&lt;h2 id=&quot;next-game&quot;&gt;Next Game&lt;/h2&gt;

&lt;p&gt;I added a damage effect –  the “damage beans” – on the screen edges to indicate that the player’s been hurt. It’s a simple post-process overlay, but with a normal map  added you get a nice distortion of the 
screen as it fades in and out. Standard stuff for the most part. Except I have two versions, one that’s a blood-splat, and one that’s a nice high-res picture of actual baked beans. :D&lt;/p&gt;

&lt;p&gt;I’ve also had a quick play with the audio system in UE4. My natural inclination is to integrate FMOD, but I’m hearing from fellow developers on Mastodon that UE4’s system is pretty good, and from the quick tests 
it might well be. Audio attenuation and geometry occlusion definite seem to work, which could be enough for what I need.&lt;/p&gt;

&lt;p&gt;But for the last 10 days or so I’ve been playing around with look and feel tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/17.02.17-SkyBox.jpg&quot; alt=&quot;Nice skies&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This skybox got me into a lot of trouble.&lt;/p&gt;

&lt;p&gt;My intention with Next Game is to do everything quite low-poly and avoid as much texturing as possible. One reason for that is to look different, but texturing and modelling 
take time, and time/money aren’t something that I have a lot of. If I have to get into texturing then I’d probably go for something old-school, like Gibhard or Strafe, but for obvious reasons I’d like to avoid that. 
I think every man and his dog will be doing that style in a year or two…&lt;/p&gt;

&lt;p&gt;Unfortunately having a super realistic skybox lead me down a path where geometry got a bit too complex, and things rapidly looked incongruous when flat-shaded with high quality lighting. Basically, I couldn’t get it to look good unless it was
extremely high-contrast. Which was unplayable. Although, I did spend a day flirting with an entirely black-and-white grading that I might go back to for some levels.&lt;/p&gt;

&lt;p&gt;Anyway, I’ve thrown away all that work. All the geometry modelled so far, the test level, the greybox, all the materials and all the textures. That stung a bit.&lt;/p&gt;

&lt;p&gt;This week I started again, but from a better footing: I chose a nice, harmonious, palette, and put a simple gradient in the sky-box. The palette is very limited: four base colours, four shades of each colour, and a gradient from top to bottom of each colour. I’ll 
most likely add to that over time, but for now this is working well.&lt;/p&gt;

&lt;p&gt;UV-unwrapping can be done extremely quickly. Anything single colour can just be atlas unwrapped and pushed over the appropriate shade in the texture, while things with gradients just need a little 
more attention to align them properly. Because the palette is fixed, everything sits in the scene, and with some lightmass settings tweaked I’m getting really rich colour gradients, colour bounces being picked up and 
deep shadows. It looks better, basically. It’s also super colourful, to the point of being cartoony – far too much for this game – but I find it easier to turn everything up to 11 and then slowly dial it in over time. (Early screenshots of Lumo are
practically black because I was shooting for a Scooby-Doo vibe. The final game looks nothing like it…)&lt;/p&gt;

&lt;p&gt;What needs sorting out now is the correct scale for things. My character moves extremely quickly, and rocket jumps go for miles. This will take a bit of two-and-fro, but that’s next week’s mission. At the minute everything’s a little too big but I find it quite endearing. Iterate, iterate.&lt;/p&gt;

&lt;h2 id=&quot;neutrino&quot;&gt;Neutrino&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-02-19-TilemapAddRemove.png&quot; alt=&quot;Tilemap Editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Still train-coding my way through this and the big news is, the tile map editor that I said I’d never write is basically done. It’s missing the ability to create re-usable brushes from placed tiles, so I might go back and add that at some point, but bar some tidying up and 
deciding on the save format it’s doing what I’ll need.  This threw up a couple of interesting things.&lt;/p&gt;

&lt;p&gt;I was about to delve into the murk of C’s directory and file-handling, which is annoyingly different depending on the platform, but decided to have a quick search through Github to see what was already out there, and came across this little gem: &lt;a href=&quot;https://github.com/cxong/tinydir&quot;&gt;Tinydir&lt;/a&gt;, 
 works brilliantly.&lt;/p&gt;

&lt;p&gt;While testing the tilemap editor I thought I’d throw in some massive numbers to see how it performed. Turns out things started crawling pretty quickly, which was er, a shock. After pushing it through Richard Mitton’s &lt;a href=&quot;http://www.codersnotes.com/sleepy/&quot;&gt;Very Sleepy&lt;/a&gt; 
the hot spot seemed to be in how I’m populating the VBOs, which again, was a bit of a surprise. This was supposed to be an optimised version of what I’d written a few years back on iOS…&lt;/p&gt;

&lt;p&gt;For some reason I was only getting ~8k sprites per frame. I was expecting quite a few more. The culprit was this line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mTransform = mTranslate * mRotation * mScale;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pretty standard stuff, this is just creating the translation matrix which I’m pushing all my vertices through before copying the result into the VBO. (Yes, at some point I should just do all that into the shader…)  I’ve done this before and had much better performance, 
except then I was using my own math class, and this time I’m using &lt;a href=&quot;http://glm.g-truc.net/0.9.8/index.html&quot;&gt;OpenGL Math&lt;/a&gt;. I figured it’d  be better to pass off the optimisation and maintenance of my maths stuff to, well, people that know some maths.&lt;/p&gt;

&lt;p&gt;So I dug into the operator * overload:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLM_FUNC_QUALIFIER tmat4x4&amp;lt;T, P&amp;gt; operator*(tmat4x4&amp;lt;T, P&amp;gt; const &amp;amp; m1, tmat4x4&amp;lt;T, P&amp;gt; const &amp;amp; m2)
{
	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcA0 = m1[0];
	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcA1 = m1[1];
	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcA2 = m1[2];
	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcA3 = m1[3];

	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcB0 = m2[0];
	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcB1 = m2[1];
	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcB2 = m2[2];
	typename tmat4x4&amp;lt;T, P&amp;gt;::col_type const SrcB3 = m2[3];

	tmat4x4&amp;lt;T, P&amp;gt; Result(uninitialize);
	Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];
	Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];
	Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];
	Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];
	return Result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ow. That’s creating a lot of vec4 variables over the course of a few thousand sprites.&lt;/p&gt;

&lt;p&gt;I admit, I’m learning GLM as I go, and maybe there’re some functions to do mat4 multiplications in place but the docs make my nose bleed, and to be honest I couldn’t be arsed to trawl through it all.&lt;/p&gt;

&lt;p&gt;So instead of using a glm::mat4, my matrix is now a simple array, allocated at the start of the function, that only contains the scale and rotation. I can push the sprite corners through this 
and add the translation, and remove a lot of obviously zero multiplications from the process.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vBL.x = (vBL_Pos-&amp;gt;x * s_mTransMat[0]) + (vBL_Pos-&amp;gt;y * s_mTransMat[1]) + vPos-&amp;gt;x;
vBL.y = (vBL_Pos-&amp;gt;y * s_mTransMat[3]) + (vBL_Pos-&amp;gt;y * s_mTransMat[4]) + vPos-&amp;gt;y;
vBL.z = vPos-&amp;gt;z;

etc. etc. 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is fine for 2D stuff, which is all I intend to use this engine for.&lt;/p&gt;

&lt;p&gt;And the result? About a 15x speed-up. In fact, I get exactly the same number of sprites out of a single thread on my X1 laptop, as I do on my big fat devrig: ~150k @ 60fps.&lt;/p&gt;

&lt;p&gt;I’ll probably look to multi-thread this once the physics engine and fmod have been integrated, but for now it’s more than good enough for a little shoot-em-up.&lt;/p&gt;

&lt;p&gt;The moral of the story: Future Gareth, you should probably look into how to use GLM properly.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Devlog - 03.02.2017</title>
   <link href="https://www.triple-aye.com/2017/02/03/Devlog-03.02.2017/"/>
   <updated>2017-02-03T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2017/02/03/Devlog---03.02.2017</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/17.02.03-DecalsTest2.jpg&quot; alt=&quot;Hello Mum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s been a mad-cap couple of weeks. Here’s what I’ve been up to:&lt;/p&gt;

&lt;h2 id=&quot;lumo&quot;&gt;Lumo&lt;/h2&gt;

&lt;p&gt;Yesterday I pushed out version 1.17.2, to fix issues found with wireless Xbone pads running on Windows 7. Thanks go out to 
Patrick Hogan — the developer of InControl, a nice cross platform input library for Unity that I can recommend, &lt;a href=&quot;http://www.gallantgames.com/pages/incontrol-introduction&quot;&gt;available here&lt;/a&gt; —  for sparing the time to test around the issue and provide a fix.&lt;/p&gt;

&lt;p&gt;In addition to taking on the new version of InControl, I’ve also moved over to XInput, so — in theory —  joypad support should be a 
little more robust on Windows going forward. (Crosses Fingers)&lt;/p&gt;

&lt;p&gt;This build also fixes a possible bug with joypad “submit” actions not being registered by the pause screen UI, as well as turning 
off Unity’s bullshit “automatic” navigation option on some of the button layouts. Honestly, fuck that UI system.&lt;/p&gt;

&lt;h2 id=&quot;neutrino&quot;&gt;Neutrino&lt;/h2&gt;

&lt;p&gt;I’ve been doing a bit of train / weekend coding, so this has moved forward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finished off the Input system. You can now poll mouse and up to four joypads. Previously it only handled attach/dettach events.&lt;/li&gt;
  &lt;li&gt;Added some keystate handling for specific inputs in editor modes (keyboard shortcuts, basically)&lt;/li&gt;
  &lt;li&gt;Added a bunch of helper functions to quickly get sprites from texture pages&lt;/li&gt;
  &lt;li&gt;Got the Tile Map editor to the point where you can select and place tiles, freely, or snapped to a grid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next job is to store that in something I can spit out and reload that’ll be the basis of the level data. I’ll probably do a very thin 
Command pattern wrapper over this so I can support unlimited Undo/Redo as well.&lt;/p&gt;

&lt;h2 id=&quot;next-game&quot;&gt;Next Game&lt;/h2&gt;

&lt;p&gt;I’ve been all over the shop with this the last couple of weeks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finished off the weapon-types code and added weapon pickups&lt;/li&gt;
  &lt;li&gt;Player can now be killed, either through damage or falling out of the world&lt;/li&gt;
  &lt;li&gt;Player respawns properly&lt;/li&gt;
  &lt;li&gt;Added Ammo to the HUD&lt;/li&gt;
  &lt;li&gt;Added decals, and spent a morning drawing swears on walls&lt;/li&gt;
  &lt;li&gt;Added a new “Pain Room” to the test room, for traps and damage/stat tweaking&lt;/li&gt;
  &lt;li&gt;Dipped my toe into Cascade, UE4’s particle system, and made some effects for pickups&lt;/li&gt;
  &lt;li&gt;Started on a shotgun model for the first person view&lt;/li&gt;
  &lt;li&gt;Added some new models for the ammunition pickpus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last item in that list has been my main diversion since the last post.&lt;/p&gt;

&lt;p&gt;I know that I’m going to be doing a fair amount of modelling on this project so I’m still slowly schooling myself on workflows. For this, I decided 
to do some fairly high poly models of the pickup items and then bake them down to a low poly cage. Like everything, once I worked out how to 
do it, it’s reasonably straight forward, but it took a day or so to really get it working.&lt;/p&gt;

&lt;p&gt;Building low poly cages seems to be a bit of an art, depending on the sorts of shapes you want, but after a lot of attempts I was able to bake AO and 
normals in Modo that looked pretty clean on the low poly asset, and came out clearly in-engine. I’m far from an expert at this, but it’s something I 
wanted to have in the toolbox even if I don’t use it very often.&lt;/p&gt;

&lt;p&gt;I also spent a day or two messing about with Substance Painter. The “rent to own” model really appeals to me, as well as fitting in my budget, so I 
jumped on that. It’s a little unstable on my rig - I’ve had 4 or 5 really messy crashes - but when it’s working, it’s great. I doubt I’ll delve too 
deeply into the materials for this game, but anything that speeds up texturing is going to be worth the effort learning.&lt;/p&gt;

&lt;p&gt;Now that Vine is dead I’ve started posting screenshots and little vids onto my Instagram account. You can keep an eye-out, &lt;a href=&quot;https://www.instagram.com/garethnoyce/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, there’s been a big migration of developers from Twitter onto Mastodon.social. If you’re a twitter user then I don’t really need to explain why this 
is happening, but if not and you’re interested in a low traffic, Nazi-free open source Twitter-alike then &lt;a href=&quot;https://mastodon.social&quot;&gt;Mastodon&lt;/a&gt; is worth 
checking out. I’m @korruptor as usual.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Visual Studio Code</title>
   <link href="https://www.triple-aye.com/2017/01/28/Visual-Studio-Code/"/>
   <updated>2017-01-28T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2017/01/28/Visual-Studio-Code</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;images/vscode.png&quot; alt=&quot;Visual Studio Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m interrupting normal blogging service to give a shout out to Visual Studio Code, on Linux. I 
was put onto it by one of my students, and I’ve been running it for the last week as a daily driver when 
train-coding. And it’s great.&lt;/p&gt;

&lt;p&gt;Normally I use Emacs or Vim, depending on the mood, and I have done for years, but both of them require a 
fair bit of setup, and I’ve always got a second terminal open for compilation / launching
the executable.&lt;/p&gt;

&lt;p&gt;Visual Studio Code, while not quite as nice as either of those from the text editing pov, is easily on a 
par with something like Sublime Text, but with a special party trick: it integrates extremely well with GCC &amp;amp; GDB.&lt;/p&gt;

&lt;p&gt;You can setup a problem parser, which will grep gcc’s output, allowing you to quickly jump to compilation errors, and
it’ll launch GDB and act as a front-end, allowing you to hover-inspect variables and do all the things you’d
expect from a larger IDE.&lt;/p&gt;

&lt;p&gt;And it’s nippy. Surprisingly nippy. In fact, for C/C++ programming, this has quickly become my go-to editor 
on Linux. I can heartily recommend it.&lt;/p&gt;

&lt;p&gt;If there’s one nitpick, it’s the lack of horizontal splits. Something Visual Studio seems to be partially 
allergic to, as well. But other than that, if you’re a Linux coder and you want some of the trappings of an 
IDE, without installing something shit like Eclipse, or slow and lethargic like QT Creator, VS Code is well
worth checking out.&lt;/p&gt;

&lt;p&gt;And I can’t believe I’m saying that.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Devlog - 20.1.17</title>
   <link href="https://www.triple-aye.com/2017/01/20/Devlog-20.1.17/"/>
   <updated>2017-01-20T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2017/01/20/Devlog---20.1.17</id>
   <content type="html">&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qr0ff58evkQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Bar teaching, the last two weeks have been entirely focused on Next Game, so I’ve managed to get quite a lot done.&lt;/p&gt;

&lt;p&gt;Character movement is essentially ‘finished’. It’s pretty nippy - Quake 1 fast, in fact - but it feels nice and responsive. At least to me . Rocket Jumps will be featuring heavily, so spending the time to play around with this in order to get the height and distance nailed, was essential. Changes from here-on will just be tiny number tweaks, so I’m at the point now where I feel safe to begin whiteboxing levels.&lt;/p&gt;

&lt;p&gt;The player’s inventory management is also working. You can cycle through weapons, pick up armour and health, as well as take damage. Armour modifiers still need to be added but I know exactly how these will operate.&lt;/p&gt;

&lt;p&gt;UE’s weapon and projectile systems took a while to figure out, but I do now have 3 basic types that should cover everything I intend to use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Projectile based: rocket launcher / nail gun, stuff like that.&lt;/li&gt;
  &lt;li&gt;Instant shot: Pistols&lt;/li&gt;
  &lt;li&gt;Instant multi-shot: Shotguns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Weapons have individual fire rates, can spawn splash damage areas and their damage can attenuate over distance. The only thing you might expect that’s missing - especially if you play something like COD - is projectile penetration. I’m toying with the idea of adding this, but right now my guess is that it’ll be pretty useless within the sort of levels that I intend to create.&lt;/p&gt;

&lt;p&gt;None of the weapons have been properly setup atm, as that’s something I’ll do once some NPCs are in. I need moving targets to shoot at!&lt;/p&gt;

&lt;p&gt;I’ve also had a crash course in the localisation system, configuring animation blueprints, playing audio and have dipped my toe into Cascade again.&lt;/p&gt;

&lt;p&gt;For the most part the last two weeks have been really productive, but I’ve been badly burned by a couple of things. One of the worst was discovering that UE4 types get garbage-collected quite aggressively. If, say, you have a TArray of elements but don’t add the UPROPERTY() macro above their definition, then at some point they’ll disappear from under you. It took me a few hours to work out exactly what was causing the crash and why, as it was appearing fairly randomly - and taking the editor out with it - but like everything, it’s completely obvious once you spot it.&lt;/p&gt;

&lt;p&gt;I’ve also learned the hard way that Play In Editor - PIE - masks a certain type of class initialisation bug. Stupidly, I had a set of FText variables defined outside the class (they were static char arrays at first) which compiled perfectly fine, and even ran in the editor, but cooked builds would immediately crash. It took me a couple of hours to realise that it wasn’t my Anti Virus, or some auto-build failure, but UE4 barfing when trying to initialise the variable before the engine had started up. This was happening before the splash screen was appearing, so I wasn’t even getting a log to help… Again, totally obvious once you spot it.&lt;/p&gt;

&lt;p&gt;I probably lost a day bug hunting this stuff, so I’m a little behind where I wanted to be this week -  ammo pickups are half done, and weapon pickups haven’t been started - but I’m basically at the point where I can play around with some look and feel tests, and maybe start white-boxing some spaces to run around in. I’m also growing in confidence with the engine and my ability to at least fix my own fuck-ups, so it’s probably a net win…&lt;/p&gt;

&lt;p&gt;I’ve added a little video to You Tube for those who want a peek (see the top of this post). It should go without saying that none of the assets in this are final, or even likely to appear in-game. It’s bits and bobs from Lumo and UE4’s example assets, that I’ve thrown together. Although I did lose a good chunk of time over Xmas playing with the lighting and post, just to see how it worked ;D&lt;/p&gt;

&lt;p&gt;The music is by Steve Birch, from the album Wonderland, that’ll be released by Joof sometime in Feb.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dev blog, 6th Jan</title>
   <link href="https://www.triple-aye.com/2017/01/06/Dev-blog,-6th-Jan/"/>
   <updated>2017-01-06T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2017/01/06/Dev-blog,-6th-Jan</id>
   <content type="html">&lt;p&gt;Happy New Year!&lt;/p&gt;

&lt;p&gt;Apologies. The blog was on a temporary hiatus through December, as I had to prepare for a programming course that I’m 
due to give at TAMK University this year. That meant getting up-to-speed with the latest Unity version,&lt;br /&gt;
and writing a simple game that’ll form the basis of the course. As well as having a Xmas Holiday.&lt;/p&gt;

&lt;p&gt;But I did do some work and make some decisions. The first of which: Oh Snow! is canned. Probably forever. Why?
Short answer; it was meant to be my toy project, not something that took a year to make, and due to teaching 
and signing up for a Finnish language course, I basically did nothing on it. But I did learn some Unreal, so it 
wasn’t a complete waste.&lt;/p&gt;

&lt;p&gt;That means &lt;em&gt;Next Game&lt;/em&gt; has officially been started. Here’s a little WIP screenie:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-01-06-PsyanceTestRoom.jpg&quot;&gt;&lt;img src=&quot;/images/2017-01-06-PsyanceTestRoom.jpg&quot; alt=&quot;It's an FPS!&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, it’s an FPS. No, I’ve not done any graphics or modelling yet. And yes, that’s the default UE4 character model.&lt;/p&gt;

&lt;p&gt;More info on &lt;em&gt;Next Game&lt;/em&gt; in a later update.&lt;/p&gt;

&lt;p&gt;Aside from that, Unity 5.5.x, and eating mince pies(+), I’ve done some more on Neutrino. The choice of using cmake for the 
build process turned out to be an excellent one. I thought I’d have a pop at getting the game running on windows, and although 
the cmake gui is a bit weird, once I worked out the intricacies it spat out a Visual Studio 2015 solution and Neutrino built and ran 
first time. And yeah, that surprised the hell out of me.&lt;/p&gt;

&lt;p&gt;I’ve been continuing my love-in with ImGui, and decided that the effort to parse TileD tilemaps and integrate them into everything else 
I want to do was becoming a monumental pain in the arse. And I quite fancy rendering the tilemap through a pixel shader &lt;a href=&quot;http://blog.tojicode.com/2012/07/sprite-tile-maps-on-gpu.html&quot;&gt;a little like this&lt;/a&gt;.
So I’ve started writing a simple tilemap editor in-engine. Exactly what I said I wouldn’t do. Ahem.&lt;/p&gt;

&lt;p&gt;Early doors. I’m at the point where I can click a tile and move it about.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2017-01-06-StartOftheTilemap.png&quot;&gt;&lt;img src=&quot;/images/2017-01-06-StartOftheTilemap.png&quot; alt=&quot;It's a tilemap editor. Ish&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(+) I hate mince pies.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>PS4 v1.02 Save Games</title>
   <link href="https://www.triple-aye.com/2016/12/03/PS4-v1.0.2-Save-Games/"/>
   <updated>2016-12-03T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2016/12/03/PS4-v1.0.2-Save-Games</id>
   <content type="html">&lt;p&gt;A few people have still experienced the save icon corruption on PS4 and have posted to the Steam forums for info. Mart from RSG just posted the 
following steps which should fix the issue for anyone that’s upgraded from the previous build, but still has problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure the game isn’t running.&lt;/li&gt;
  &lt;li&gt;Check that you’re running V1.02 - you can do that by highlighting the game icon on the PS4 home menu, pressing Options and choosing Update History. If you’re not, download the update from the same Options menu.&lt;/li&gt;
  &lt;li&gt;From the PS4 home menu, go into Settings &amp;gt; Application Saved Data Management &amp;gt; Saved Data In System Storage &amp;gt; Delete and then go to Lumo.&lt;/li&gt;
  &lt;li&gt;You should see two files - Player Preferences and Lumo Save Slot 0. The latter is the one that’s causing all the trouble (the system should even tell you it’s corrupted), so delete it.&lt;/li&gt;
  &lt;li&gt;Exit back to the PS4 home menu and start the game again. The game will create new save data and that should be the end of all the problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The trouble appears to be that on PS4, deleting/reinstalling the game does NOT remove the save files - you have to do it manually.&lt;/p&gt;

&lt;p&gt;I know this is a massive ball-ache if you’ve managed to get a fair distance through the game, and I can only apologise. As far as we know this does solve the 
issue and v1.02 should be stable for you.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Lumo Build Updates</title>
   <link href="https://www.triple-aye.com/2016/11/08/Build-Update-v1.11.8-Fixes-to-Win10-controller-issues/"/>
   <updated>2016-11-08T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2016/11/08/Build-Update-v1.11.8---Fixes-to-Win10-controller-issues</id>
   <content type="html">&lt;p&gt;The Windows 10 Anniversary update caused a lot of weird issues with how gamepads work, leaving Lumo and a bunch of other games
with broken controls. I’ve just pushed out a new build to Steam that should fix most of these problems.&lt;/p&gt;

&lt;p&gt;It’s been tested with the following pads:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PS4&lt;/li&gt;
  &lt;li&gt;Xbox 360 (Wired and Wireless)&lt;/li&gt;
  &lt;li&gt;XBox One (wired)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other joypads should work, but may require you to define your own controller mappings in Settings-&amp;gt;Controls. Fight sticks are not directly supported, unfortunately, 
as many of them don’t identify themselves as pads, even though the may map to something like the default Xbox 360 layout (like my SF IV Fight Stick does).&lt;/p&gt;

&lt;p&gt;In addition to this I’ve re-written the redefine controls screen [and back-end], fixing several small issues that have been in there since release.&lt;/p&gt;

&lt;p&gt;Other fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Several affected achievements re-written&lt;/li&gt;
  &lt;li&gt;Small balancing changes&lt;/li&gt;
  &lt;li&gt;Clue added to the Ice Cube Stairs room&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mac and Linux were unaffected by the original bugs but I’ve put out new versions for all platforms just in-case. DRM free builds are uploading now and should go live in the next day or two.&lt;/p&gt;

&lt;p&gt;In addition - if this wasn’t bad enough -  Playstation 4 owners have been plagued by a save icon corruption for the last month. Withouth going into too much detail (&lt;em&gt;cough&lt;/em&gt;Unity&lt;em&gt;cough&lt;/em&gt;) I can 
confirm that the fix for this, on both PS4 and Vita, went live today. Phew :)&lt;/p&gt;

&lt;p&gt;Apologies to all affected by these breakages, I know it’s been a complete nightmare. :(&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Devupdate - 4th November</title>
   <link href="https://www.triple-aye.com/2016/11/04/Devupdate-4th-November/"/>
   <updated>2016-11-04T00:00:00+02:00</updated>
   <id>https://www.triple-aye.com/2016/11/04/Devupdate---4th-November</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;images/lemsip.jpg&quot; alt=&quot;How I miss this...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;God I miss this stuff. The last 10 days I’ve been down with a snotty cold. The first week was a complete wipeput because Finland, bless it, hasn’t 
quite caught up with the idea of dosing yourself to the eyeballs with a cacophony of drugs to ease 
yourself through. &lt;em&gt;sniff&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s not been all bad though.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/lumo_fanart.jpg&quot; alt=&quot;First bit of fan art&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lumo received its first bit of fan art!&lt;/p&gt;

&lt;p&gt;I’ve never been given something like this before. I was a bit lost for words, tbh. 
Complete surprise, but it cheered me up no end. Thank you Cris_Cat_Kun, you made my day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/famitsu.jpg&quot; alt=&quot;Famitsu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lumo’s out in Japan now, and got a respectable flush of 7s from Famitsu. Again, another bucket list 
tick, this. I love magazines, and I love seeing my work in them. Famitsu is one of the longest running
and most famous, and even today, it’s a healthy 230 pages of madness. Props to all at Rising Star who
worked behind the scenes to make this happen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/lumo_mag.jpg&quot; alt=&quot;Finland&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even the Finnish press have got in on the action!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/box.jpg&quot; alt=&quot;Box&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Annnd, I’ve finally got my hands on the boxed version.&lt;/p&gt;

&lt;p&gt;Again, another one off the bucket list.&lt;/p&gt;

&lt;p&gt;Since Sudeki I’ve had a little ritual of going into the local game shop, seeing what I’ve worked on nestled 
among all big games of the day, and buying it with a big grin on my face. I didn’t catch Lumo in the wild but I was able to 
buy it off Amazon, which still counts IMO.&lt;/p&gt;

&lt;p&gt;Development wise it’s been a bit slow, what with the man-flu, but I’ve had some productive train coding sessions the last few days.&lt;/p&gt;

&lt;p&gt;One of the things I’ve been tempted to do for Neutrino since the start is roll all my tools into the framework so I can carry it all 
forward to multiple projects. Key to this is the map editor. I started scratching out what would be required for this, but decided to 
pull back. It’s obviously going to grow arms and legs before taking on a life of its own. I’m old enough to know better.&lt;/p&gt;

&lt;p&gt;The obvious alternative is &lt;a href=&quot;www.mapeditor.org&quot;&gt;TileD&lt;/a&gt;, an open source map editor that’s been around, in one shape or form, for years. I’ve looked 
at this before for Beat Arena (another project I might return to one day) and passed because it’s quite rigid and a little old school. It’s
not changed much since I last looked at it, and the limitations of using fixed size tiles and rigid grid layouts is going to get on my nerves very quickly, 
but it’s a sensible short-cut to create the background layers for Neutrino. I can write some custom tools for spline editing and wave triggering.&lt;/p&gt;

&lt;p&gt;There are still a couple of hurdles with this approach:&lt;/p&gt;

&lt;p&gt;TileD outputs to TMX or JSON formats, neither of which I support. The Neutrino framework uses libconfig for parsing the various text-based data files, 
and I’m loath to add new dependencies. (There’s a good argument for dropping libconfig and just using a single header JSON library, but that’s a question for 
another day.)&lt;/p&gt;

&lt;p&gt;TileD also expects you to be working with a texture page of square tiles, which is fine, except I have no intention of just using square tiles in any of my games, or 
of introducing extra draw calls just so the square tiles can be on their own t-page…&lt;/p&gt;

&lt;p&gt;Currently I output texture pages via a build step that runs the individual art assets through &lt;a href=&quot;https://www.codeandweb.com/texturepacker&quot;&gt;Texture Packer&lt;/a&gt;, an insanely good 
tool for taking a collection of images and spitting out an optimised t-page. (BTW, if this isn’t in your tool box, it should be.) This leaves me with 
a .png containing all the sprites, and a text file containing all the sprite meta-data (position within the texture, size, etc).&lt;/p&gt;

&lt;p&gt;TileD doesn’t seem to have a way for 
me to mark the individual tiles in a t-page by hand - due to this expectation that they’ll be square, so easy to identify in the texture page automagically - meaning I have to drop in individual 
assets in order to make maps. Not a problem, except the ID of tiles in TileD’s output will likely differ from the meta-data of the texture page.&lt;/p&gt;

&lt;p&gt;It’s stuff like this 
that has tempted me to write my own map editor for the last 6 or 7 years…&lt;/p&gt;

&lt;p&gt;Anyway, the problem was easily solved with a Python script to pre-process the TileD JSON output, fix the mappings, and then spit out a libconfig format file that 
Neutrino can then use to build a VBO of the tile map. This can be inserted into the build process, or just done as and when it’s needed.&lt;/p&gt;

&lt;p&gt;Building a VBO of a tilemap is one of those jobs that I must have done 3 or 4 times now. The only thing I think I’ve written more times is a text writer. Literally, the
code to parse strings and spit them onto screen. I keep promising myself that “this will be the last time”. We’ll see if this one is…&lt;/p&gt;

&lt;p&gt;When I get around to it. Obviously this 
week I prevaricated and put in a few debug bits and pieces that I know I’ll need, the most important of which was the debug fly cam. (Mainly cos I know my first pass at 
the tile map will probably end up in the wrong location, so I’ll need to fly around to look for it…)&lt;/p&gt;

&lt;p&gt;This ended up being a fun little job as mapping keyboard and joystick input to controls for various player actions involves a bit more than you’d think. For a start, joypads
can be added and removed at runtime so you need to be able to move controllers between players, and keyboard layouts differ between locals, so you can’t just “detect a letter” 
and be done with it. SDL’s docs have a couple of gotchas around how you handle this stuff, but I was able to get it all working nicely. The only thing that’s missing 
is exposing an interface for assigning controllers or redefining controls. As that’s game specific I figure I can put that off for now.&lt;/p&gt;

&lt;p&gt;I’m hoping I’ll get a day clear to go back to Oh Snow next week, but with three teaching courses on the go that might be wishful thinking. Either way, I’ve had
fun this week. In between the sneezes.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Devupdate - 13th October</title>
   <link href="https://www.triple-aye.com/2016/10/13/Devupdate-13th-October/"/>
   <updated>2016-10-13T00:00:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/10/13/Devupdate---13th-October</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/2016.10.13_UV_ForBlogPost.PNG&quot; alt=&quot;UV Islands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I thought I’d do a quick update before I head out to the UK this weekend.&lt;/p&gt;

&lt;p&gt;I’ve had a bit of fun this week. Neutrino moved forward for the first time in a long while. I’ve integrated &lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;ImGUI&lt;/a&gt;, a lovely
header based widget library for games and other multi-media. This is one of those “where have you been all my life” bits of code, that slotted straight in and opened 
up a really simple, clean way to do debug output, windows, memory inspection and the like. So far I’ve only added some simple performance counters, but the plan is 
to use this to build up the internal editors for things like splines, particle effects and bullet patterns. I’m having a bit of a man crush on it…&lt;/p&gt;

&lt;p&gt;Oh Snow’s also moving forward. The base character is done, skinned and rigged. I had to make a few tweaks since the last update, and today I sat down to try and get the UVing 
into shape. I’ve not used any of the UV tools in Modo before (can you spot a pattern here?) and to be perfectly honest, for Lumo I got away with everything being basically box 
mapped, so don’t really profess to even know the terminology. Every day’s a school day.&lt;/p&gt;

&lt;p&gt;As ever, Modo’s been good to me. I made a lot of mistakes, and had to kinda stumble my way through the various options to work out what does what, but I finished today with a pretty 
clean set of UV islands, and what appears to be - to me at least - reasonable texel density.&lt;/p&gt;

&lt;p&gt;All this highlighted some problems in my modelling workflow. As a lot of the geometry is mirrored, I could have saved myself a lot of time if I’d done a quick UV map on the model 
before I mirrored it. I’m wasting UV space for things that could be overlapping. I’m not sure if there’s a quick way to do this after the fact, other than manually line up 
the appropriate islands. I might need to ask around on that.&lt;/p&gt;

&lt;p&gt;For this game it’s not really going to be a problem…&lt;/p&gt;

&lt;p&gt;Also, I should have done the UVing before the skinning, as I noticed a few problems with a couple of quads that meant going back in to make some tweaks. Fortunately this is simple in Modo,
but something to bear in mind in the future.&lt;/p&gt;

&lt;p&gt;The paint tools in Modo turned out to be really useful for finding where my UV seams were causing problems, and really drove home how quickly things can look shit if there’s too much 
distortion in the quads. Today I found all this out after I thought I was ‘done’, so I scrapped everything (basically the whole day’s work) and started again. Once I vaguely knew what 
I was doing the whole process took less than an hour.&lt;/p&gt;

&lt;p&gt;I’m having to stop myself from getting too stressed over the slow progress I’m making atm, and keep reminding myself that taking the hit now will pay off down the road. Learning Modo - and 
pretty much the entire art pipeline - is a pretty big task. Learning UE4 is also going to take a good long while. The fact is, I need these skills if I’m going to continue making games on my own, 
so it’s nice when I do finally crack something. Even if it takes all day… :)&lt;/p&gt;

&lt;p&gt;So, next up: a quick pass on the texture, then some simple poses for test anims.&lt;/p&gt;

&lt;p&gt;After I’ve recovered from a week in the UK! :D&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>This is scary...</title>
   <link href="https://www.triple-aye.com/2016/10/12/This-is-scary"/>
   <updated>2016-10-12T00:00:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/10/12/This-is-scary...</id>
   <content type="html">&lt;p&gt;Quick aside: I’ve been doing a bit of work on the side project this week - mainly on the train to and from my teaching classes - and I noticed something a bit worrying. For a 
while I’ve been wondering why my 2D framework for Neutrino appears to be pixel-fill limited on my laptop. Much more so than I expected. Jumping to 1080p in a window is enough 
to really hit the performance, so after integrating ImGUI I dug a little 
deeper and added some profilng.&lt;/p&gt;

&lt;p&gt;It turns out that the engine isn’t as slow as I thought. Internally it was vsync’d to 60, but unbound could 
potentially hit ~1400fps. Visually, however, it was blatantly dropping frames. If anything, it looked sub Dirty Hz (30fps). Not good. So I tried glmark2 and it was showing the same problem, 
it’d report fps in the hundreds, but visually appear dog slow.&lt;/p&gt;

&lt;p&gt;My laptop runs Ubuntu 16.04, and for the desktop environment I’ve been using the latest version of Cinnamon. I like it, it’s incredibly clean, good looking and does what I need. 
The other big plus is Nemo - the file manager - which is by far my favourite thing about it. Default split-pane views ftw! But, for whatever reason, I didn’t consider that my performance problems could 
be related to this.&lt;/p&gt;

&lt;p&gt;On a whim I tested the game under Unity, and lo. A silky smooth, 60fps.&lt;/p&gt;

&lt;p&gt;So yeah, even though Cinnamon claimed that it wasn’t running in SW rendering mode, for whatever reason, the window update wasn’t actually matching what I was outputting. Quite a big “Whoah” moment, 
and something I thought was worth sharing. Not all desktop environments are equal, and some aren’t good for games.&lt;/p&gt;

&lt;p&gt;Real shame, as I can’t use Cinnamon while it’s exhibiting this kinda problem. Also doesn’t bode well for when I release something, but I’ll cross that bridge when I come to it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Devupdate - 6th October</title>
   <link href="https://www.triple-aye.com/2016/10/06/Devupdate/"/>
   <updated>2016-10-06T00:00:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/10/06/Devupdate</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/2016.10.06_Character_WIP1.jpg&quot; alt=&quot;Character 1 WIP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After my last post I started work on a character model for the game. This is the first time I’ve ever modelled a character, and also the first time 
I’ve tried to do anything complicated that had any sort of predefined ‘style’ (low poly in this case, so nothing too strenuous).&lt;/p&gt;

&lt;p&gt;As expected, even simple character modelling is non-trivial and I’ve discovered I have 
an amazing ability to be completely OCD on vert placements, so probably wasted hours just tweaking stuff when I shouldn’t have bothered.&lt;/p&gt;

&lt;p&gt;The results aren’t amazing, but it was a good learning experience and it’ll do for now. It’s kinda close to what I had in my head, and hopefully the super deformed 
look will parse well enough on-screen. Fingers crossed!&lt;/p&gt;

&lt;p&gt;I’m intending to make a bunch of different hairstyles, hats, goggles and other bits, that you’ll be able to pick and choose from. Probably as 
some sort of unlock/upgrade tree. None of that should be too tricky, but I’ll need to look into how attachments work out in UE4, or find a simple way to output the variants from Modo. With a few base models 
I’ll be able to do most of the variations with material swaps, so it shouldn’t be too bad, either way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016.10.06_Character_WIP2.jpg&quot; alt=&quot;Character 1 WIP2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had to rig and skin four characters for Lumo, all in Max, and each of them ended up taking one or two days to get right. I hated doing it and still live in fear of ever going back in 
there to fix something. That’s probably why I’ve been putting off doing any character work on this for the last few weeks, but today I dragged myself away from tweaking vert placements and 
sat down in front of some tutorial videos to get to grips with how the process works in Modo. And - so far - it’s been a really pleasant experience.&lt;/p&gt;

&lt;p&gt;The rigging is nice and simple, taking less than 20 minutes, and the base vertex bindings the software produced is surprisingly close to what I need. I’ve probably got a few hours work left just to tweak the weights around the fingers and waist, but I’m pretty 
confident that this’ll be good to go before I leave for the UK next week.&lt;/p&gt;

&lt;p&gt;Then it’ll be UV unwrapping, and producing some simple test animations to get him skiing.&lt;/p&gt;

&lt;p&gt;Yet again, big props to Modo. It definitely fits with my head.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Devupdate - 23rd September</title>
   <link href="https://www.triple-aye.com/2016/09/23/devupdate-23rd-september/"/>
   <updated>2016-09-23T08:14:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/09/23/devupdate-23rd-september</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/22.09.2016-SplitScreenTest.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cultural learnings of Unreal 4 for the benefit of game development, again, this week. And I think I’ve got over the first hill…&lt;/p&gt;

&lt;p&gt;One of the things I found odd about Unity when I was starting was its complete lack of structure. Unity, from a certain angle, is basically an API and a fairly extensible editor, with a collection of half-finished bits to support you. This ‘flexibility’ is touted as its big strength, but over time I’ve grown to see this as a bit of a weakness. Some of that I attribute to the complete mess some of my students have got into, but even during Lumo, I grew to resent the amount of basic stuff that I had to roll. Why is localisation not built into the string classes? Why do I need to write my own serialisation? Why do I need to roll my own state handling? I need to write my own Audio manager?! etc. etc.&lt;/p&gt;

&lt;p&gt;Sure, some of this stuff is write-once and then amend for every game thereafter, and of course that’s no different to writing a game in C. But for anyone used to having something as basic as an outer while loop in charge of the game’s tick, a series of very loosely coupled components, initiated in a random order on load, means you have to be very careful about how you start the game and track state as you proceed through scenes. At some point, it’s going to bite you on the arse, or worse - as happened with Lumo more than once post alpha - a bump in editor version can lead to a re-serialisation of objects and a total re-order of your init. Race conditions can be subtle and hairy dragons…&lt;/p&gt;

&lt;p&gt;UE4 is a total contrast in this respect. It has a very clear structure that it seems to expect you to work in. There’s a GameMode, that’s, well, kinda the game globals for state, but I’m using it to handle a bit more. Actors, Pawns, etc are possessed by controllers that may or may not be players. Spawning players is done in a quite prescriptive way. Cameras come with a lot of expected functionality baked in. Basically, everything I’ve touched is ready rolled for a game, and you override and extend to mould it all into shape. The flip side of that coin is working out how you’re expected to do things.&lt;/p&gt;

&lt;p&gt;Initially I had everything for the player in a class derived from ACharacter, but that came with a lot of stuff I didn’t need. My players aren’t going to be walking about, and a lot of stuff will just be canned Anims and some simple collision detection, so I split that into a Player Controller and custom Pawn class. Now I’m working from the bare bones and can see what I’m doing.&lt;/p&gt;

&lt;p&gt;Because I want Oh Snow to be local multiplayer I figured I better dive-in and work out how the hell you do that. There’s a very simple way to spawn a single player - it’s basically handled for you automatically if you set the base class for your player - but the only examples I could find for handling multiplayer were Blueprints. I wanted to do things in C++ and the docs were a little, er, sparse. I ended up guessing my way through and spent the better part of a day trying things to see what happened. As expected, it’s about 2 lines of code to get going (took a while to find them though), and then to my complete surprise I got split screen for free. Yup, just having two cameras spawn in flips everything to split screen (unless you toggle a bool) and spawning 4 players gives me four screens. Nice.&lt;/p&gt;

&lt;p&gt;I think I’ve also found more of a sweet spot between Blueprints and classes. Rather than add a bunch of pre-existing components in the C++ constructor and then the reams of code to set their params, it’s easier to just derive my class from whatever, put in the functions I want, and then derive a Blueprint from the result. I can add components - cameras, animations, etc - to the blueprint and tweak everything in the editor to my hearts content. Less typing, less compiling. Fingers crossed.&lt;/p&gt;

&lt;p&gt;I’m also super impressed with UE4’s import stuff. It automagically picks up the materials from Modo, so no setup on my part. Adding collision is amazingly simple. Merging a set of assets into a single static mesh can be done in-engine, so no bouncing backwards and forwards to the modeller. The animation setup is sooooo much nicer than mechanim. That whole side of things looks like it’s going to be big time saver compared to Unity.&lt;/p&gt;

&lt;p&gt;All in all, a reasonably productive couple of days at the forge. I think I’ve got a bit more of a grip as to what UE’s doing, I’m in love with all the tools I’ve played with, and I’m quite close to the point where I can just try and make some gameplay.&lt;/p&gt;

&lt;p&gt;I’m going to need to model some characters soon though…&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dev Update – 14th September</title>
   <link href="https://www.triple-aye.com/2016/09/14/dev-update-15th-september/"/>
   <updated>2016-09-14T18:37:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/09/14/dev-update-15th-september</id>
   <content type="html">&lt;p&gt;I’ve had my head in Unreal, off and on, since the last post and I’m slowly starting to make head-way. As mentioned in the previous post, the Blueprint system was feeling like a grind, so I spent a week biting the bullet and just trying to get stuff going from the C++ side. This immediately gave me better results, and despite the iteration time being slower, I ended up getting a lot more done.&lt;/p&gt;

&lt;p&gt;To that end, I’ve scrapped what I’ve been working on - mainly little tests, but I got as far as a half functioning endless runner - and created a clean project and pushed it to Github on Monday.&lt;/p&gt;

&lt;p&gt;I had an idea about half-way through the development of Lumo for a little mobile game where you dragged around the view of a downhill ski slope, and the character twisted and turned to follow where the terrain was going. I figured this would work well, as you could essentially play it one-handed, and maybe you could extend it a bit further to add jumps and the odd trick without complicated the controls too much. It’s one of those little toy ideas that’s stuck in my head ever since, so I’m going to have a crack at making something similar as my first UE4 project. I say similar, as I’m not going to do it on mobile, at least not initially. For simplicity it’s probably better to start off with a PC game, and that also means I can go a little more Tony Hawks on it. The player will likely have a joypad…&lt;/p&gt;

&lt;p&gt;Early days but I’ve been really impressed with UE4. The animation stuff - compared to Mecanim - is like mana from heaven. The code API is big, and more verbose than what I’ve been used to (C++ vs C#, natch) but it makes sense. And it works. And there’s proper debugging channels. And. And.&lt;/p&gt;

&lt;p&gt;Going to be a while until I’m properly productive as I’m only working about 1.5 days a week on gamedev atm, but it’s nice to be chasing down another game. Even if it’s only a small one. Screenshots soon!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dev Update - 26th August</title>
   <link href="https://www.triple-aye.com/2016/08/26/dev-update-26th-august/"/>
   <updated>2016-08-26T10:52:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/08/26/dev-update-26th-august</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/Screenshot-from-2016-08-26-09-46-16-e1472198667714.png&quot; alt=&quot;Screenshot&quot; /&gt;
So, this is exciting. Linux Voice - easily my fav tech magazine - very kindly asked if I’d be interesting in writing a quick Dev Diary about Lumo. Obviously I jumped at the chance. Having grown up reading Zzap!64’s &lt;a href=&quot;http://www.zzap64.co.uk/zzap3/para_birth01.html&quot;&gt;“Diary of a Game”&lt;/a&gt; series, from the likes of Andy Braybrook and Jeff Minter, this was too good an opportunity to miss. The LV team did a lovely job, ending up with a 6 page feature - including some of the early prototype screenshots - in this month’s issue. Massive thanks to Graham and the lads for that!&lt;/p&gt;

&lt;p&gt;It’s taken a couple of weeks, but I’m definitely back in full-on ‘work mode’. Which is good, as it’s going to be a really busy few months ahead. I spent a couple of weeks in Modo messing around with tutorials and getting a feel for things, and I have to say I’m really happy with it. For some reason it just clicks in my head. I didn’t get to the character or rigging, but I did spend a long time messing around with a low poly look that I want to use for a possible prototype: Oh Snow!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Winter20Scene_Final.jpg&quot; alt=&quot;Winter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve also spent a week in UE4, messing about with Blueprints. There’s a lot to learn here and I’m already starting to feel that the Blueprint system isn’t for me. They’re not really much of a time saving as the workflow is labourious; drag pin, type the first few letters of the command, find box, drop box, hook up inputs/outputs, rinse repeat, so I could pretty much type what I wanted into Visual Studio and compile in the same time. I may have wasted all the work I’ve done, but it was a useful process to at least start to understand some of the jargon and API.&lt;/p&gt;

&lt;p&gt;Nothing to show from that effort, so far, and I suspect it’ll take me a few days to start everything again with C++ classes.&lt;/p&gt;

&lt;p&gt;Unfortunately it may be a while until I get back to UE4. My teaching schedule has been sorted and there’s a lot front-loaded between now and Xmas. This means I’ll be at the Uni two days a week.  I’ve also signed up to a Finnish language course, which is another 2 days a week, meaning the bulk of my dev time is going to be evenings and on the train. Because of this, I’ve started re-writing my old 2D framework, as I have a bunch of ideas for simple, small games that I might be productive on. A lot’s been done on that over the last few days - mostly under the hood prep - but I have sprites. Enjoy the mesmerising, floating head of &lt;a href=&quot;https://en.wikipedia.org/wiki/Kevin_Toms&quot;&gt;Kevin Toms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;iframe src=&quot;https://vine.co/v/5Oxwq2wdOi0/embed/simple?audio=1&quot; width=&quot;600&quot; height=&quot;600&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;script src=&quot;https://platform.vine.co/static/scripts/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Dev Update - 5th August</title>
   <link href="https://www.triple-aye.com/2016/08/05/dev-update-5th-august/"/>
   <updated>2016-08-05T18:31:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/08/05/dev-update-5th-august</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/NESJoypad_Final.jpg&quot; alt=&quot;NES Joypad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been on holiday! I know, that’s not exciting, but it’s the first proper feet-on-the-table, sat around playing games in my pants, do-nothing break I’ve had for, oooh, a while. And it was good, thank you for asking!&lt;/p&gt;

&lt;p&gt;Anyway, I’m back, and I’m going to try and be a bit more open about what I’m up to here, rather than just random &lt;a href=&quot;https://twitter.com/korruptor&quot;&gt;tweets&lt;/a&gt; and &lt;a href=&quot;https://triple-eh.tumblr.com&quot;&gt;Tumblr&lt;/a&gt; posts. I can’t promise how regular these devupdates will be, but I’ll aim for at least a couple a month.&lt;/p&gt;

&lt;p&gt;This is the first week back in front of my Dev PC since Lumo shipped. Despite having a bunch of ideas for new projects, I’m easing myself back into work by completely replacing my tool chain.&lt;/p&gt;

&lt;p&gt;Er, what?&lt;/p&gt;

&lt;p&gt;Lumo was created with Unity. For the most part Unity did what I wanted but the 10% of work to take the build from a nearly finished game to a polished, commercial release was, well, painful. Very painful. Much more painful than it had any right to be given the maturity of the middleware and the number of people using it. By the end of the project I needed 3 different patch versions of Unity, (one for each of the skus that I was handling: PC, Mac &amp;amp; Linux) just to get around crash and rendering bugs. Not good. Don’t get me started on the hoops the chaps at &lt;a href=&quot;http://www.jawltd.com/&quot;&gt;JAW&lt;/a&gt; had to go through on the console side. I also shipped with a lot of awful looking bugs that just weren’t present in earlier builds, all of which were completely out of my control. Wand particles would render incorrectly, or jump around the world, some of the animation blending is broken in specific circumstances, UI elements will pick up and render garbage for a couple of frames, lighting is broken in a few of the mini-games, etc. etc. Things that most of you won’t notice, but feel like a knife to the heart every time I see them. Unity 5.3.x was an absolute shit-show, so I decided to drop it and move to Unreal 4. There’s not going to be much news on the new projects until I start getting my head into UE4 and learn the ropes, which is why I mention it now.&lt;/p&gt;

&lt;p&gt;The other big change is on the art side. As you can tell from Lumo I’m a bit of a noob on the modelling side of things, but I spent enough time learning how to rig, animate, model &amp;amp; texture, that toward the end of the project I was happy enough to jump in and make the things I needed rather than search the Asset Store. Unfortunately I was doing all of this with 3DS Max, which is slow, expensive, crashes all the time, and had a 50/50 chance of actually exporting to an FBX file that Unity could use. I hated it.&lt;/p&gt;

&lt;p&gt;After asking people far more knowledgeably than me about what I should use, I bought myself a copy of &lt;a href=&quot;https://www.thefoundry.co.uk/products/modo/&quot;&gt;Modo&lt;/a&gt;. This week has been all about learning the ropes and I have to say, I immediately love it. The NES Joypad at the top of this post was the first thing to fall out of my monkeying around. Nothing too complicated - and yes, I know the DPad looks wrong - but I’m still pleased with the result.&lt;/p&gt;

&lt;p&gt;Next week I’m going to be 100% focused on Modo. I need to make a character, rig and animate it, and then I can start looking at getting assets into UE4. (Note: I reserve the right to do anything I want, contents may be hot, may contain nuts).&lt;/p&gt;

&lt;p&gt;Other stuff this week: Setting up Backblaze B2 for offsite backups of my NAS (I made a post about this on my &lt;a href=&quot;http://tdi.online&quot;&gt;personal blog&lt;/a&gt;) and finding things to stretch the new GTX1080 GPU I’ve pushed into my Dev PC.&lt;/p&gt;

&lt;p&gt;It’s nice to be back at work! :)&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Lumo Director's Commentary, Part 8</title>
   <link href="https://www.triple-aye.com/2016/07/08/lumo-directors-commentary-part-8/"/>
   <updated>2016-07-08T12:26:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/07/08/lumo-directors-commentary-part-8</id>
   <content type="html">&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6icLEGefcTY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;And that, Ladies and Gentlemen, is that. 100% rinse of Lumo, including the paperboy ending!&lt;/p&gt;

&lt;p&gt;I’m going on holiday for a couple of weeks, so enjoy the sun and thanks again to everyone that’s supported the game :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lumo Director's Commentary Part 7</title>
   <link href="https://www.triple-aye.com/2016/07/01/lumo-directors-commentary-part-7/"/>
   <updated>2016-07-01T11:37:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/07/01/lumo-directors-commentary-part-7</id>
   <content type="html">&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/iP_xaDQDZsk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Archiving...</title>
   <link href="https://www.triple-aye.com/2016/07/01/archiving/"/>
   <updated>2016-07-01T11:35:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/07/01/archiving</id>
   <content type="html">&lt;p&gt;Strange feeling, but the Lumo adventure is drawing to a close. I’ve just updated my PC to Windows 10 and I’m in the process of archiving up all the software, source code, assets, documents and miscellaneous paraphernalia that I’ve accumulated and used over the last 2.5 years making the game.&lt;/p&gt;

&lt;p&gt;I recently put out patch 1.06.27 which, I believe, is going to be the last update. There’s a tiny little bug I noticed during the Director’s commentary that I’d like to fix, but it’s not worth a patch for. So, I’ll keep an eye out for any reports of obvious game breaking bugs or compatibility issues, but should none arise, that’s officially the end of Lumo’s development.  Fingers crossed.&lt;/p&gt;

&lt;p&gt;It’s been a hell of an adventure, dark at times, but ultimately worth it. I’ve given up a few things in order to be in this position, but the end result is something that I’m proud of. I can look at Lumo and see a game with a good level of polish that does a lot more than I originally set out to achieve. It’s bigger than I anticipated, and took longer to make than I hoped, but it got a far wider exposure than I ever dreamed possible and received more than fair critical reactions from the majority of the press. So lots to be thankful for. (The metacritic is exactly where I’d put the game (solid 7/10, maybe an 8/10) and in places some people have fallen head over heels [ahem] for it, with 9s, 10s, Sizzlers and Editor’s Choice awards in the mix).&lt;/p&gt;

&lt;p&gt;I’m going to take a couple of weeks off now and spend some time with my other half. I have one last Lumo related thing to do (an article that’ll hopefully be printed soon) before this chapter’s officially closed. And I’m looking forward to starting on the next thing…&lt;/p&gt;

&lt;p&gt;So thanks to everyone that’s been supporting the game. More news on what’s next soon…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lumo, Vita release imminent!</title>
   <link href="https://www.triple-aye.com/2016/06/28/lumo-vita-release-imminent/"/>
   <updated>2016-06-28T16:20:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/06/28/lumo-vita-release-imminent</id>
   <content type="html">&lt;p&gt;As noted by the fine folks over at &lt;a href=&quot;http://www.eurogamer.net/articles/2016-06-28-lumo-finally-has-a-vita-release-date&quot;&gt;Eurogamer&lt;/a&gt;, the release date for Lumo has been announced; 5th July.&lt;/p&gt;

&lt;p&gt;This is much later than originally promised, and for that I do sincerely apologise for keeping you waiting, but the folks over at &lt;a href=&quot;http://www.jawltd.com/&quot;&gt;JAW&lt;/a&gt; have been working hard optimising, squeezing, cajoling and generally persuading what is, at heart, a PC game into the Vita’s tiny innards. No easy task…&lt;/p&gt;

&lt;p&gt;The form factor should suit the game well, and it’ll also support Cross Buy and Cross Save, so it’s a steal for all you Sony chums out there!&lt;/p&gt;

&lt;p&gt;Anyway, enjoy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Director's Commentary, Part 6</title>
   <link href="https://www.triple-aye.com/2016/06/23/directors-commentary-part-6/"/>
   <updated>2016-06-23T22:04:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/06/23/directors-commentary-part-6</id>
   <content type="html">&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DPXR4u92ikg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Lumo, now available for XBox One!</title>
   <link href="https://www.triple-aye.com/2016/06/23/lumo-now-available-for-xbox-one/"/>
   <updated>2016-06-23T22:01:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/06/23/lumo-now-available-for-xbox-one</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/image.png&quot; alt=&quot;Xbox&quot; /&gt;
Phew, we got there in the end! Lumo’s out now on XBox One. Head over to the &lt;a href=&quot;https://store.xbox.com/en-GB/Xbox-One/Games/Lumo/1247d4e3-2a97-4d47-9eba-8983c801edec&quot;&gt;Xbox store&lt;/a&gt; to grab your copy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Director's Commentary, Part 5</title>
   <link href="https://www.triple-aye.com/2016/06/17/directors-commentary-part-5/"/>
   <updated>2016-06-17T12:29:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/06/17/directors-commentary-part-5</id>
   <content type="html">&lt;p&gt;Quick run through the first of the Cauldron sections. Nothing too strenuous in here:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JzBgrJfAhk0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Director's Commentary, Part 4</title>
   <link href="https://www.triple-aye.com/2016/06/09/directors-commentary-part-4/"/>
   <updated>2016-06-09T11:07:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/06/09/directors-commentary-part-4</id>
   <content type="html">&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/H84P9mI-V4w&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Director's Commentary, Part 3 & World's first Old School run!</title>
   <link href="https://www.triple-aye.com/2016/06/03/directors-commentary-part-3-worlds-first-old-school-run/"/>
   <updated>2016-06-03T11:36:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/06/03/directors-commentary-part-3-worlds-first-old-school-run</id>
   <content type="html">&lt;p&gt;Exciting news, and worth recording for posterity… The world’s first Lumo Old School run has been recorded and put on You Tube. 1 hour 28 minutes to beat!&lt;/p&gt;

&lt;p&gt;It’s a pretty sane any% run, but there’s plenty of time to come off that. There’s another hidden short-cut in the game, and a few little exploits that haven’t been used. I’d guess a good any% run would be sub 1hr 15, but we’ll see. There’re probably exploits that I’m not aware of…&lt;/p&gt;

&lt;p&gt;Check it out:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KciwYApcJKM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;And while you’re in the You Tube mood, here’s Part 3 of my Director’s Commentary:&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/wSbU-5Pn3Vg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Director's Commentary, Part 2</title>
   <link href="https://www.triple-aye.com/2016/05/29/directors-commentary-part-2/"/>
   <updated>2016-05-29T01:31:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/05/29/directors-commentary-part-2</id>
   <content type="html">&lt;p&gt;Here’s the second part of my Director’s Commentary walk through of Lumo. Enjoy!&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7IEBQDRYWyI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Release Day!</title>
   <link href="https://www.triple-aye.com/2016/05/25/release-day/"/>
   <updated>2016-05-25T10:34:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/05/25/release-day</id>
   <content type="html">&lt;p&gt;Lumo’s out and the reaction from press and public has been great! Phew! That’s a massive weight off.&lt;/p&gt;

&lt;p&gt;No disasters have been reported, the game seems stable and there’s a lot of love for it in certain quaters (my twitter feed was going mental yesterday). That’s all I could hope for.&lt;/p&gt;

&lt;p&gt;I’ve tried not to read the reviews - there doesn’t seem much point, they can’t change anything - But the publisher’s been sending me an overview. There’re some 9s. A 10. Mainly 7s and 8s, with a few 6s bringing up the rear. That seems fair to me, I’d place it somewhere between a 7 or 8 if I were reviewing it. Happy days :)&lt;/p&gt;

&lt;p&gt;Massive thanks to everyone that’s bought it, everyone that’s reviewed it, or streamed it, or just talked about it on Twitter!&lt;/p&gt;

&lt;p&gt;For those of you that haven’t, you can buy it on &lt;a href=&quot;http://store.steampowered.com/app/345480/&quot;&gt;Steam&lt;/a&gt;, &lt;a href=&quot;https://www.gog.com/game/lumo&quot;&gt;Good Old Games&lt;/a&gt;, &lt;a href=&quot;https://www.humblebundle.com/store/lumo&quot;&gt;Humble&lt;/a&gt; or the &lt;a href=&quot;https://store.playstation.com/#!/en-gb/games/lumo/cid=EP4034-CUSA03923_00-LUMO000000000000?scope=sceapp&amp;amp;smcid=sceapp:home&quot;&gt;Playstation Store&lt;/a&gt;. Enjoy!&lt;/p&gt;

&lt;p&gt;I’ve got a few live streams to do this week. Eurogamer this afternoon, then Twitch during the early hours of tomorrow morning. Then I guess I’m on holiday…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Director's Commentary, Part 1</title>
   <link href="https://www.triple-aye.com/2016/05/20/directors-commentary-part-1/"/>
   <updated>2016-05-20T10:55:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/05/20/directors-commentary-part-1</id>
   <content type="html">&lt;p&gt;There’s a lot of stuff tucked away in Lumo, some of it’s obvious, some of it’s pretty subtle, so I’ve had a lot of requests to explain more about the game. To that end I’ve started a Director’s Commentary series of videos. I’m doing a full run through of the game, nattering as I go. I’ll show where a lot of the collectables are hidden, and discuss what ever pops into my head as I play.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/JyxaiOV4ebc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Lumo Release Date</title>
   <link href="https://www.triple-aye.com/2016/05/11/lumo-release-date/"/>
   <updated>2016-05-11T16:40:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/05/11/lumo-release-date</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/WebsiteHeader.png&quot; alt=&quot;Header&quot; /&gt;
Be-de-dip-diddly-dip… News Update!&lt;/p&gt;

&lt;p&gt;I’m happy to confirm that Lumo will be released on &lt;strong&gt;24th of May&lt;/strong&gt; for&lt;strong&gt; PC, Mac, Linux&lt;/strong&gt; &lt;strong&gt;&amp;amp; PS4&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;The XBox One and Vita versions will be landing a week or so later.&lt;/p&gt;

&lt;p&gt;It’s been a long road to get here, but I’m super excited (and nervous as hell) that you’ll be able to play it soon. Woo!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Devupdate, 11th May</title>
   <link href="https://www.triple-aye.com/2016/05/11/devupdate-11th-may/"/>
   <updated>2016-05-11T10:36:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/05/11/devupdate-11th-may</id>
   <content type="html">&lt;p&gt;So. This happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/EngineCapture.png&quot; alt=&quot;Engine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this happened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Screenshot-from-2016-05-11-101807.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then I had to take a headshot for Develop:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Develop_Headshot_small.jpg&quot; alt=&quot;Headshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I went for the “turning around at my desk, pleased that you want to speak to me” pose. I reckon I nailed that. The full interview is here: &lt;a href=&quot;http://www.develop-online.net/interview/gareth-noyce-on-making-lumo-triple-a-isn-t-my-calling/0220110&quot;&gt;http://www.develop-online.net/interview/gareth-noyce-on-making-lumo-triple-a-isn-t-my-calling/0220110&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ll explain more about Neutrino and my other plans in a later post. For now, keep your eyes peeled while you’re playing Lumo. There’s a big clue as to what type of game it is in the intro.&lt;/p&gt;

&lt;p&gt;Annnnnd… Last, but no means least, the mighty Rob Fearon put words to screen and claimed the crown for the first&lt;a href=&quot;http://takethismachine.com/lumo-2/&quot;&gt; Lumo review&lt;/a&gt;. God bless yer, Rob.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Where's Lumo?</title>
   <link href="https://www.triple-aye.com/2016/04/27/wheres-lumo/"/>
   <updated>2016-04-27T18:02:00+03:00</updated>
   <id>https://www.triple-aye.com/2016/04/27/wheres-lumo</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/MyDesk-2-1024x613.jpg&quot; alt=&quot;My Desk&quot; /&gt;
It’s there. On that PC.&lt;/p&gt;

&lt;p&gt;Ok, ok. I know we said it would be out by now but a button didn’t get pushed. The machine stopped. But the machine’s running now and in the delay I noticed that one of the achievements was broken, so phew, at least we didn’t live with that…&lt;/p&gt;

&lt;p&gt;I’m very very very (very) sorry for the delay. I desperately &lt;em&gt;want-this-out-so-you-can-play-it&lt;/em&gt; like you wouldn’t believe… I’m quietly stressing that there’s some other disaster, or nasty bug lurking around the corner but I think we’re good. So, with the wind behind us, we should be out in 2 or 3 weeks. Just don’t hold me to that until the press release goes out, yeah?&lt;/p&gt;

&lt;p&gt;On the plus side, the delay means we should be in Good Old Games and the Humble Store on day one, so DRM free copies will be available. That’s a good thing, innit?&lt;/p&gt;

&lt;p&gt;Anyway, sorry sorry sorry. It’s on the way. Sorry.&lt;/p&gt;
</content>
 </entry>
 

</feed>
