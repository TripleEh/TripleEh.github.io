{
    "version": "https://jsonfeed.org/version/1",
    "title": "Triple Eh?",
    "description": "Triple Eh? Ltd.",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "author": {
        "name": "Gareth Noyce"},
    "items": [
      {
            "id": "http://localhost:4000/2018/10/24/Dev-Log:-More-Fishing",
            "url": "http://localhost:4000/2018/10/24/Dev-Log-More-Fishing/",
            "title": "Dev Log: More Fishing",
            "content_html": "<p>I’ve been busy this month. Firstly, I’ve agreed to work a couple of days a week for a start-up in Cambridge (outside of games), so now I have some income.</p>\n\n<p>The build has also taken some good steps forward. Phil (Dopedemand) is back, providing music for the game, which is fantastic. You can hear some of his work in the video below.</p>\n\n<p>And the fishing system is basically done. Lots of little things in this, but it feels good and I’m going to have some fun with it!</p>\n\n<p>Check out the <a href=\"https://www.youtube.com/watch?v=rhiSc1BlFdA\">Video Log</a> to see how I’m getting on:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rhiSc1BlFdA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>",
            "summary": "I’ve been busy this month. Firstly, I’ve agreed to work a couple of days a week for a start-up in Cambridge (outside of games), so now I have some income.",
            "date_published": "2018-10-24T00:00:00+03:00",
            "date_modified": "2018-10-24T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/09/13/Dev-Log:-Build-Update",
            "url": "http://localhost:4000/2018/09/13/Dev-Log-Build-Update/",
            "title": "Dev Log: Build Update",
            "content_html": "<p>Woo, I’ve been on holiday! And done some stuff! And now I’m off to Finland to give some lectures on game design…</p>\n\n<p>So here’s a quick run-down of the bits and pieces I’ve been doing in-between all that…</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/P8CE-d36OGs?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n\n<p>Don’t forget, you can watch me streaming development most weekday mornings (GMT) on <a href=\"https://www.twitch.tv/tripleeh\">Twitch</a>.</p>",
            "summary": "Woo, I’ve been on holiday! And done some stuff! And now I’m off to Finland to give some lectures on game design…",
            "date_published": "2018-09-13T00:00:00+03:00",
            "date_modified": "2018-09-13T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/08/15/Dev-Log---Fishing",
            "url": "http://localhost:4000/2018/08/15/Dev-Log-Fishing/",
            "title": "Dev Log - Fishing",
            "content_html": "<p>Time for another dev log, this time I’m doing a high level overview of what was involved in the basics of the fishing action.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/z6M-wUo-rM4\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n\n<p>Here’s a <a href=\"https://www.youtube.com/watch?v=z6M-wUo-rM4\">Direct Link</a> for those that prefer.</p>\n\n<p>It’s still a bit rough and ready, but I did spend some time to do a proper title. Small improvements ;D</p>",
            "summary": "Time for another dev log, this time I’m doing a high level overview of what was involved in the basics of the fishing action.",
            "date_published": "2018-08-15T00:00:00+03:00",
            "date_modified": "2018-08-15T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/07/30/Dev-Log---Player-Character-Actions",
            "url": "http://localhost:4000/2018/07/30/Dev-Log-Player-Character-Actions/",
            "title": "Dev Log - Player Character Actions",
            "content_html": "<p>Here’s the first video Dev Log, where I discuss some of the Player Character Actions, and the systems I have to build under them.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/x2WHXuC23AQ\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n\n<p>Or a <a href=\"https://www.youtube.com/watch?v=x2WHXuC23AQ\">Direct Link</a> if you prefer.</p>\n\n<p>This is still very rough and ready. Rather than spend a couple of days doing fancy titles, sexy wipes, and capturing loads of video I just want to \nget something up, to get the ball rolling. I’ll slowly work to improve the overall quality as I do more videos.</p>\n\n<p>Don’t forget, you can always join me on <a href=\"https://www.twitch.tv/tripleeh\">Twitch</a>.</p>",
            "summary": "Here’s the first video Dev Log, where I discuss some of the Player Character Actions, and the systems I have to build under them.",
            "date_published": "2018-07-30T00:00:00+03:00",
            "date_modified": "2018-07-30T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/07/16/Lumo-Dev-Diary",
            "url": "http://localhost:4000/2018/07/16/Lumo-Dev-Diary/",
            "title": "Lumo Dev Diary",
            "content_html": "<p>My house move is complete and I’m living in the UK again. Woo!</p>\n\n<p>I stumbled on the Lumo Development Diary that I wrote for Linux Voice Magazine while setting up my office, and I’m fairly sure that I’ve never posted it here. So, for posterity, here is the full article:</p>\n\n<hr />\n<p>On April 29th, 2013, I arrived in Finland to start up a new dev-studio. The idea being to make mobile games and learn from the vibrant development community that had sprung up around companies such as Rovio and Supercell. That didn’t quite go to plan. In fact, I ended up doing something completely different and going it alone. Lumo, my first independent game, was the result; a modern take on the classic ‘Isometric Arcade Adventure’ genre (Head Over Heels, Amaurote, Knightlore etc) that was a mainstay of the 1980s gaming scene. Development took around 2.5 years, part-time, and the final result was released in May 2016. This is, roughly, how it happened.</p>\n<h3 id=\"november-2013\">November, 2013</h3>\n<p>For the last 3 months I’ve been working on an RTS prototype – think ‘Advance Wars’, and you’d be close – aimed at the tablet market. Something about it seems like a great fit between game and form-factor, but it’s becoming increasingly clear that I’m not going to be able to finish it and release it as a free-to-play game. I’ve not got the money for user acquisition (marketing by another name) and I’m not sure I can support it with enough content after release. It’s depressing and my constant mooching about is getting on my girlfriend’s nerves: “Why don’t you just make something you want to do, and forget about the mobile stuff?!” I think she has a point, but I’m still not sure what I can do on my own that I can finish to a high enough quality.\nI’m at a party, a little worse for wear, idly chatting to Ste Pickford over Twitter. He’s one of the Pickford brothers, responsible for many classic games, and we’re watching speed-runs of people playing Equinox, when it hits me… I’ve always wanted to make a game like Head Over Heels. It was the first game that I actually owned, so there’s a nice circularity to it. They’re reasonably small and I could probably do the whole thing on my own. Eureka!\nWhen the hangover subsides I get up and start work on a quick prototype. It instantly clicks. I think this is it. I show my girlfriend and make a quick video to share with Ste, who both make encouraging noises. ‘Arse Over Tit’ is born, and I have my project!</p>\n<h3 id=\"december-2013\">December, 2013</h3>\n<p>I’m nearly full time on Arse Over Tit. The University where I teach is nearing its winter break and the short consultancy job I’d picked up has finished. The design ideas have settled very quickly. I know that I want to ape the kind of world that Head Over Heels presented, so I’ve settled on the location being a big, ‘scary castle’, with two or three distinct ‘zones’. Each with their own art-style and set of toys for the player to discover.  I want the player to feel a little protective of the character and I want them to feel like they’re lost, so making the player character small, almost childlike,  should help both of those feelings. It’ll also subtly magnify the environmental dangers as they’re playing.\nThe big question looming over it all is how it’ll look. I know I don’t want to use pixel art. I want this to be as modern as possible – dynamic lighting, high resolution textures and as many modern post-effects as I can squeeze in –  but should it be cartoony or photo-realistic?\nThe prototype was quite bright and I want more of a ‘Scooby Doo’ feel, so I buy-in some textures from Gametextures.com and remove all the ambient lighting, settling instead on wall-based torches that light each room while casting long, dark shadows. This immediately feels better, so I create a room where the player spawns in with a big particle effect and link it to another room with musical floor tiles that you have to hit in sequence (stolen from the Billy Jean music video, natch). Even the simple act of moving between rooms makes it feel like a proper game…\nI think I’ll aim for it to be a similar size as Head Over Heels. So roughly 150 rooms. My notepad has a list of the types of mechanics I’d like to build, so the job of creating rooms begins in earnest.\nBut there’s another problem. My girlfriend hates the name ‘Arse Over Tit’. I’ve tried explaining that it’s just a pun on Head Over Heels, but it’s not washing, so I need to come up with something better. It seems apt to pick a Finnish name given that I’ve just moved here, so I fire up Google translator and start putting in words: Magic, Spell, Charm, Enchantment… Bang! There it is: Lumo.</p>\n<h3 id=\"january--march-2014\">January – March, 2014</h3>\n<p>I’ve got a small collection of rooms, but no real game-flow. I’ve settled on the look for two of the three zones that I’m planning and, on a whim, created a room where all the bricks fly-in, as you move, to form the room around you. I really like this effect but it doesn’t fit with how I’m picturing my castle to be. I’d like the zones to feel like they’re at different heights, so living space up-top, a basement in the middle, and then maybe a mine. For this to work I’d need an excuse to drop into some sort of ‘warp zone’, outside of the castle, so I can break all the game rules and mess around a bit. Hmmm.\nI’ve also been having a bit of fun by sneaking in the odd reference to old developers. I doubt anyone will notice these but they make me chuckle. Some crates have “A.C. &amp; G. Ltd” on them, as a nod to Ashby Computers &amp; Graphics Ltd who, it was pointed out to me, became Ultimate Play The Game, before later turning into Rare. Carpets and curtains have borders that mimic the box art of early Ultimate games (Knightlore and Mire Mare) and there’s a bit of graffiti on the wall saying “JR [John Ritman] &amp; BD [Bernie Drummond] Woz Ere” above two little skulls. Head Over Heels made it into the game! I’ve also taken part in the first, unofficial, Twitter ‘Googly Eye Challenge’ after Rob Fearon suggested that my boxes weren’t ‘Rare’ enough. They’re now walking around with eyes that follow the player. Very cute.\nLighting is still in constant flux, but I’m liking the dark and spooky feel that the castle has, even if I do  keep changing the colour palette. The ambient audio bed I’ve put in – consisting of little creaks and groans –  seems to be working well and there’s a distinct vibe forming. It’s coming together.\nSo, I’m going to need to make the game public (rather than just my Twitter feed), and the quick way to do that is probably the Steam Greenlight process. I’m going to need to distribute via Steam anyway, but in order for this to happen I need to have some screenshots and a gameplay trailer. The latter is a problem. I’ll need at least a minute, preferably two, of gameplay and it’s going to need to show more than just running and jumping. It’s time to make an instance of each of the game mechanics that I’ve scribbled down in my notepad and see if I can chain them together into something that looks like a game!</p>\n<h3 id=\"march--may-2014\">March – May, 2014</h3>\n<p>The first week of March is spent editing together the Greenlight video. I have just over 30 rooms to choose from, mainly showing running and jumping, so there’s plenty of footage. The inner DJ in me has taken over. I’ve ended up syncing everything to the music. Er, don’t do that. If I’m honest, I don’t have a plan on how to promote the Greenlight, I’ll just see what happens.\nI push the ‘Go’ button on the 12th March and Lumo stays on the front page of the Steam Greenlight Community for ~5 days before dropping off. Along with most of my traffic.  I’ve posted to every related Facebook group that I can think of, along with G+ but, predictably, this isn’t making much of a mark. I’m a bit worried that I’ll be stuck in the process for a couple of years as I’ve heard some horror-stories…\nAnd then there’s a bit of luck. Rob Fearon championed the game in his monthly round-up and the day after dome.fi – a Finnish game and movie news site – picks it up. There’s a noticeable spike in traffic and I make it to the Top 100.\nI’m there for a week when Valve green lights a new a batch games, so not being included is a blow and I have no idea when the next batch will be pushed through. I decide to send out some emails to gaming websites in the hope of getting some news pieces, but I hear absolutely nothing back. The traffic to the Greenlight page starts trending down sharply so I begin posting to Reddit and joining the #screenshotsaturday posts on Twitter. I continue this pattern, every Friday and Saturday, for a month, but I need a new screenshot of the game each week. It puts the pressure on being productive Monday to Friday.\nThere’s no obvious end in sight so I try another push with the gaming websites, but this time I include a mini-cv of the AAA games I’ve made in the past and a story about how I’ve left the previous studio I was a co-founder of. Within an hour I hear back from Kotaku, who post the news to their site the same day. The day after, Eurogamer pick it up, and then Rock Paper Shotgun. I’m elated and wait for the inevitable bump in traffic to the Greenlight page. Which never comes. Uh.\nThe day after the RPS piece I wake up to people congratulating me over Twitter, for what I have no idea, until I check my email and see the email from Valve confirming that I’ve been Greenlit. Phew!\nIn the end Lumo was in the Greenlight process for 35 days. More than 30k people hit the page and there were 9k yes votes. It’s the first properly stressful part of the project, but it’s done.</p>\n<h3 id=\"may--august-2014\">May – August, 2014</h3>\n<p>I’ve told myself that I’m officially in ‘Production’. That means doing some of the chores I’ve been putting off, like front-end, sound effects and actually settling some of the outstanding design questions. What powers will the player have? Will the game be centred around puzzles or just be skill-based? Should there be spells? How is the mouse best used?\nAnd then I start getting some interesting emails. One of the console manufacturers is interested in Lumo appearing on their platform. They’d like to see my design docs and have me present my ideas. This is a bit of a problem, because – other than some notes scribbled on paper – there is no formal design doc. I’ve purposefully not written one. One of the things that’s been so joyous about working alone is the lack of ‘paper-work’ bureaucracy associated with professional gamedev. For the most part I just wake up and build what ever is in my head. I put a presentation together to start the conversation and hope they don’t need too much, too quickly.\nUp to now I’ve only been considering Lumo for PC, so assumed a mouse and keyboard control system (with the mouse being used to deploy ‘spells’, which I’ve yet to think up). Putting it on console would mean supporting joypad. This could work, in fact, it might actually suit what I’m doing, as the original 8bit games only had one button. What if I stuck to the genre and made Lumo a one button game?\nI’ve also settled on an excuse for the ‘warp zone’: mini-games! I need something break-up the flow of play – to give the player a change of pace – so some short games would be perfect. I can also hide these  and use some of the collectables to unlock them. Things are falling into place!\nBy the start of August I have a very rough-and-ready build with a first pass at the game-flow. I take this to Assembly (a demoscene / LAN party held yearly in Helsinki) to show it to a few people and it immediately becomes clear that no one has played an isometric game in years. Getting through my rooms is proving to be way too much of a challenge. I need to seriously simplify the start of the game. Gah.\nThere’re some encouraging noises from friends though, and they universally love the little nods and winks to old games and famous developers that I’ve been sneaking in. I decide to take this aspect a lot more seriously, and with some help from Gary Penn, start reaching out to people for ‘official’ permission to use parts of their old games. I also cheekily send an email to Liz Upton at the Raspberry Pi foundation to see if they’ll let me use an rPi in the game. Lets see how many British references I can sneak in!</p>\n<h3 id=\"september--november-2014\">September – November, 2014</h3>\n<p>I’ve entirely re-worked the flow of the game. There’s now a section at the start that just focuses on controls, followed by another 30 minutes gameplay where I’m slowly introducing most of the mechanics that’ll be reused throughout the game. I’m not happy with how linear this has turned out, but I don’t have many options, anything else has proven to be overwhelming to new players.\nI’ve also added an entirely new zone. My girlfriend and I stumbled on a lovely old church in the country so I snapped a few photos of its walls and made some textures out of them. I now have my own little church zone, full of cobwebs and spiders!\nCurrent room count is at 220, so I’ve blown past Head Over Heels in size and I’m no where near the type of gameplay I want to do yet. The zones don’t flow logically into each other and I’m still making ‘tutorial’ style rooms. I want to get to an entirely open world where the player has several options of where to go, so I finally sketch out how all the sections of the game are going to map together. One year without a design doc was pretty good going…\nI’ve also made great progress with the warp-zone. Three of the mini-games are in and I’ve made some crazy little challenge rooms where everything is floating around the player. I’m really happy with how this part is shaping up (and the fact there’s a Bubble Bobble reference in there!)\nMusic is also in. Dopedemand’s delivered a bunch of fantastic tracks but the idea of doing a dynamic score isn’t working. The player character just moves too quickly; you can be in and out of a room before the music has a chance to react. We’ve spent a fair bit of time on this but I think we’ll have to fall back to ambient music beds. Phil’s fine with the idea – the test one he produced is working well – so he’s head-down in his studio making some more.\nI’ve also got the Linux version working. There were a lot of shader issues that needed fixing up, so all the hardsurface reflective shaders were removed and the water replaced. But it’s rock solid, and performs every so slightly faster than the Mac version on the same hardware. Happy with that.</p>\n<h3 id=\"december-2014\">December, 2014</h3>\n<p>I’ve changed the lighting, again. I’ve now got two ‘suns’ in the world, one for each of the back walls. These are different tones (one warm, one cold) so everything’s starting to pop a little more. I’m also colour-grading the final image. This is a lovely little trick that takes the colour of the pixel intended for the screen and pushes it through a look-up table. The look-up table allows you to bake-in adjustments – contrast, saturation, brightness, tone etc. – so gives you fine control over the final image, without having to do work to the individual textures. I remake the Greenlight video at 60fps to show this off.\nThere’s also been a sudden up-tick in publisher interest. I’ve got Xbox One devkits in the post and have a Vita devkit on my desk. There’s a lot of background chat between interested parties now, and it’s starting to eat up a bit of time. I’m going to have to make some decisions soon. I want to support Vita and, now the door is wide open, console, but it’s too much work to do on my own. There’s no rush, so I pretend not to think about it while I head off to spend Xmas with family.</p>\n\n<h3 id=\"january--march-2015\">January – March, 2015</h3>\n<p>I’ve hit a nice rhythm with what I’m building now – ideas are coming thick and fast – but this is the busy part of the year for teaching. I’m only getting a couple of days work done in-between the commuting. I still have a lot of conversations happening in the background about how to actually release the game, which is eating up time. Progress is slow, I’m low on cash and starting to sweat a little.\nI have managed to get most of the in-game UI done though. I want to make a scrap-book so the player can collect pages showing drawings of in-game exploits as they progress. It makes sense to put all the other stuff, like settings, save game, etc. in here as well.\nThe book model is done, I can animate pages, and I can render stuff to each of the pages, but this was way more difficult than I expected. And it’s had some nasty side-effects, the biggest of which is pausing the game. Up to now I was just freezing ‘time’ so everything in ‘the world’ was locked, but I can’t do that and have animations and particle effects play reliably as the book moves through the world, so in-game objects now have to detect they’re paused. I’ll be chasing little bugs around this forever, I know it.\nI’ve got a Vita version working, albeit slowly, which shows some potential, but I don’t really have time to optimise it. I drop this for now.</p>\n<h3 id=\"april-2015\">April, 2015</h3>\n<p>Unity – the game engine I’m using – has bounced up to version 5. In some senses this is an improvement. Up to now I’ve had a one version of Unity for PC and different versions for every console. Each of which had their own, nasty, bugs. With v5 everything should be unified in one editor, with plugins to support console.\nBut there are other changes under-the hood. The code API has changed. Fortunately none of my code was affected, I tend not to be fancy and was already doing things the API change was brought in to solve, but the same can’t be said for code I was using from the Asset Store. I decide to re-write all of this. I also bin the stuff used to create the UI in order to use Unity’s new UI tools. This is a complete re-write the front-end, in-game and mini-game UIs. Ugh.\nIf that wasn’t nasty enough, the lighting model has changed. I’m reliably informed that the legacy deferred pass won’t be optimised on console, so I have to use the new GI/deferred lighting model. This isn’t a small change. Every single material and shader in the game needs to be re-done. Every room needs to be re-lit. I no longer have the old fog model. Kill me.</p>\n<h3 id=\"may--august-2015\">May – August, 2015</h3>\n<p>This is, by far, the most productive I’ve been on the game. The missing mini-games are written, all the cut-scenes are done. I’ve made well over 100 rooms during the summer break. The game moves through the tutorial section, before slowly opening up into the final hub-zone, and I think it’s starting to feel good. The re factoring for Unity 5 has stabilised and the three main skus are all running well and in sync. I’ve no major platform specific bugs.\nEverything I’ve thought up has worked first time and I feel like I’m working like a well oiled machine. More importantly, I’m finally making the stuff I envisaging at the start of the project.\nI’ve also signed a publishing deal. This is a much needed injection of cash and support, so for once I’m not stressing about that side of things.</p>\n<h3 id=\"september-2015\">September, 2015</h3>\n<p>The publisher is taking Lumo to the EGX Rezzed show in London. This will be the first time the game’s been in other people’s hands since Assembly, a year ago. I’m nervous as all hell. I also need to make a specific build for the show and a new promotional video.\nFortunately the reaction from the show is amazing. Several people are calling it the game of the show, which is extremely flattering. Eurogamer do a video on it and suddenly Lumo’s in the spotlight. I’m quietly recovering from the palpitations I’ve been having all month.</p>\n<h3 id=\"october--december-2015\">October – December, 2015</h3>\n<p>I’ve agreed to hit content complete by January so Just Add Water Developments can begin on the console ports. I’ve got one section of the game left to do, about 30 rooms, then Steam integration, Save Game, Map, stuff like that. Seems fine. Of course, it doesn’t work out like that.\nMost of November is knocked out with travel to the UK for meetings, bits of PR and teaching. I get all the rooms done, just, but I need to balance the game and do all the integration stuff I’ve been putting off. December becomes an almighty crunch to get everything done. I’m working every waking minute and starting to stress a little. The situation’s not helped by constant bugs in the Unity Engine. Animations are breaking, the particle systems are not firing, or flicking randomly about the world. UI rendering picks up random garbage occasionally. Reflections are dropping the frame rate to unacceptable levels and I have a crash on Linux that I can’t debug. I roll back to an earlier Unity version and things are stable enough to get to content complete, but I’ve just had a glimpse of life over the next 4 months.\nI decide to cut the scrap-book collectables and the publisher is jittery about one of the mini-games, so I have to make something to replace it. Time’s getting tight. On the plus side, Steam leaderboards and clouds saves all work perfectly, first time. At least something’s going right.</p>\n<h3 id=\"january--march-2016\">January – March, 2016</h3>\n<p>This should just be a bug fixing phase, but it doesn’t work out like that. I find out there’s a problem with Unity on Xbox One that requires me to pull out all the audio using Unity’s in-built system and integrate it into FMOD.  There are thousands of audio instances spread around the game and after December’s antics I’m in full ‘Hulk Smash’ mode.\nI’m also struggling to find a version of Unity that’s stable across Linux, Mac and PC. Each has different bugs and I have crashes on Mac and Linux. In the end I run with 3 different patch releases of Unity, one for each platform, and I do hacks on my side to get over individual platform bugs. Some of it’s filth. Because of this I also have to move off Unity 5.2.x and go to 5.3.x. Another API change has been made, which affects a fair amount of my code. All the particles need fixing, again, and the scene loading is different. This introduces a weird race condition into the start-up of the game that turns out to be a subtle change to the serialisation order of components. I hack around this and I’m roughly back to where I started.\nIt’s not been a good upgrade, but things get worse. The specular lighting value in the rendering engine has changed. Every, single, specular material, in-game, is, broken. I could actually cry at this point.\nI fight through the process of re-doing the lighting and checking the materials in EVERY room of the game. It’s a rush job, because I have artists jumping up and down at Just Add Water who need the scenes for the console builds. I get things close, and throw the build over the fence. Looking back I didn’t do a great job at this, some of the rooms don’t look anywhere near as good as in previous builds and the intro scene ends up being flat and lacking contrast. None of the metals look good. I’m probably the only person that’ll notice, but it’s annoying none the less.\nThe actual bug-fixing process for my stuff is trivial, a couple of hundred bugs all told, so I have time to do some changes to gameplay and look through it for problems. In all honesty I’m at the point where I’m exhausted and just want it out, but this is the last chance to make things better.\nI head out to San Francisco for a PR trip, tired and worried about how the U.S. press will take to the game…</p>\n<h3 id=\"april--june-2016\">April – June, 2016</h3>\n<p>We’re due out on the 24th of April but we’re not going to hit the date. Unity bugs blocked one of the console versions right from the start and we’re stuck in cert with another. For everyone’s sanity the date gets pushed back a month and I’m in limbo. I can’t make changes to the game, and I can’t really move on to anything else. I’m not able to stop thinking about it and just relax. There’s a constant background nervous tension about how the game will be received, so I end up mentally pacing backwards and forwards for a few weeks.\nIn the end we hit the 24th May date with four of the skus. Xbox one and Vita follow behind. I receive an email from Eurogamer to let me know that they loved the game and finally, I get a decent night’s sleep.\nThe rest of the month is a blur of interviews, podcasts, 4am Twitch streams and fixing up some small bugs I notice as people are playing. I also start on the Director’s Commentary series for You Tube.</p>\n\n<p>It’s been a roller coaster getting to this point, but I’ve done what I set out to achieve. Lumo’s a niche game, admittedly, but watching the first speed-run of the game on You Tube and hearing that people have already rinsed it for the achievements is a fantastic feeling. Turns out there were quite a few people - like me - who loved those old isometric games. I’m hoping someone else picks it up from here and makes some more.</p>",
            "summary": "My house move is complete and I’m living in the UK again. Woo!",
            "date_published": "2018-07-16T00:00:00+03:00",
            "date_modified": "2018-07-16T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/05/26/A-new-look",
            "url": "http://localhost:4000/2018/05/26/A-new-look/",
            "title": "A new look…",
            "content_html": "<p>So I’ve every so slightly updated the blog. There’s a new colour scheme and a fancy logo has appeared. Don’t worry, nothing’s really changed except I’ve finally decided \nto “brand” my one man company.</p>\n\n<p>The new logo was made from a 99designs.com competition, which for me, worked out brilliantly; I got a new corporate logo and \nheaders for all the various social media. For the designer, well, I’ve no idea how that’s a sustainable business given at \nleast nine people competed for what amounted to a few hundred pounds worth of work. It seems like selling any creative work \nis an uphill struggle these days.</p>\n\n<p>Anyway, the company website is now live and basically points you at the various other places where you can follow my work. You can check it out <a href=\"https://www.triple-eh.com\">here.</a></p>\n\n<p>I’m on holiday for the next week, but when I get back I’m going to look at doing the first video devlog. For now, enjoy the new colour scheme. :)</p>",
            "summary": "So I’ve every so slightly updated the blog. There’s a new colour scheme and a fancy logo has appeared. Don’t worry, nothing’s really changed except I’ve finally decided to “brand” my one man company.",
            "date_published": "2018-05-26T00:00:00+03:00",
            "date_modified": "2018-05-26T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/05/05/I'm-alive",
            "url": "http://localhost:4000/2018/05/05/I'm-alive/",
            "title": "I’m alive…",
            "content_html": "<p>…with caveats :D</p>\n\n<p>Apologies, things have been quiet on here, which wasn’t intentional.</p>\n\n<p>At the start of April I suffered abdominal pains that, over the course of 6 hours, ended up with me \nhaving surgery for a suspected twisted intestine. I had the best possible outcomes from both the \nsurgery and the recuperation, but it’s meant the better part of four weeks not doing much at all (“recuperating”, or “boredom” as I like to think of it).</p>\n\n<p>I’m back on my feet, in fact, bar some much needed core strengthening to repair the muscle that was cut open \nI’d say I’m basically tip-top. Phew! So massive thanks to the Doctors and Nurses at Hki for their sterling work and humour. The physio was a bit harsh, though ;D</p>\n\n<p>The next big change is that I’m moving back to the UK in June. Things are making their way into boxes, errands need to be run, \nand my eye is not really on my work. Again. But this shouldn’t take too long, or be too painful.</p>\n\n<p>Once that’s out of the way I’m also thinking of doing more on Mixer/Twitch (and maybe You Tube), so my work is a little more visible. I love writing blog posts\nbut people don’t like reading them any more. That’s not to say this blog is going to die. It’s not. Some topics will deserve more detail than a video will allow so \nyou can still expect updates here, I’ve just not made up my mind how frequently, or what sort of content will be best.</p>\n\n<p>That’s a long winded way of apologising for the lack of updates this month, and for the lack of updates in the month to come. But I’ll be back soon :)</p>",
            "summary": "…with caveats :D",
            "date_published": "2018-05-05T00:00:00+03:00",
            "date_modified": "2018-05-05T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/03/24/Stylised-Water-Shader",
            "url": "http://localhost:4000/2018/03/24/Stylised-Water-Shader/",
            "title": "Stylised Water Shader",
            "content_html": "<p><img src=\"/images/water.gif\" alt=\"Water Animation Gif\" /></p>\n\n<p>Over the last few weeks I’ve been teaching 2nd year game programming students the basics of Unity3D shader programming. Last week \nthis culminated in the class making a simple Surface Shader for water, which I’ve – shamelessly – tried to get close to Zelda: Wind Waker. Because.</p>\n\n<p>Since stylised water effects are always in vogue, I figure this might be useful to other people.</p>\n\n<p>I’ve exposed all the parameters, but it’s a stupidly simple shader that you should have no problem bending to your needs.</p>\n\n<p>The GitHub repo is here: <a href=\"https://github.com/TripleEh/StylisedWater_SurfaceShader/\">https://github.com/TripleEh/StylisedWater_SurfaceShader/</a></p>\n\n<p>Enjoy!</p>",
            "summary": "",
            "date_published": "2018-03-24T00:00:00+02:00",
            "date_modified": "2018-03-24T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/03/07/In-Game-Sticky-Notes",
            "url": "http://localhost:4000/2018/03/07/In-Game-Sticky-Notes/",
            "title": "In-Game Sticky Notes…",
            "content_html": "<p>You know what it’s like, you’re building something in-engine and you need to make a note of something — a TODO, or random idea — and your notepad isn’t to hand.</p>\n\n<p>I went through a couple of notepads while making Lumo, as well as having a Remember The Milk list of TODOs and “wouldn’t it be funny ” ideas (most of which I actually managed to get through) but this requires a certain level of rigour. I had to constantly remind myself to go back and curate, lest I forget something. To this day I still have a niggling feeling that I let some good ideas slip…</p>\n\n<p>I’ve been on the hunt for a better way of managing this, well, ever since I joined the industry, so I’ve tried various methodologies, mind-maps, Trello boards, Jira projects, and all the usual project management wank that, frankly, is just overkill for what is, essentially, a conversation with myself.</p>\n\n<p>And then I remembered this:</p>\n\n<p><img src=\"images/sticky1.jpg\" alt=\"Screenshot of Nintendo's tooling in BotW\" /></p>\n\n<p>Fucking. Genius.</p>\n\n<p>I’ve worked on projects with levels of automation before — screenshots in the bug database that embed camera co-ords (and/or other information) that you could double click to launch the build in the correct location — but Nintendo have gone to the logical extreme. They’ve integrated their project management processes directly into their game-world. And that’s lush. Perfect, in fact.</p>\n\n<p>So how much of this would I need, working on my own?</p>\n\n<p>Well, technically, not much. The first pass could literally be a sticky note. A gentle reminder, in-game, to do something, that I can edit and delete as I play-test. For this I’d only need:</p>\n\n<ul>\n  <li>A text entry box (that only appears in development builds)</li>\n  <li>Mapped to some sort of joypad input (to show &amp; hide it)</li>\n  <li>A way to save the current position, along with whatever text was entered</li>\n  <li>Some modifications to the GameMode, to load this information and spawn Actors during start-up</li>\n  <li>A way to delete notes</li>\n  <li>I’d also like to keep this information human readable, just in case I want to review notes outside of the game</li>\n</ul>\n\n<h2 id=\"implementing\">Implementing</h2>\n\n<p>One of the mistakes I made with Lumo was relying on the Unity Inspector as the primary interface to the game’s state and “cheats”. This meant that I had to tick a bunch of boxes before letting the splash screen jump to the correct room, which became more than a little tedious by the end. One of the first things I did in LB was knock up a custom Dev UI to avoid this, so I already had the perfect place to add a text-entry box:</p>\n\n<p><img src=\"images/sticky2.jpeg\" alt=\"Screenshot of my dev UI\" /></p>\n\n<p>One pattern I’ve fallen into recently is using the Game Instance as my “Game Globals”. Rather than do a lot of GetX and casting — which is just as tedious in Blueprints as it is in code — I’ll store pointers to things I might need from several places in the Game Instance, or add simple Get/Set functions.</p>\n\n<p>Storing the Note is an example of this. The Game Instance knows about the static functions that do the dirty work, and exposes a simple “Add” / “Remove” pair of methods to Blueprints.</p>\n\n<p>[I tend to do most of my UI work in Blueprints now, primarily as they’re able to delay, which is handy when things are animating.]</p>\n\n<p><img src=\"images/sticky3.png\" alt=\"The Blueprint\" /></p>\n\n<h2 id=\"json\">JSon</h2>\n\n<p>Because I want the notes to be human readable, XML and Json immediately spring to mind. It seemed like a reasonable bet that one of these was implemented by UE4 and it turns out that Json is available by adding Json and JsonUtilities to your Build.cs file:</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">PublicDependencyModuleNames</span><span class=\"p\">.</span><span class=\"n\">AddRange</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">string</span><span class=\"p\">[]</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"s\">\"Json\"</span><span class=\"p\">,</span> <span class=\"s\">\"JsonUtilities\"</span>  <span class=\"p\">});</span>\n\n</code></pre></div></div>\n\n<p>There’s not a lot of documentation regarding Json, at least that I could find, but fortunately its use is scattered throughout the code-base. The simplest method that I’ve found looks like like this.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"c1\">// Create a root JSon object that'll hold all the sub sections\n</span><span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;</span> <span class=\"n\">RootJson</span> <span class=\"o\">=</span> <span class=\"n\">MakeShareable</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">FJsonObject</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Output the contents of the DevNotes arrays\n</span><span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m_aNoteContents</span><span class=\"p\">.</span><span class=\"n\">Num</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;</span> <span class=\"n\">SubJson</span> <span class=\"o\">=</span> <span class=\"n\">MakeShareable</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">FJsonObject</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"X\"</span><span class=\"p\">),</span> <span class=\"n\">m_aNotePositions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">X</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Y\"</span><span class=\"p\">),</span> <span class=\"n\">m_aNotePositions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">Y</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Z\"</span><span class=\"p\">),</span> <span class=\"n\">m_aNotePositions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">Z</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetStringField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note\"</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">m_aNoteContents</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"n\">RootJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetObjectField</span><span class=\"p\">(</span><span class=\"n\">FString</span><span class=\"o\">::</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note_%d\"</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">SubJson</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Output the built string to file\n</span><span class=\"p\">{</span>\n\t<span class=\"n\">FString</span> <span class=\"n\">OutputStr</span><span class=\"p\">;</span>\n\t<span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">TJsonWriter</span><span class=\"o\">&lt;&gt;&gt;</span> <span class=\"n\">Writer</span> <span class=\"o\">=</span> <span class=\"n\">TJsonWriterFactory</span><span class=\"o\">&lt;&gt;::</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">OutputStr</span><span class=\"p\">);</span>\n\t<span class=\"n\">FJsonSerializer</span><span class=\"o\">::</span><span class=\"n\">Serialize</span><span class=\"p\">(</span><span class=\"n\">RootJson</span><span class=\"p\">,</span> <span class=\"n\">Writer</span><span class=\"p\">);</span>\n\t<span class=\"n\">FString</span> <span class=\"n\">sFullPath</span> <span class=\"o\">=</span> <span class=\"n\">FPaths</span><span class=\"o\">::</span><span class=\"n\">ProjectSavedDir</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">_sDevNotesFilename</span><span class=\"p\">;</span>\n\t<span class=\"n\">FFileHelper</span><span class=\"o\">::</span><span class=\"n\">SaveStringToFile</span><span class=\"p\">(</span><span class=\"n\">OutputStr</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">sFullPath</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n</code></pre></div></div>\n\n<p>First we need to build the root of the Json document (RootJson) as this acts as the holder for the sub-objects that contain the actual data.</p>\n\n<p>With that, we can then iterate over whatever data we wish to export. The Json format is just a collection of name-value pairs (Bool, String, Number…) which sit inside a pair of curly braces. Because of this, each note — which contains the position and text that I entered — needs to go in it’s own Json object, which is then added to RootJson.</p>\n\n<p>Once we’ve parsed our data and built our Json we then need to serialise it out to a file, which we do by getting its string representation. This is achieved through TJsonWriter and FJsonSerializer. TJsonWriterFactory is templated to accept a printing policy when outputting to a string, but I’ve ignored that as the default is perfectly readable.</p>\n\n<p>[You’ll note from the code example that I’m currently saving to the game’s “Save Game” directory. This may have to change in the future as the contents of this directory don’t get packaged up with the build. But the notes are just reminders to self…]</p>\n\n<p>Loading the JSon is also dead simple, as it largely mirrors the creation process:</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">FString</span> <span class=\"n\">sFullPath</span> <span class=\"o\">=</span> <span class=\"n\">FPaths</span><span class=\"o\">::</span><span class=\"n\">ProjectSavedDir</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">_sDevNotesFilename</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FPlatformFileManager</span><span class=\"o\">::</span><span class=\"n\">Get</span><span class=\"p\">().</span><span class=\"n\">GetPlatformFile</span><span class=\"p\">().</span><span class=\"n\">FileExists</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sFullPath</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">UDbg</span><span class=\"o\">::</span><span class=\"n\">LOG_INFO</span><span class=\"p\">(</span><span class=\"s\">\"UDevNote::Init: Found Dev Notes Json File\"</span><span class=\"p\">);</span>\n\t<span class=\"n\">FString</span> <span class=\"n\">FileString</span><span class=\"p\">;</span>\n\t<span class=\"n\">FFileHelper</span><span class=\"o\">::</span><span class=\"n\">LoadFileToString</span><span class=\"p\">(</span><span class=\"n\">FileString</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">sFullPath</span><span class=\"p\">);</span>\n\t\t\t\t\n\t<span class=\"n\">TSharedPtr</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;</span> <span class=\"n\">RootJson</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t<span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">TJsonReader</span><span class=\"o\">&lt;&gt;&gt;</span> <span class=\"n\">JsonReader</span> <span class=\"o\">=</span> <span class=\"n\">TJsonReaderFactory</span><span class=\"o\">&lt;&gt;::</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"n\">FileString</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FJsonSerializer</span><span class=\"o\">::</span><span class=\"n\">Deserialize</span><span class=\"p\">(</span><span class=\"n\">JsonReader</span><span class=\"p\">,</span> <span class=\"n\">RootJson</span><span class=\"p\">))</span>\n\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">const</span> <span class=\"n\">TSharedPtr</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;*</span> <span class=\"n\">pObjectTest</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">RootJson</span><span class=\"o\">-&gt;</span><span class=\"n\">TryGetObjectField</span><span class=\"p\">(</span><span class=\"n\">FString</span><span class=\"o\">::</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note_%d\"</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">),</span><span class=\"n\">pObjectTest</span><span class=\"p\">))</span>\n\t\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t\t\t\t<span class=\"n\">FJsonObject</span><span class=\"o\">*</span> <span class=\"n\">SubJson</span> <span class=\"o\">=</span> <span class=\"n\">pObjectTest</span><span class=\"o\">-&gt;</span><span class=\"n\">Get</span><span class=\"p\">();</span>\n\t\t\t\t<span class=\"n\">FVector</span> <span class=\"n\">vPos</span> <span class=\"o\">=</span> <span class=\"n\">FVector</span><span class=\"p\">(</span><span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"X\"</span><span class=\"p\">)),</span> <span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Y\"</span><span class=\"p\">)),</span> <span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Z\"</span><span class=\"p\">)));</span>\n\t\t\t\t<span class=\"n\">FString</span> <span class=\"n\">sNote</span> <span class=\"o\">=</span> <span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetStringField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note\"</span><span class=\"p\">));</span>\n\t\t\t\t<span class=\"n\">m_aNoteContents</span><span class=\"p\">.</span><span class=\"n\">Emplace</span><span class=\"p\">(</span><span class=\"n\">sNote</span><span class=\"p\">);</span>\n\t\t\t\t<span class=\"n\">m_aNotePositions</span><span class=\"p\">.</span><span class=\"n\">Emplace</span><span class=\"p\">(</span><span class=\"n\">vPos</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n</code></pre></div></div>\n\n<h2 id=\"game-framework-classes\">Game Framework Classes</h2>\n\n<p>Now that I have the ability to export notes from the UI (and reload them) I just need to be able to spawn a representation into the world. I’ve opted to create a DevNote actor class, and then add a pointer to the derived Blueprint instance to my Game Mode.</p>\n\n<p>During BeginPlay() — in UE_BUILD_DEVELOPMENT configurations — the Game Mode checks that the Blueprint has been set, asks the Game Instance to check for Dev Notes, and then iterates over any, spawning an actor into the world for each.</p>\n\n<p>This actor stores the text of the Dev Note so it can be passed to the dialog system.</p>\n\n<p><img src=\"images/sticky4.png\" alt=\"A Sticky Note\" /></p>\n\n<h2 id=\"viewing-dev-note\">Viewing Dev Note</h2>\n\n<p>The Dev Note acts in the same way as other interactables — things like sign posts, or NPCs that have a message to pass to the player — by flashing up a button to press when the player enters a trigger area.</p>\n\n<p>If the player (me) interacts, the Dev Note text is passed to the dialog system, which pops up the appropriate UI.</p>\n\n<p>I’ll maybe write-up the Dialog System in a later blog post.</p>\n\n<p><img src=\"images/sticky5.png\" alt=\"The Dialog System showing the note\" /></p>\n\n<h2 id=\"where-next\">Where Next?</h2>\n\n<p>I quite like this new toy so I’m already thinking of ways it could be more useful. Hooking it up to a Bug Database is an obvious thing to do, but I’d also like to be able to spit out QR codes that track the game’s state. With that I’d have a very handy tool that would completely eliminate the problem I faced with Lumo; jumping about the timeline and ensuring the game is in the correct state to replicate issues and do repeatable tests.</p>\n\n<p>Anyway, it was a fun little aside, so maybe you’ll find it useful. :)</p>",
            "summary": "You know what it’s like, you’re building something in-engine and you need to make a note of something — a TODO, or random idea — and your notepad isn’t to hand.",
            "date_published": "2018-03-07T00:00:00+02:00",
            "date_modified": "2018-03-07T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/01/20/Super-Simple-Day-Night-Cycle",
            "url": "http://localhost:4000/2018/01/20/Super-Simple-Day-Night-Cycle/",
            "title": "Super Simple Day Night Cycle",
            "content_html": "<p>A Day/Night cycle can be a bit of a double edged sword. On the plus side it gives you the freedom to demarcate events into time periods — “they mostly come at night. Mostly…” — and on the downside you have to make the environment look good in a range of different lighting setups. So it’s important to have some easy controls.</p>\n\n<p>I’ve flip-flopped on whether to include a day/night cycle in my new project for a while. I’m not at the point where the game is looking good in any setup, so making things harder from the start might not be the best decision. But, I do want to have night-time specific events, and having drowned myself in Breath Of The Wild over the last few months it’s clear that having a cycle, even if simple, does add to the sense of “place”. The player gets to see the world evolve, even in small ways, over time, and that’s good.</p>\n\n<p>Before I begin explaining my simple implementation, let me point you at this series of videos from Kleiner Baer. He’s implemented an awesome Day/Night cycle that not only takes into account the long/lat of your game-world, but also the calendar seasons. I spent a day implementing it when I first considered adding Day/Night to my game, and it’s great, but not quite what I wanted…</p>\n\n<p>So what does my system need to do?</p>\n\n<ul>\n  <li>I’ll need to be able to set the time of day, for obvious reasons.</li>\n  <li>I’ll need to be able to get the time of day, as the Player will no doubt need it in a UI somewhere.</li>\n  <li>I want control over the length of my shadows. This means doing more than a simple slow, continuous rotation of the Sun and Moon. I want short mid-day shadows, and longer shadows at dawn/dusk, that project at specific angles. I’m trying flatter the top-down view of the world.</li>\n  <li>I don’t want black shadows, so I’m going to have to use a Sky Light to help lift them up, which means I’ll need to continuously update both the intensity of the Sky Light, and it’s colour.</li>\n  <li>I’ll need the same control for the colour and intensity of the Sun and Moon…</li>\n</ul>\n\n<p>Because I’m a top down game I don’t need:</p>\n\n<ul>\n  <li>The Sun or Moon to be visible in the sky, or move across the sky correctly.</li>\n</ul>\n\n<p>This simplifies things.</p>\n\n<p>My controller therefore needs: two directional lights (Sun and Moon), a Sky Light to help with the shadows, and a value to track the time.</p>\n\n<p>The first thing to do is decide how to handle the time. I don’t want to be fiddling around with minutes / seconds — why do the maths when you can avoid it? — so given I only want hours I can track this with a single float, that works as a 24 hour clock:</p>\n\n<ul>\n  <li>0.9f == 9pm</li>\n  <li>1.2f == Noon</li>\n  <li>2.1f == 9pm</li>\n</ul>\n\n<p>Etc.</p>\n\n<p>Updating the time is simple:</p>\n\n<blockquote>\n  <p>fCurrentGameTime += DeltaTime * (2.4f / fLengthOfDayInSeconds);</p>\n</blockquote>\n\n<p>which I can do in my DayNightController’s <em>Tick</em> function. Bob’s your mother’s brother.</p>\n\n<p>(If I want minutes, say for the UI, I can get them by multiplying <em>fCurrentGameTime</em> by 10, and then pulling out the fractional part of the resulting float. This is the percentage of an “hour”, so:</p>\n\n<blockquote>\n  <p>(fFract*100.0f) * 0.59f</p>\n</blockquote>\n\n<p>will give me a screen-printable value, and I’ll just ignore seconds…)</p>\n\n<p>So the main thing about this implementation is having control over colour and light intensity. I could just lerp between known-good values, say for morning, noon and night, but a far better way would be to use Curves.</p>\n\n<p>UE4, handily, has an editable curve system for float, vector and colour values — exactly what’s needed here — and one of their big benefits is that you can edit them and see your changes reflected during PIE. This is perfect for me, as I’ll be fiddling with these curves until the day the game is released.</p>\n\n<p>The Curve editor is fairly basic, but it does the job. For my system I need curves that go from 0.0 to 2.4f, which I pull-out using <em>fCurrentGameTime</em> as the index.</p>\n\n<p><img src=\"/images/DN1.PNG\" alt=\"Sun Colour\" /></p>\n\n<p>This is the curve for the colour of the Sun’s light during the course of the day. Atm I’m staying quite blue in the morning and blending to a very orange/red sunset in the evening, but this will be tweaked a million more times…</p>\n\n<p>The angle of the sun’s light is done in a similar way:</p>\n\n<p><img src=\"/images/DN2.png\" alt=\"Angle9\" /></p>\n\n<p>Editing the Y value in this graph is what allows me to have very small shadows at mid-day and longer ones at dusk/dawn. Very tweakable.</p>\n\n<p>So the class setup becomes:</p>\n\n<p><img src=\"/images/DN3.png\" alt=\"Class\" /></p>\n\n<p>And putting all this together, the Tick function looks like:</p>\n\n<p><img src=\"/images/DN4.png\" alt=\"Tick\" /></p>\n\n<p>As the title says: Super. Simple.</p>\n\n<p>There’re a couple of gotchas with this, at least for me.</p>\n\n<ul>\n  <li>You need some sensible defaults, otherwise everything is going to be waaaay too bright when you drop a derived Blueprint into the world.</li>\n  <li>Moveable Sky Lights will apply distance field AO by default, and that’s not something I’m after right now. It looks a little weird with my top-down view, but I may go back and tweak this later. Setting the Sky Light to Stationary disables this.</li>\n  <li>Because my game is top-down I don’t need a sky box. Passing in a specific Cube map (all white) to the Sky Light makes it a little cheaper and gives better colour control. (Hat-tip to Mr Large for that factoid.)</li>\n</ul>\n\n<p>So you’ll want to setup some sane values in the constructor. You’ll probably want to play around with a couple of lights in the editor first and work out how you want the shadows to appear, as well. There’re a lot of settings to toy with depending on the look you’re after.</p>\n\n<p>The end result, before I spend the next several years tweaking it, is pretty good.</p>\n\n<p><img src=\"/images/DN5.gif\" alt=\"TOD\" /></p>",
            "summary": "A Day/Night cycle can be a bit of a double edged sword. On the plus side it gives you the freedom to demarcate events into time periods — “they mostly come at night. Mostly…” — and on the downside you have to make the environment look good in a range of different lighting setups. So it’s important to have some easy controls.",
            "date_published": "2018-01-20T00:00:00+02:00",
            "date_modified": "2018-01-20T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []}]
}