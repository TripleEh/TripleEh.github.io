{
    "version": "https://jsonfeed.org/version/1",
    "title": "Triple Eh?",
    "description": "Triple Eh? Ltd.",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "author": {
        "name": "Gareth Noyce"},
    "items": [
      {
            "id": "http://localhost:4000/2018/03/07/In-Game-Sticky-Notes...",
            "url": "http://localhost:4000/2018/03/07/In-Game-Sticky-Notes",
            "title": "In-Game Sticky Notes…",
            "content_html": "<p>You know what it’s like, you’re building something in-engine and you need to make a note of something — a TODO, or random idea — and your notepad isn’t to hand.</p>\n\n<p>I went through a couple of notepads while making Lumo, as well as having a Remember The Milk list of TODOs and “wouldn’t it be funny ” ideas (most of which I actually managed to get through) but this requires a certain level of rigour. I had to constantly remind myself to go back and curate, lest I forget something. To this day I still have a niggling feeling that I let some good ideas slip…</p>\n\n<p>I’ve been on the hunt for a better way of managing this, well, ever since I joined the industry, so I’ve tried various methodologies, mind-maps, Trello boards, Jira projects, and all the usual project management wank that, frankly, is just overkill for what is, essentially, a conversation with myself.</p>\n\n<p>And then I remembered this:</p>\n\n<p><img src=\"images/sticky1.jpg\" alt=\"Screenshot of Nintendo's tooling in BotW\" /></p>\n\n<p>Fucking. Genius.</p>\n\n<p>I’ve worked on projects with levels of automation before — screenshots in the bug database that embed camera co-ords (and/or other information) that you could double click to launch the build in the correct location — but Nintendo have gone to the logical extreme. They’ve integrated their project management processes directly into their game-world. And that’s lush. Perfect, in fact.</p>\n\n<p>So how much of this would I need, working on my own?</p>\n\n<p>Well, technically, not much. The first pass could literally be a sticky note. A gentle reminder, in-game, to do something, that I can edit and delete as I play-test. For this I’d only need:</p>\n\n<ul>\n  <li>A text entry box (that only appears in development builds)</li>\n  <li>Mapped to some sort of joypad input (to show &amp; hide it)</li>\n  <li>A way to save the current position, along with whatever text was entered</li>\n  <li>Some modifications to the GameMode, to load this information and spawn Actors during start-up</li>\n  <li>A way to delete notes</li>\n  <li>I’d also like to keep this information human readable, just in case I want to review notes outside of the game</li>\n</ul>\n\n<h2 id=\"implementing\">Implementing</h2>\n\n<p>One of the mistakes I made with Lumo was relying on the Unity Inspector as the primary interface to the game’s state and “cheats”. This meant that I had to tick a bunch of boxes before letting the splash screen jump to the correct room, which became more than a little tedious by the end. One of the first things I did in LB was knock up a custom Dev UI to avoid this, so I already had the perfect place to add a text-entry box:</p>\n\n<p><img src=\"images/sticky2.jpeg\" alt=\"Screenshot of my dev UI\" /></p>\n\n<p>One pattern I’ve fallen into recently is using the Game Instance as my “Game Globals”. Rather than do a lot of GetX and casting — which is just as tedious in Blueprints as it is in code — I’ll store pointers to things I might need from several places in the Game Instance, or add simple Get/Set functions.</p>\n\n<p>Storing the Note is an example of this. The Game Instance knows about the static functions that do the dirty work, and exposes a simple “Add” / “Remove” pair of methods to Blueprints.</p>\n\n<p>[I tend to do most of my UI work in Blueprints now, primarily as they’re able to delay, which is handy when things are animating.]</p>\n\n<p><img src=\"images/sticky3.png\" alt=\"The Blueprint\" /></p>\n\n<h2 id=\"json\">JSon</h2>\n\n<p>Because I want the notes to be human readable, XML and Json immediately spring to mind. It seemed like a reasonable bet that one of these was implemented by UE4 and it turns out that Json is available by adding Json and JsonUtilities to your Build.cs file:</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">PublicDependencyModuleNames</span><span class=\"p\">.</span><span class=\"n\">AddRange</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">string</span><span class=\"p\">[]</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"s\">\"Json\"</span><span class=\"p\">,</span> <span class=\"s\">\"JsonUtilities\"</span>  <span class=\"p\">});</span>\n\n</code></pre></div></div>\n\n<p>There’s not a lot of documentation regarding Json, at least that I could find, but fortunately its use is scattered throughout the code-base. The simplest method that I’ve found looks like like this.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"c1\">// Create a root JSon object that'll hold all the sub sections\n</span><span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;</span> <span class=\"n\">RootJson</span> <span class=\"o\">=</span> <span class=\"n\">MakeShareable</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">FJsonObject</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Output the contents of the DevNotes arrays\n</span><span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m_aNoteContents</span><span class=\"p\">.</span><span class=\"n\">Num</span><span class=\"p\">();</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t<span class=\"p\">{</span>\n\t\t\t<span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;</span> <span class=\"n\">SubJson</span> <span class=\"o\">=</span> <span class=\"n\">MakeShareable</span><span class=\"p\">(</span><span class=\"n\">new</span> <span class=\"n\">FJsonObject</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"X\"</span><span class=\"p\">),</span> <span class=\"n\">m_aNotePositions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">X</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Y\"</span><span class=\"p\">),</span> <span class=\"n\">m_aNotePositions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">Y</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Z\"</span><span class=\"p\">),</span> <span class=\"n\">m_aNotePositions</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">Z</span><span class=\"p\">);</span>\n\t\t\t<span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetStringField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note\"</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">m_aNoteContents</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n\t\t\t<span class=\"n\">RootJson</span><span class=\"o\">-&gt;</span><span class=\"n\">SetObjectField</span><span class=\"p\">(</span><span class=\"n\">FString</span><span class=\"o\">::</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note_%d\"</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"n\">SubJson</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Output the built string to file\n</span><span class=\"p\">{</span>\n\t<span class=\"n\">FString</span> <span class=\"n\">OutputStr</span><span class=\"p\">;</span>\n\t<span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">TJsonWriter</span><span class=\"o\">&lt;&gt;&gt;</span> <span class=\"n\">Writer</span> <span class=\"o\">=</span> <span class=\"n\">TJsonWriterFactory</span><span class=\"o\">&lt;&gt;::</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">OutputStr</span><span class=\"p\">);</span>\n\t<span class=\"n\">FJsonSerializer</span><span class=\"o\">::</span><span class=\"n\">Serialize</span><span class=\"p\">(</span><span class=\"n\">RootJson</span><span class=\"p\">,</span> <span class=\"n\">Writer</span><span class=\"p\">);</span>\n\t<span class=\"n\">FString</span> <span class=\"n\">sFullPath</span> <span class=\"o\">=</span> <span class=\"n\">FPaths</span><span class=\"o\">::</span><span class=\"n\">ProjectSavedDir</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">_sDevNotesFilename</span><span class=\"p\">;</span>\n\t<span class=\"n\">FFileHelper</span><span class=\"o\">::</span><span class=\"n\">SaveStringToFile</span><span class=\"p\">(</span><span class=\"n\">OutputStr</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">sFullPath</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n</code></pre></div></div>\n\n<p>First we need to build the root of the Json document (RootJson) as this acts as the holder for the sub-objects that contain the actual data.</p>\n\n<p>With that, we can then iterate over whatever data we wish to export. The Json format is just a collection of name-value pairs (Bool, String, Number…) which sit inside a pair of curly braces. Because of this, each note — which contains the position and text that I entered — needs to go in it’s own Json object, which is then added to RootJson.</p>\n\n<p>Once we’ve parsed our data and built our Json we then need to serialise it out to a file, which we do by getting its string representation. This is achieved through TJsonWriter and FJsonSerializer. TJsonWriterFactory is templated to accept a printing policy when outputting to a string, but I’ve ignored that as the default is perfectly readable.</p>\n\n<p>[You’ll note from the code example that I’m currently saving to the game’s “Save Game” directory. This may have to change in the future as the contents of this directory don’t get packaged up with the build. But the notes are just reminders to self…]</p>\n\n<p>Loading the JSon is also dead simple, as it largely mirrors the creation process:</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">FString</span> <span class=\"n\">sFullPath</span> <span class=\"o\">=</span> <span class=\"n\">FPaths</span><span class=\"o\">::</span><span class=\"n\">ProjectSavedDir</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">_sDevNotesFilename</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FPlatformFileManager</span><span class=\"o\">::</span><span class=\"n\">Get</span><span class=\"p\">().</span><span class=\"n\">GetPlatformFile</span><span class=\"p\">().</span><span class=\"n\">FileExists</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sFullPath</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n\t<span class=\"n\">UDbg</span><span class=\"o\">::</span><span class=\"n\">LOG_INFO</span><span class=\"p\">(</span><span class=\"s\">\"UDevNote::Init: Found Dev Notes Json File\"</span><span class=\"p\">);</span>\n\t<span class=\"n\">FString</span> <span class=\"n\">FileString</span><span class=\"p\">;</span>\n\t<span class=\"n\">FFileHelper</span><span class=\"o\">::</span><span class=\"n\">LoadFileToString</span><span class=\"p\">(</span><span class=\"n\">FileString</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">sFullPath</span><span class=\"p\">);</span>\n\t\t\t\t\n\t<span class=\"n\">TSharedPtr</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;</span> <span class=\"n\">RootJson</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\t<span class=\"n\">TSharedRef</span><span class=\"o\">&lt;</span><span class=\"n\">TJsonReader</span><span class=\"o\">&lt;&gt;&gt;</span> <span class=\"n\">JsonReader</span> <span class=\"o\">=</span> <span class=\"n\">TJsonReaderFactory</span><span class=\"o\">&lt;&gt;::</span><span class=\"n\">Create</span><span class=\"p\">(</span><span class=\"n\">FileString</span><span class=\"p\">);</span>\n\n\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">FJsonSerializer</span><span class=\"o\">::</span><span class=\"n\">Deserialize</span><span class=\"p\">(</span><span class=\"n\">JsonReader</span><span class=\"p\">,</span> <span class=\"n\">RootJson</span><span class=\"p\">))</span>\n\t<span class=\"p\">{</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\t\t\t<span class=\"p\">{</span>\n\t\t\t\t<span class=\"k\">const</span> <span class=\"n\">TSharedPtr</span><span class=\"o\">&lt;</span><span class=\"n\">FJsonObject</span><span class=\"o\">&gt;*</span> <span class=\"n\">pObjectTest</span> <span class=\"o\">=</span> <span class=\"n\">nullptr</span><span class=\"p\">;</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">RootJson</span><span class=\"o\">-&gt;</span><span class=\"n\">TryGetObjectField</span><span class=\"p\">(</span><span class=\"n\">FString</span><span class=\"o\">::</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note_%d\"</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"p\">),</span><span class=\"n\">pObjectTest</span><span class=\"p\">))</span>\n\t\t\t\t\t<span class=\"k\">break</span><span class=\"p\">;</span>\n\n\t\t\t\t<span class=\"n\">FJsonObject</span><span class=\"o\">*</span> <span class=\"n\">SubJson</span> <span class=\"o\">=</span> <span class=\"n\">pObjectTest</span><span class=\"o\">-&gt;</span><span class=\"n\">Get</span><span class=\"p\">();</span>\n\t\t\t\t<span class=\"n\">FVector</span> <span class=\"n\">vPos</span> <span class=\"o\">=</span> <span class=\"n\">FVector</span><span class=\"p\">(</span><span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"X\"</span><span class=\"p\">)),</span> <span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Y\"</span><span class=\"p\">)),</span> <span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetNumberField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Z\"</span><span class=\"p\">)));</span>\n\t\t\t\t<span class=\"n\">FString</span> <span class=\"n\">sNote</span> <span class=\"o\">=</span> <span class=\"n\">SubJson</span><span class=\"o\">-&gt;</span><span class=\"n\">GetStringField</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">(</span><span class=\"s\">\"Note\"</span><span class=\"p\">));</span>\n\t\t\t\t<span class=\"n\">m_aNoteContents</span><span class=\"p\">.</span><span class=\"n\">Emplace</span><span class=\"p\">(</span><span class=\"n\">sNote</span><span class=\"p\">);</span>\n\t\t\t\t<span class=\"n\">m_aNotePositions</span><span class=\"p\">.</span><span class=\"n\">Emplace</span><span class=\"p\">(</span><span class=\"n\">vPos</span><span class=\"p\">);</span>\n\t\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n</code></pre></div></div>\n\n<h2 id=\"game-framework-classes\">Game Framework Classes</h2>\n\n<p>Now that I have the ability to export notes from the UI (and reload them) I just need to be able to spawn a representation into the world. I’ve opted to create a DevNote actor class, and then add a pointer to the derived Blueprint instance to my Game Mode.</p>\n\n<p>During BeginPlay() — in UE_BUILD_DEVELOPMENT configurations — the Game Mode checks that the Blueprint has been set, asks the Game Instance to check for Dev Notes, and then iterates over any, spawning an actor into the world for each.</p>\n\n<p>This actor stores the text of the Dev Note so it can be passed to the dialog system.</p>\n\n<p><img src=\"images/sticky4.png\" alt=\"A Sticky Note\" /></p>\n\n<h2 id=\"viewing-dev-note\">Viewing Dev Note</h2>\n\n<p>The Dev Note acts in the same way as other interactables — things like sign posts, or NPCs that have a message to pass to the player — by flashing up a button to press when the player enters a trigger area.</p>\n\n<p>If the player (me) interacts, the Dev Note text is passed to the dialog system, which pops up the appropriate UI.</p>\n\n<p>I’ll maybe write-up the Dialog System in a later blog post.</p>\n\n<p><img src=\"images/sticky5.png\" alt=\"The Dialog System showing the note\" /></p>\n\n<h2 id=\"where-next\">Where Next?</h2>\n\n<p>I quite like this new toy so I’m already thinking of ways it could be more useful. Hooking it up to a Bug Database is an obvious thing to do, but I’d also like to be able to spit out QR codes that track the game’s state. With that I’d have a very handy tool that would completely eliminate the problem I faced with Lumo; jumping about the timeline and ensuring the game is in the correct state to replicate issues and do repeatable tests.</p>\n\n<p>Anyway, it was a fun little aside, so maybe you’ll find it useful. :)</p>",
            "summary": "You know what it’s like, you’re building something in-engine and you need to make a note of something — a TODO, or random idea — and your notepad isn’t to hand.",
            "date_published": "2018-03-07T00:00:00+02:00",
            "date_modified": "2018-03-07T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/01/20/Super-Simple-Day-Night-Cycle",
            "url": "http://localhost:4000/2018/01/20/Super-Simple-Day-Night-Cycle/",
            "title": "Super Simple Day Night Cycle",
            "content_html": "<p>A Day/Night cycle can be a bit of a double edged sword. On the plus side it gives you the freedom to demarcate events into time periods — “they mostly come at night. Mostly…” — and on the downside you have to make the environment look good in a range of different lighting setups. So it’s important to have some easy controls.</p>\n\n<p>I’ve flip-flopped on whether to include a day/night cycle in my new project for a while. I’m not at the point where the game is looking good in any setup, so making things harder from the start might not be the best decision. But, I do want to have night-time specific events, and having drowned myself in Breath Of The Wild over the last few months it’s clear that having a cycle, even if simple, does add to the sense of “place”. The player gets to see the world evolve, even in small ways, over time, and that’s good.</p>\n\n<p>Before I begin explaining my simple implementation, let me point you at this series of videos from Kleiner Baer. He’s implemented an awesome Day/Night cycle that not only takes into account the long/lat of your game-world, but also the calendar seasons. I spent a day implementing it when I first considered adding Day/Night to my game, and it’s great, but not quite what I wanted…</p>\n\n<p>So what does my system need to do?</p>\n\n<ul>\n  <li>I’ll need to be able to set the time of day, for obvious reasons.</li>\n  <li>I’ll need to be able to get the time of day, as the Player will no doubt need it in a UI somewhere.</li>\n  <li>I want control over the length of my shadows. This means doing more than a simple slow, continuous rotation of the Sun and Moon. I want short mid-day shadows, and longer shadows at dawn/dusk, that project at specific angles. I’m trying flatter the top-down view of the world.</li>\n  <li>I don’t want black shadows, so I’m going to have to use a Sky Light to help lift them up, which means I’ll need to continuously update both the intensity of the Sky Light, and it’s colour.</li>\n  <li>I’ll need the same control for the colour and intensity of the Sun and Moon…</li>\n</ul>\n\n<p>Because I’m a top down game I don’t need:</p>\n\n<ul>\n  <li>The Sun or Moon to be visible in the sky, or move across the sky correctly.</li>\n</ul>\n\n<p>This simplifies things.</p>\n\n<p>My controller therefore needs: two directional lights (Sun and Moon), a Sky Light to help with the shadows, and a value to track the time.</p>\n\n<p>The first thing to do is decide how to handle the time. I don’t want to be fiddling around with minutes / seconds — why do the maths when you can avoid it? — so given I only want hours I can track this with a single float, that works as a 24 hour clock:</p>\n\n<ul>\n  <li>0.9f == 9pm</li>\n  <li>1.2f == Noon</li>\n  <li>2.1f == 9pm</li>\n</ul>\n\n<p>Etc.</p>\n\n<p>Updating the time is simple:</p>\n\n<blockquote>\n  <p>fCurrentGameTime += DeltaTime * (2.4f / fLengthOfDayInSeconds);</p>\n</blockquote>\n\n<p>which I can do in my DayNightController’s <em>Tick</em> function. Bob’s your mother’s brother.</p>\n\n<p>(If I want minutes, say for the UI, I can get them by multiplying <em>fCurrentGameTime</em> by 10, and then pulling out the fractional part of the resulting float. This is the percentage of an “hour”, so:</p>\n\n<blockquote>\n  <p>(fFract*100.0f) * 0.59f</p>\n</blockquote>\n\n<p>will give me a screen-printable value, and I’ll just ignore seconds…)</p>\n\n<p>So the main thing about this implementation is having control over colour and light intensity. I could just lerp between known-good values, say for morning, noon and night, but a far better way would be to use Curves.</p>\n\n<p>UE4, handily, has an editable curve system for float, vector and colour values — exactly what’s needed here — and one of their big benefits is that you can edit them and see your changes reflected during PIE. This is perfect for me, as I’ll be fiddling with these curves until the day the game is released.</p>\n\n<p>The Curve editor is fairly basic, but it does the job. For my system I need curves that go from 0.0 to 2.4f, which I pull-out using <em>fCurrentGameTime</em> as the index.</p>\n\n<p><img src=\"/images/DN1.PNG\" alt=\"Sun Colour\" /></p>\n\n<p>This is the curve for the colour of the Sun’s light during the course of the day. Atm I’m staying quite blue in the morning and blending to a very orange/red sunset in the evening, but this will be tweaked a million more times…</p>\n\n<p>The angle of the sun’s light is done in a similar way:</p>\n\n<p><img src=\"/images/DN2.png\" alt=\"Angle9\" /></p>\n\n<p>Editing the Y value in this graph is what allows me to have very small shadows at mid-day and longer ones at dusk/dawn. Very tweakable.</p>\n\n<p>So the class setup becomes:</p>\n\n<p><img src=\"/images/DN3.png\" alt=\"Class\" /></p>\n\n<p>And putting all this together, the Tick function looks like:</p>\n\n<p><img src=\"/images/DN4.png\" alt=\"Tick\" /></p>\n\n<p>As the title says: Super. Simple.</p>\n\n<p>There’re a couple of gotchas with this, at least for me.</p>\n\n<ul>\n  <li>You need some sensible defaults, otherwise everything is going to be waaaay too bright when you drop a derived Blueprint into the world.</li>\n  <li>Moveable Sky Lights will apply distance field AO by default, and that’s not something I’m after right now. It looks a little weird with my top-down view, but I may go back and tweak this later. Setting the Sky Light to Stationary disables this.</li>\n  <li>Because my game is top-down I don’t need a sky box. Passing in a specific Cube map (all white) to the Sky Light makes it a little cheaper and gives better colour control. (Hat-tip to Mr Large for that factoid.)</li>\n</ul>\n\n<p>So you’ll want to setup some sane values in the constructor. You’ll probably want to play around with a couple of lights in the editor first and work out how you want the shadows to appear, as well. There’re a lot of settings to toy with depending on the look you’re after.</p>\n\n<p>The end result, before I spend the next several years tweaking it, is pretty good.</p>\n\n<p><img src=\"/images/DN5.gif\" alt=\"TOD\" /></p>",
            "summary": "A Day/Night cycle can be a bit of a double edged sword. On the plus side it gives you the freedom to demarcate events into time periods — “they mostly come at night. Mostly…” — and on the downside you have to make the environment look good in a range of different lighting setups. So it’s important to have some easy controls.",
            "date_published": "2018-01-20T00:00:00+02:00",
            "date_modified": "2018-01-20T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2018/01/06/In-Game-Camera",
            "url": "http://localhost:4000/2018/01/06/In-Game-Camera/",
            "title": "In Game Camera",
            "content_html": "<p>Good camera implementations in games are super interesting, often hiding a lot of subtlety from the player in order to present the best view of the action. Don’t believe me? Check out this quick run-down of some of the camera-modes in <a href=\"https://www.youtube.com/watch?v=TCIMPYM0AQg\">Super Mario World</a>.</p>\n\n<p>Since cameras are good sport to figure out (and a few of my students have asked recently), I thought I’d quickly talk about what I’ve been doing with mine. It’s probably worth mentioning that this is pretty simple, so this write-up is unlikely to contain any surprises for the seasoned dev. Hopefully it’ll still be useful if you’re just starting to think about this stuff, though.</p>\n\n<h2 id=\"what-does-my-camera-need-to-do\">What Does My Camera Need To Do?</h2>\n\n<p>The inspiration for my current project is obviously the early Zelda games, but Link Between Worlds on the 3DS is probably the best thing to compare against, as it’s 3D and on “modern” hardware.</p>\n\n<p>Zelda-type camera implementations have discreet modes depending on what the player is doing / what type of gameplay is in the area. You can roughly list the main ones as:</p>\n\n<ul>\n  <li>Free Follow: The camera will track ground height and try to move in front of the player’s direction of travel so they have a better view of what’s in front of them.</li>\n  <li>Locked Follow: Similar to free, except ground-height will be ignored. Think of dungeon rooms with multi-height platforms… the camera’s height may or may not be fixed in these locations, depending on gameplay. But most commonly it’s fixed to one height.</li>\n</ul>\n\n<p>Both of these modes can be restricted to an area. IE: the camera movement will be clamped to predetermined bounds. This is most obvious in the Dungeons where you transition between rooms — the camera doesn’t show you the next room until you go through a door — but the same happens in outdoor areas. You’ll often transition (with a forced scroll) from a wooded area to a “village” or some such. I’ll be doing the same thing in my game to cover up the level streaming between outdoor zones.</p>\n\n<ul>\n  <li>Focus: Player has interacted with an object, and/or a conversation is happening, so the camera moves the focal point away from the centre of the screen to an area above the dialog box. Or, tracks back from its leading position to re-focus on the player.</li>\n  <li>Combat: Similar to Focus, but tracking the player and the object they’ve locked on to, with priority given to the locked-target’s location.</li>\n  <li>D-Pad Override: In the follow modes — and possibly combat, I’d need to check — the player can manually move the camera using the D-Pad, but it will bounce back when they let go. This is also bounds restricted, depending on location.</li>\n</ul>\n\n<p>You can also argue that the transitions in and out of these modes are also discreet states that require handling (and they will, in code), but for simplicity I’m going to skip over those here.</p>\n\n<p>My first pass at writing this camera system was to break down the camera logic into a state machine, roughly along the lines above, and start building functionality. This was a mistake. It lead me down the path of writing each discreet camera mode as its own, “sub-”state machine, which just overly complicated everything.</p>\n\n<p>I quickly threw that away and started again with the simplest state:</p>\n\n<h2 id=\"free-follow\">Free Follow</h2>\n<p>The major thing we want here is to “lead” the player — to make sure that the camera gets in front of the player in order to show them more of where they’re heading. This means:</p>\n\n<ul>\n  <li>The camera needs to be able to move faster than the player (so a tweakable is getting exposed here)</li>\n  <li>The distance the camera can get ahead of the player needs to be defined (another tweakable) and observed.</li>\n  <li>The camera needs to know which direction the player character is traveling.</li>\n</ul>\n\n<p>Note that third point. We don’t want to know what the character in the world is doing, we want to know the player’s intention.</p>\n\n<p>If the camera is attached, in some way, to the rotation of the character in the world then this will probably feel laggy. The character isn’t going to “flip” from one direction to the next, instantly. Instead it’s (most likely) going to rotate over a few frames to look smoother on the eye. This smoothing is acceptable in terms of moving the character, but it’ll make the camera do long, slow arcs, as it follows the rotation. This will probably look wrong, and definitely feel weird.</p>\n\n<p>Getting the player’s intention is as simple as reading the current stick input. This gives us a direction vector, which we can normalise, and then multiply out by any distance we want. The result of this — when added to the player’s current position — is a new, “wanted” position, with no other considerations taken into account.</p>\n\n<p>If you imagine a circle of such wanted positions — one for each direction the player could be heading in, centered around the player — then this ring represents the limits of where the camera can move when it’s leading the player:</p>\n\n<p><img src=\"images/CameraRing.jpeg\" alt=\"The Outer Ring\" /></p>\n\n<p>To move the camera from its current position to our new “wanted” position, we need to work out the trajectory to move along. We’re not going to jump to the outer ring in one go, but rather in a series of small steps.</p>\n\n<p>We can do this by subtracting the wanted position from the camera’s current position, which gives us a directional vector between the two locations.</p>\n\n<p>To move along this direction vector, we normalise it, multiply it by: (camera’s movement speed * DeltaTime) and then add the result to the camera’s current location. This gives us an intended “final position”.</p>\n\n<p><img src=\"images/CameraAnim.gif\" alt=\"A Slow Homing Missle\" /></p>\n\n<p>Yup, we’ve made a really slow homing missile. Simples.</p>\n\n<p>Now we have the “final position” all that’s left is the conditional stuff:</p>\n\n<p>If the final position is too far away from the player (outside the ring we identified in the first step) then we need to limit it. One way is to check the Size() of the vector between the intended final position and the character, and use GetClampedToSize() to find the position on the outer ring, if it’s too long.</p>\n\n<p>If we’re going to track the ground height, then we need to make a few choices. We could use a fixed height between the camera and the player character, but this feels a bit off to me when the character can jump.</p>\n\n<p>We could just raycast from the camera’s position, down to the ground, and then fix our height based off that, but then we’re going to get lots of weird issues when the camera “falls off” a cliff that the player is looking out over.</p>\n\n<p>So instead I opted to raycast down from the player character — ignoring whether they are jumping, or not — and finding the height of the ground directly underneath. The new camera height is just this, plus a fixed amount, but this may cause issues if there are areas in the world with very sharp inclines. In my case this isn’t a problem, I’m making the world and I’ll avoid doing this, but as a belts and braces thing I lerp between changes in height so it’ll always be smooth.</p>\n\n<p>The last thing to think about is how to handle when the player has moved the left stick on the gamepad — giving us a new wanted position — but the player character is unable to move in the world, or the character is moving very slowly. As it stands the camera will continue to move toward its outer limits at a fixed speed, which (in my game) looks wrong.</p>\n\n<p>The way I’ve opted to fix this is in the step where I calculate the trajectory between the camera’s current position and the new wanted position. Rather than multiplying this trajectory by: (camera’s movement speed * DeltaTime) I also take into account how much they’ve moved the stick on the gamepad, and how quickly the character is moving in the world. This looks a bit more like: (camera movement speed * (Stick Input * Speed of character in the world)) * DeltaTime</p>\n\n<p>’ve not mentioned the bounds checking in any of this, as it’s simply a Clamp(). How you get the bounds into the camera system is down to you. I have an area controller which contains this data, and I grab it via the game mode.</p>\n\n<p>There are other niceties we can think about that are down to personal taste:</p>\n\n<ul>\n  <li>Maybe the camera will lerp back from a leading position to centre on the player character after a period of inactivity?</li>\n  <li>Maybe there’s a small dead zone around the player, so not all movements force the camera to move?</li>\n  <li>Maybe the camera moves faster when it’s behind the player, than it does when it’s in front? A sorta “catch-up” mode.</li>\n  <li>Maybe the camera can take into account hot-spots in the world? Other NPCs, or parts of the environment could “attract” the camera’s wanted position, as it leads the player, to indicate clues or areas that might be worthy of attention.</li>\n</ul>\n\n<p>There’s plenty of ways we can plus this…</p>\n\n<h2 id=\"locked-follow\">Locked Follow</h2>\n\n<p>As you can guess, this isn’t really a special mode, it’s just deciding if we’re going to track ground height at any given point. We can do this with trigger areas in the world, or even at the game mode level. In my case I ended up making a sub-class of my camera specifically for dungeons, but mainly because I wanted to split out how I transition between rooms. On reflection, there was absolutely no need to do this.</p>\n\n<h2 id=\"focus\">Focus</h2>\n\n<p>In my game I remove control from the player when they’re in a conversation, so the main focus mode is simply a lerp to a focal point that’s either determined by the object that’s being interacted with, or the mid-point between the character and the NPC they are conversing with.</p>\n\n<p>To make this look nicer, I use easing curves on the lerp.</p>\n\n<p>When returning to follow (locked or free), I’ve not had to do anything. It actually looks better to have the camera move from where it is, rather than refocus on the player. I might change this in the future, though.</p>\n\n<h2 id=\"combat\">Combat</h2>\n\n<p>I’m not finished with combat at the minute, but the way I intend to do this is by modifying the camera’s wanted position to either be a point between the character and NPC, or on a circle around the NPC. Basically, I want the camera to focus on the thing the player is attacking, not the player’s character in the world, so biasing toward the NPC seems the way to go here. I’ll update this post once I’ve written it.</p>\n\n<h2 id=\"d-pad-override\">D-Pad Override</h2>\n\n<p>This is pretty simple. Any input from the D-Pad creates an additional direction vector which I add, as a final stage, to what we’ve calculated as the camera’s “final” follow position. Because the D-Pad is digital, I ramp the length of this vector up as the button is pressed, and down when it’s released, to smooth the additional movement. Just be careful to ramp the vertical and horizontal directions separately, to avoid weird results.</p>\n\n<p>By clamping the length of D-Pad’s direction vector (which is inherent in how I ramp it up and down over time), nothing breaks by just adding it. Height is unaffected, but there could be a case where the camera clips against a cliff edge when pushed too far. Fortunately, my world isn’t tall enough for this to be a problem and I only let the player manually move the camera short distances.</p>\n\n<p>This override is ignored in focus modes, as it’s not useful.</p>\n\n<p>–</p>\n\n<p>Bear in mind, this sort of follow cam may not be for you. I’m specifically emulating a Zelda-type implementation with the express desire to lead the player and frame important things in the best way, without manual control.</p>\n\n<p>UE4 has a camera boom system which you can easily point straight down to avoid having to do any of this work, or even attach it to something that follows the character in the world, but in my opinion, it’ll not have some of the niceties that the player will feel even if they’re not aware of them.</p>\n\n<p>The real magic is in that list of things we could do to plus this system (some of which are above), and how we transition between the camera’s discreet modes in a smooth and seamless way.</p>\n\n<p>Which I’m leaving down to you :D</p>",
            "summary": "Good camera implementations in games are super interesting, often hiding a lot of subtlety from the player in order to present the best view of the action. Don’t believe me? Check out this quick run-down of some of the camera-modes in Super Mario World.",
            "date_published": "2018-01-06T00:00:00+02:00",
            "date_modified": "2018-01-06T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2017/11/26/Devlog:-November",
            "url": "http://localhost:4000/2017/11/26/Devlog-November/",
            "title": "Devlog: November",
            "content_html": "<p>Apologies for the long delay in posting. I’m ashamed to say that I’ve still not bought a coffee machine, but it’s not stopped me from having a fairly productive few weeks.</p>\n\n<h2 id=\"lumo\">Lumo</h2>\n\n<p>Yes, it’s finally out on the Switch and just in time for Xmas! The port was done by Spiral House Ltd and I’m very pleased with the result. After all the hassles JAW had with Unity on Vita, I was\nworried that the same problems might plague Unity on the Switch, but fortunately that doesn’t appear to be the case.</p>\n\n<p>To all intents and purposes Lumo on the Switch is identical to the PS4 version, just capped at 30 fps. It’s also an unintentionally perfect game for the Switch, as the room based style of play \nmeans you can pick it up for 10 minutes, run about and then put it down. Obviously I’m a massive fan-boy for the Switch, but I really did enjoy going back to the game and playing it on the go. It feels perfect.</p>\n\n<p>There are physical copies in the EU and US, but not a lot of them so hit up Amazon if you’re after one. They’re going to disappear quickly.</p>\n\n<p>Fortunately I’ve not had to do much PR for this release, but I did do an <a href=\"https://www.reddit.com/r/NintendoSwitch/comments/7e9iyn/im_gareth_noyce_the_developer_of_lumo_ask_me/\">AMA on r/NintendoSwitch.</a> Many thanks to Tim and the other mods there for inviting me on. :)</p>\n\n<h2 id=\"little-breton\">Little Breton</h2>\n\n<p>With Psyance parked until I decide how to get some art done, I’ve moved on to the other idea that’s been bubbling away in the back of my head. In some respects this is a bit of a spiritual sequel to Lumo, as \nthe big problem I kept facing when making that game was to stop myself from turning it into a massive Zelda dungeon. Head over Heels and co. largely kept their puzzles restricted to single rooms, and so I wanted Lumo \nto stick to that template, which meant not doing certain things.</p>\n\n<p>So sod it, it’s time to make some Zelda dungeons :)</p>\n\n<p><img src=\"/images/LittleBreton.jpg\" alt=\"Little Breton\" /></p>\n\n<p>I’ll post more info on this after Xmas. For now I’m busy making modular art pieces so I can start sketching out a world to run around in.</p>",
            "summary": "Apologies for the long delay in posting. I’m ashamed to say that I’ve still not bought a coffee machine, but it’s not stopped me from having a fairly productive few weeks.",
            "date_published": "2017-11-26T00:00:00+02:00",
            "date_modified": "2017-11-26T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2017/10/29/Devlog:-Upheaval",
            "url": "http://localhost:4000/2017/10/29/Devlog-Upheaval/",
            "title": "Devlog: Upheaval",
            "content_html": "<p>I’ve lost count of the number of times I’ve moved house. Enough that I should be a bit of an expert at it, or at least, not underestimate how long it takes to sort everything out once I’ve “unpacked”. As it was, the first three weeks of October were a right-off, but bar buying a new coffee machine I’m basically good to go, I‘m back on the ‘net, and I’ve just come back from a much more chilled few days in the UK to celebrate my birthday.</p>\n\n<p>Go go go!</p>\n\n<p>Unfortunately, a few more things changed than just my location. It’s been a weird month.</p>\n\n<h2 id=\"next-game\">Next Game</h2>\n\n<p>I’ve not written about this in detail for a while, mainly because progress has been so stop-start it’s been hard to wrap-up the work into an interesting post.</p>\n\n<p>Where am I? I think from the code point of view I’ve got pretty much everything in place for a networked, multi-player game. Steam integration is working, you can join / leave hosted games through friend invites, browsing for public hosted games works, the co-op and TDM modes work, environmental stuff like trigger operated doors and moving platforms are in, pick-ups, weapon types, ammo, projectiles, area explosions, AI spawning, death— everything you’d expect from a game of Quake — is in and working. But it’s hit a wall.</p>\n\n<p>I’ve lost some collaborators (totally understandably, and I’m amazingly grateful for their help to-date) and I’ve not got the money to sub-contract out in order to hit the quality bar that I want. So I’m left with a choice: rollback on the art/audio/VFX-sides, and maybe go for something like Strafe or Gibhard, or, come back to this project if-and-when I have the cash to bring on a couple of people for a few months.</p>\n\n<p>I probably could hit a nice retro-feel with some low poly characters and pixely textures, but I think Strafe’s got that covered now and I don’t want to re-tread that ground. Going even more coarsely grained, almost Doom2-like, is an option, but again, feels like a step back from what I have in my head. So I’m going to park this.</p>\n\n<p>If I’m honest, every step in this project has been just a smidge harder than it should have been, not least because of some seismic shifts in my personal-life that have royally fucked my ability to focus, but I’m inclined to listen to the universe and accept that this “isn’t the one”. Meh.</p>\n\n<p>I still want to make a really fucking fast, twitchy FPS, so I’m not ready to let this go completely. Which means maintaining it with each UE4 upgrade and biding my time…</p>\n\n<h2 id=\"neutrino\">Neutrino</h2>\n\n<p>Man, I’m so fucking glad that I decided to roll with a little side-project, post Lumo. Being able to work on something when surrounded by boxes, on a train, bus, or stuck in an airport, has been a life-saver. I’d be much more stressed if I was looking back on October as being entirely unproductive.</p>\n\n<p>The fruits of this half-arsed labour?</p>\n\n<p><img src=\"images/Neutrino_BulletEd.gif\" alt=\"GunEd\" /></p>\n\n<p>Behold, my nearly finished Gun Editor.</p>\n\n<p>Yup, dead simple, probably only a day’s work, but I’ve also gone through and cleaned up a few hanging TODO items, and added viewport scaling to the mouse wheel for the editor modes.</p>\n\n<p>I need to add the bullet definitions to this, then do a particle emitter editor, at which point I literally have no more excuses. I need to be making a game with this. But I’m not going to go back to it until Xmas.</p>\n\n<p>I have a cunning plan…</p>",
            "summary": "I’ve lost count of the number of times I’ve moved house. Enough that I should be a bit of an expert at it, or at least, not underestimate how long it takes to sort everything out once I’ve “unpacked”. As it was, the first three weeks of October were a right-off, but bar buying a new coffee machine I’m basically good to go, I‘m back on the ‘net, and I’ve just come back from a much more chilled few days in the UK to celebrate my birthday.",
            "date_published": "2017-10-29T00:00:00+03:00",
            "date_modified": "2017-10-29T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2017/09/23/Devlog:-Curves",
            "url": "http://localhost:4000/2017/09/23/Devlog-Curves/",
            "title": "Devlog: Curves",
            "content_html": "<p>I’m in the process of packing up my life for the move back to Tampere, so this will be the last catch-up blog until I’m setup again. Meh.</p>\n\n<h3 id=\"neutrino\">Neutrino</h3>\n\n<p>I’ve done a fair bit more work on this, due to travel, downtime waiting for estate agents and the start of the new Semester at University. The “big” new item is the curve editor.</p>\n\n<p>I want the enemies to have pretty varied attack patterns, and although a lot of this could be done with the judicious use of Sine, you can’t beat having a decent spline to hand.</p>\n\n<p>There’re a few ways you can do this, but I’ve opted for chaining cubic Bézier curves together, as the maths is about my level.</p>\n\n<p><img src=\"/images/curve_math.png\" alt=\"Maths.... Ugh\" /></p>\n\n<p>Or, in code:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-c\" data-lang=\"c\"><span class=\"n\">glm</span><span class=\"o\">::</span><span class=\"n\">vec2</span> <span class=\"n\">CalculateBezierPoint</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">glm</span><span class=\"o\">::</span><span class=\"n\">vec2</span><span class=\"o\">*</span> <span class=\"n\">p0</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">glm</span><span class=\"o\">::</span><span class=\"n\">vec2</span><span class=\"o\">*</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">glm</span><span class=\"o\">::</span><span class=\"n\">vec2</span><span class=\"o\">*</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">glm</span><span class=\"o\">::</span><span class=\"n\">vec2</span><span class=\"o\">*</span> <span class=\"n\">p3</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">fT</span> <span class=\"o\">=</span> <span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"err\">—</span> <span class=\"n\">fT</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">tt</span> <span class=\"o\">=</span> <span class=\"n\">fT</span><span class=\"o\">*</span><span class=\"n\">fT</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">uu</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"o\">*</span><span class=\"n\">u</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">uuu</span> <span class=\"o\">=</span> <span class=\"n\">uu</span> <span class=\"o\">*</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">ttt</span> <span class=\"o\">=</span> <span class=\"n\">tt</span> <span class=\"o\">*</span> <span class=\"n\">fT</span><span class=\"p\">;</span>\n    <span class=\"n\">glm</span><span class=\"o\">::</span><span class=\"n\">vec2</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">glm</span><span class=\"o\">::</span><span class=\"n\">vec2</span><span class=\"p\">(</span><span class=\"n\">uuu</span> <span class=\"o\">*</span> <span class=\"o\">*</span><span class=\"n\">p0</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">+=</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">uu</span> <span class=\"o\">*</span> <span class=\"n\">t</span> <span class=\"o\">*</span> <span class=\"o\">*</span><span class=\"n\">p1</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span> <span class=\"o\">+=</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">u</span> <span class=\"o\">*</span> <span class=\"n\">tt</span> <span class=\"o\">*</span> <span class=\"o\">*</span><span class=\"n\">p2</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span> <span class=\"o\">+=</span> <span class=\"n\">ttt</span> <span class=\"o\">*</span> <span class=\"o\">*</span><span class=\"n\">p3</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>ImGui has been a lifesaver, again, as it took very little time to put together enough UI to load, save and edit curves. There’s no real limit to the number of curves I can chain together, but in practice, two or three is more than enough. It’s simple, but it works.</p>\n\n<p><img src=\"/images/NeutrinoCapture_23.09.17.gif\" alt=\"Fancy Gif\" /></p>\n\n<p>The other nice addition to Neutrino, as you can see above, is embedded .GIF output. Totally stole this idea from <a href=\"https://twitter.com/niinegames\">Philip Bak</a>, but it makes perfect sense; in a world where you need to fire out screenshots on social media as often as possible, what could be better than pressing a button and getting an animated .GIF, resized for Twitter?</p>\n\n<p>We both opted to use this <a href=\"https://github.com/ginsweater/gif-h\">single header</a> lib from Charlie Tangora. 3 function calls and Bob’s your mother’s brother. Perfect.</p>\n\n<p>Other stuff that’s been done:</p>\n\n<ul>\n  <li>Simple timer based callbacks, so single entities don’t need to constantly poll their state, they can just ask to do something in the future.</li>\n  <li>Start of a level sequencer… This is based off the camera position, and will be responsible for doing all the spawning and in-game events. I’ll probably do a ImGui editor for this and talk about it in a future post</li>\n  <li>Roughly sketched out how enemy entities will work. I’m trying to do existence based processing using a table layout — I’m high on Data Oriented Design kool-aid — so I’ll talk about this in a future post, once I’ve worked out how I’m doing it.</li>\n  <li>Ran the codebase through Valgrind and removed a bunch of silly little memory leaks. One problem with the stop/start nature of the way I work on this is that, sometimes, if I have to stop in the middle of something, I forget to go back and clean-up after myself. I’ve got into the habit of just checking periodically in-case I’ve done something stupid. Normally I have ;D</li>\n</ul>\n\n<p>Anyway, I better get back to packing boxes ;D</p>",
            "summary": "I’m in the process of packing up my life for the move back to Tampere, so this will be the last catch-up blog until I’m setup again. Meh.",
            "date_published": "2017-09-23T00:00:00+03:00",
            "date_modified": "2017-09-23T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": ["Neutrino","Devblog"]},{
            "id": "http://localhost:4000/2017/09/05/Devlog:-Grab-bag-catch-up-post...",
            "url": "http://localhost:4000/2017/09/05/Devlog-Grab-bag-catch-up-post",
            "title": "Devlog: Grab bag catch-up post…",
            "content_html": "<p>I’m waaaay overdue a post.</p>\n\n<p>A lot has been going on, on the dev-side, and in my personal life. I’ve had a bit of a holiday, I’ve been to the UK and back, and I’m at the start of trying to move away from Helsinki, and back to Tampere. My plans of a heads down summer of work didn’t really happen. Oh well :D</p>\n\n<h2 id=\"neutrino\">Neutrino</h2>\n\n<p>Due to the travel, hanging about in airports and nights in hotels, Neutrino has had a fair bit of attention. Effectively the engine side of it is complete.</p>\n\n<p>Box2D has been integrated. I’m not a massive fan of Box2D, but it’s simple enough to use and reasonably fast for a small number of objects. I’ve gone the whole hog this time and written the debug renderer for the physics world! Seeing what’s happening under the hood really does make a difference.</p>\n\n<p>Neutrino is still single threaded, and still, effectively, vsync locked. I’m going to do a bit of work at some point to move Box2D over to another thread and fix the fucking timestep, at which point it’d be interesting to see it run on a GSync screen. But anyway…</p>\n\n<p><img src=\"/images/2017-09-05-DebugRender.png\" alt=\"Debug Rendering\" /></p>\n\n<p>Still not much to look at, but it’s getting there. Next step is to make a particle emitter editor, bullet trajectory “pattern” editor and a spline editor for the attack waves. Then I think I can make some levels…</p>\n\n<h2 id=\"next-game\">Next Game</h2>\n\n<p>A month or so ago I decided that I had a lot of bits, but I didn’t have a game. I really should start putting this all together.</p>\n\n<p>Steam’s a good forcing function for this: If I’m going to make an online game then I really need to have it running through Steam and then get some other people to play it! To do that, I’ll need working UI and a proper flow in-and-out of the various game modes.</p>\n\n<p>UI in UE4 is pretty lovely. UMG has its quirks, but it works, looks good, and compared to the complete abomination in Unity, is a joy to put together. And — shock — I really like Blueprints for chaining UI together. Delay node ftw!</p>\n\n<p>That being said, there’s still a lot of UI screens to put together — once you throw in game-modes, with options, lobby screens, error handling etc. — but I have a working screen for each part of this (with no real thought applied to the styling atm) and I’m able to enter and exit a game.</p>\n\n<p>Online Session handling (like pretty much everything else in UE4) is piss poorly documented. There’s a video showing you how to do it in Blueprints, and a working example in Shooter Game that does it in C++. Because it’s so intrinsically tied to the UI, for the first pass I opted to start a simple blueprint session and see if I can connect to it via Steam. This took the better part of a day, but it does actually work; I can see hosted games over Steam, pull up some small bits of information about them, and I can join and leave a session. Wow!</p>\n\n<p>The problem is, the blueprint stuff doesn’t really have any idea about any of the custom parameters that define a hosted session, so I’m going to have to go back under the hood and do this properly in C++. Then I can filter against game mode, see the name of the server, handle friend invites and the like. But for now, just for the purposes of development, I have a “game” that I can upload to Steam, send to friends, and we can run about and shoot each.</p>\n\n<p>Time to grey box some levels to run around in.</p>",
            "summary": "I’m waaaay overdue a post.",
            "date_published": "2017-09-05T00:00:00+03:00",
            "date_modified": "2017-09-05T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2017/07/20/Work-In-Progress",
            "url": "http://localhost:4000/2017/07/20/Work-In-Progress/",
            "title": "Work In Progress",
            "content_html": "<p>Quick little update, especially for those of you that actually follow the blog, rather than catch me on Tumblr or Medium. Here’s the progress that I’ve been making on the AI in the test dungeon over the last 3 weeks:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AUwQYHzczTQ\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<p>I need to add in some animations to emphasis when he’s searching for you, and when he’s fleeing from you, along with some audio barks so it’s clear that the modes have changed. But he’s running about, shooting and trying his \nbest not to be a completely static target. Good enough, for now, but I’ll be coming back to this a lot over the course of development.</p>",
            "summary": "Quick little update, especially for those of you that actually follow the blog, rather than catch me on Tumblr or Medium. Here’s the progress that I’ve been making on the AI in the test dungeon over the last 3 weeks:",
            "date_published": "2017-07-20T00:00:00+03:00",
            "date_modified": "2017-07-20T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": ["Next","Game,","WIP,","AI","Development"]},{
            "id": "http://localhost:4000/2017/07/17/Devlog:-Oh-Behave...",
            "url": "http://localhost:4000/2017/07/17/Devlog-Oh-Behave",
            "title": "Devlog: Oh Behave…",
            "content_html": "<p><img src=\"/images/2017-07-14-Behave.png\" alt=\"Behaviour Tree\" /></p>\n\n<p>Finally. I’ve got around to some game-play programming…</p>\n\n<p>My natural instinct when approaching this is to getting busy building a finite state machine, the core of which can be shared over the AI in my game, and then start building some instances to see what I like and what I don’t.</p>\n\n<p>UE4, unsurprisingly, is reasonably opinionated about how you should approach this and has its own system: Behaviour Trees. I’ve seen the BT system mentioned by quite a few devs over the last couple of months, and read bits and pieces about how to use it prior to rolling up my sleeves. I was quite excited to jump-in, but over the course of the last ten days I think I’ve gone through at least half of the seven stages of grief just trying to find a way of working with it that I can live with…</p>\n\n<p>One reason for this — and the thing that consistently annoys me about learning modern tools — is the absolute piss-poor state of documentation. I will never understand why people think scrubbing through hours of video is better than concise, written explanations of something, but there you go. Good technical documentation is a dying breed.</p>\n\n<p>The BT system does do slightly better than expected in this regard, as there’s a relatively skinny HOWTO that walks you through the basics, but A) It’s blueprint orientated and B) AI also has to drive animation, and audio, and oh-my-god-stuff-needs-to-be-replicated-and-why-the-fuck-isn’t-this-working-what-the-fuck-simple-thing-have-I-missed-now <em>sob</em>. Etc.</p>\n\n<p>Ok, I’m slightly exaggerating, but after a day of use my initial impression of the whole thing was that it was a teensy bit over engineered. Not designed for me. And I didn’t like it.</p>\n\n<p>I’ve slightly changed my mind since…</p>\n\n<p>–</p>\n\n<p>My simple starter AI character has a few states:</p>\n<ul>\n  <li>Idle</li>\n  <li>Idle at attention</li>\n  <li>Patrolling</li>\n  <li>Trying to get close to the Player</li>\n  <li>Leeroy Jenkins</li>\n  <li>Looking for a player that it’s just lost sight of</li>\n</ul>\n\n<p>Some of this information needs to be passed to the animation blueprint (being at attention, for example, or aiming at something) so the correct set of animations get played. Some of this information needs to be replicated, so clients see the correct thing.</p>\n\n<p>A Behaviour Tree’s Blackboard is basically designed to support this, being a slightly decoupled place to store data that a BT uses to make decisions, and that the rest of your code can then modify &amp; grab, as required. But that means touch-points in multiple places; the character blueprint, custom events to populate the animation blueprint, the AI Controller… in addition to the things that make the BT tick: the functions that make decisions and the services that perform checks.</p>\n\n<p>I really don’t like this. Debugging this stuff is a fucking nightmare. You end up with windows and breakpoints everywhere, and the relevant data is spread too far. I like my parameters in one place and I like to be able to quickly read state at runtime, preferably in one place, so my first foray into this wonderful world (using blueprints only) gave me the heebie jeebies, and worse, didn’t end up working correctly. I have no idea why.</p>\n\n<p><img src=\"/images/2017-07-14-DebuggingMess.png\" alt=\"Mess\" /></p>\n\n<p>By this point I’ve gone through the first three stages of grief, although mostly “Anger and Frustration”. So I decided in the “Depression” stage to have a go at a pure C++ AI, and check out what else the engine had to offer. This lead me to the AI Perception system, which on paper looks great: Sight, Sound, Damage and Touch events for your AI, just by adding a simple component. Woo! And at least half of that system works! The rest, largely undocumented, doesn’t appear to, but it’s labelled WIP so this is either my fault, or there’s some arcane magic that I’m missing.</p>\n\n<p>After an hour I really couldn’t be arsed stepping through the code to work out which, so I reverted back to the old Pawn Sensing stuff. This clearly isn’t as good, and it doesn’t provide anywhere near as fancy debugging output (which I’m a sucker for) but it works, and I could move on.</p>\n\n<p>After a day I had my FSM, a little AI dude, a derivation of the player weapons that the AI could use to kill me, and everything was working in co-op with a connected second player. Hurrah! Except that’s only the tip of the iceberg. This stuff only looks good, or becomes convincing, when the transitions between the states have some range of probability, a bit of variation, and reactions can be deferred a little. This means adding transitional states, which means FSMs in code quickly become unwieldy. Adding time delays to state changes also makes things harder to read…</p>\n\n<p>I wasn’t excited about carrying this forward and then having to debug it at some point in the future, and I do want something a tiny bit more advanced that Doom’s AI, so on reflection, straight C++ didn’t seem like the best bet either.</p>\n\n<p>The upward turn (grief stage 5, apparently) was when I worked out how to use BTs with C++. Even moving the tasks — operations in a BT that do something to the character or it’s data — to C++ is a massive win. I can debug my character, my controller and individual AI tasks within Visual Studio, with a decent call-stack and inspector, and use the BT to add in all the little random waits, variations, or sub-routes, without clogging up the code. Things immediately started looking better.</p>\n\n<p>Behaviour Trees also make the Environment Query System a tad easier to use and it seems like something that’s potentially cool, but I’ll be honest, I’m still on the up-hill climb with this. Have a look for yourself.</p>\n\n<p><img src=\"/images/2017-07-14-EQS.png\" alt=\"EQS\" /></p>\n\n<p>Spot the system written by a coder, for a coder.</p>\n\n<p>So far I’ve been able to use the EQS to generate random places to look for a player when the AI loses them, and random locations around the player, so the AI isn’t a stationary target when engaging. But I need to spend more time to actually understand how to use this system properly. Having the AI run for cover, or flank the player, would be cool and eminently doable.</p>\n\n<p><img src=\"/images/2017-07-14-DebuggingInGame.PNG\" alt=\"In Game\" /></p>\n\n<p>So where am I now?</p>\n\n<p>Well, the header image shows the BT I ended up with after all of this experimentation. One thing that’s abundantly clear is that using a BT to sense and make state decisions dynamically, each frame, isn’t the way to go. The stack of conditionals you end up with prior to running sequences and progressing down the tree is messy, and still not fun to debug. I’m going to re-do this next week, but with a stored “current state” that pulls from an enumerated list in the Blackboard. I’ll combine the pawn-sensing, via the AI controller, with the simple tests in the BT to change state at given circumstances, and write a small set of methods in the AI controller to set the animation params, replicate, and /or call multicast stuff for clients.</p>\n\n<p>I think this will reduce the surface area for debugging, make the BT itself a bit cleaner, and leave me with a small collection of C++ BT Tasks that I can re-use.</p>\n\n<p>But those could be famous last words of stage 7; acceptance and hope.</p>",
            "summary": "",
            "date_published": "2017-07-17T00:00:00+03:00",
            "date_modified": "2017-07-17T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "http://localhost:4000/2017/06/26/Devlog:-Frigging-in-the-Rigging...",
            "url": "http://localhost:4000/2017/06/26/Devlog-Frigging-in-the-Rigging",
            "title": "Devlog: Frigging in the Rigging…",
            "content_html": "<p><img src=\"/images/rigging1.png\" alt=\"AI Test Dungeon\" /></p>\n\n<p>What I know about animation you could happily fit on the back of a postage stamp. I purposefully dodged it when making Lumo — through a cunning lack of in-game NPC characters — but I have vivid memories of swearing in 3DS Max for a couple of weeks, while trying to learn how to rig, then skin, what characters I did have. It was horrible, and the end result looks shite.</p>\n\n<p>Fortunately, you don’t get particularly close to the characters in Lumo, otherwise you’d notice lots of silly little folds and polygon creases where the skinning isn’t quite right. There’s one very obvious issue that’s visible in the close-up cut-scene, when you collect the wand, and it still annoys the shit out of me to this day.</p>\n\n<p>Anyway, that’s a long way of saying that, eek, I’m skinning / rigging the first character for Next Game. This time with Modo.</p>\n\n<p>As I’d not bothered adding any animation controls before, I figure it was time to do things “properly”, especially as the characters in Next Game will be much more in your face. There are some really nice tutorials on Plural Sight, which got me over the hump with this, but it’s still a long, incredibly boring process, that I’m ashamed to admit took me the better part of a week. It’s stupidly easy to get distracted when you’re just fiddling about with vert weights…</p>\n\n<p>But I have something that resembles an animation rig:</p>\n\n<p><img src=\"/images/rigging2.png\" alt=\"Almost looks like the real thing...\" /></p>\n\n<p>Once you get there, animating things is actually a lot of fun. I do really enjoy the process and I’ve got a new found respect for the people that do this well. Modo’s whole animation process — like the rest of the software — just fits my head, so it’s actually nice to sit there and tweak things, with the added bonus that the export process into UE4 is flawless, which is more than I can say for Max into Mecanim…</p>\n\n<p>One thing I love about animating in Modo is the Actions. These are short animation clips that are tucked away behind a little drop down menu. With Max I ended up with a timeline full of different animations, or multiple copies of the character, each with a different animation on. Now I have everything at my finger tips, and I can cut-and-paste bits between different animations. It’s clean, and it’s tidy, and it works. And when I export a single FBX, UE4 takes each Action and makes a single Animation Clip out of it. Each of these can be re-imported singularly, meaning iteration times are nice and short. Big thumbs up.</p>\n\n<p>After another week of fiddling, I ended up with this:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qE7HklpJwG4\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<p>I’ve never done a “proper” walk (or run) cycle before, so I’m pretty happy with those. There’re not perfect, for a start there’s not enough follow-through, or looseness, in the hands and arms. Particularly in the run cycle. I think that’s a result of me using an IK chain on those limbs, which limited my ability to control the elbow angle at certain points. It was fiddly to make sure the swing stayed in a clean arc as the body moved up and down, as well, so with hindsight, I don’t think I’ll use IK on the arms in future. Everything else, though? Not baaaaaad, 7/10.</p>\n\n<p>I’ve spent the rest of this week preparing to develop the character AI. I’ve created a new Game Mode for the co-op campaign, and I’m halfway through building an open space for the AI to run around in (see the screenshot at the top of this page).</p>\n\n<p>Next up: it’s all about UE4’s AI system…</p>",
            "summary": "",
            "date_published": "2017-06-26T00:00:00+03:00",
            "date_modified": "2017-06-26T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []}]
}