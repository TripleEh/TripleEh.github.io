{
    "version": "https://jsonfeed.org/version/1",
    "title": "Triple Eh?",
    "description": "Triple Eh? Ltd.",
    "home_page_url": "https://www.triple-aye.com/",
    "feed_url": "https://www.triple-aye.com/feed.json",
    "author": {
        "name": "Gareth Noyce"},
    "items": [
      {
            "id": "https://www.triple-aye.com/2017/07/17/Devlog:-Oh-Behave...",
            "url": "https://www.triple-aye.com/2017/07/17/Devlog-Oh-Behave",
            "title": "Devlog: Oh Behave…",
            "content_html": "<p><img src=\"/images/2017-07-14-Behave.png\" alt=\"Behaviour Tree\" /></p>\n\n<p>Finally. I’ve got around to some game-play programming…</p>\n\n<p>My natural instinct when approaching this is to getting busy building a finite state machine, the core of which can be shared over the AI in my game, and then start building some instances to see what I like and what I don’t.</p>\n\n<p>UE4, unsurprisingly, is reasonably opinionated about how you should approach this and has its own system: Behaviour Trees. I’ve seen the BT system mentioned by quite a few devs over the last couple of months, and read bits and pieces about how to use it prior to rolling up my sleeves. I was quite excited to jump-in, but over the course of the last ten days I think I’ve gone through at least half of the seven stages of grief just trying to find a way of working with it that I can live with…</p>\n\n<p>One reason for this — and the thing that consistently annoys me about learning modern tools — is the absolute piss-poor state of documentation. I will never understand why people think scrubbing through hours of video is better than concise, written explanations of something, but there you go. Good technical documentation is a dying breed.</p>\n\n<p>The BT system does do slightly better than expected in this regard, as there’s a relatively skinny HOWTO that walks you through the basics, but A) It’s blueprint orientated and B) AI also has to drive animation, and audio, and oh-my-god-stuff-needs-to-be-replicated-and-why-the-fuck-isn’t-this-working-what-the-fuck-simple-thing-have-I-missed-now <em>sob</em>. Etc.</p>\n\n<p>Ok, I’m slightly exaggerating, but after a day of use my initial impression of the whole thing was that it was a teensy bit over engineered. Not designed for me. And I didn’t like it.</p>\n\n<p>I’ve slightly changed my mind since…</p>\n\n<p>–</p>\n\n<p>My simple starter AI character has a few states:</p>\n<ul>\n  <li>Idle</li>\n  <li>Idle at attention</li>\n  <li>Patrolling</li>\n  <li>Trying to get close to the Player</li>\n  <li>Leeroy Jenkins</li>\n  <li>Looking for a player that it’s just lost sight of</li>\n</ul>\n\n<p>Some of this information needs to be passed to the animation blueprint (being at attention, for example, or aiming at something) so the correct set of animations get played. Some of this information needs to be replicated, so clients see the correct thing.</p>\n\n<p>A Behaviour Tree’s Blackboard is basically designed to support this, being a slightly decoupled place to store data that a BT uses to make decisions, and that the rest of your code can then modify &amp; grab, as required. But that means touch-points in multiple places; the character blueprint, custom events to populate the animation blueprint, the AI Controller… in addition to the things that make the BT tick: the functions that make decisions and the services that perform checks.</p>\n\n<p>I really don’t like this. Debugging this stuff is a fucking nightmare. You end up with windows and breakpoints everywhere, and the relevant data is spread too far. I like my parameters in one place and I like to be able to quickly read state at runtime, preferably in one place, so my first foray into this wonderful world (using blueprints only) gave me the heebie jeebies, and worse, didn’t end up working correctly. I have no idea why.</p>\n\n<p><img src=\"/images/2017-07-14-DebuggingMess.png\" alt=\"Mess\" /></p>\n\n<p>By this point I’ve gone through the first three stages of grief, although mostly “Anger and Frustration”. So I decided in the “Depression” stage to have a go at a pure C++ AI, and check out what else the engine had to offer. This lead me to the AI Perception system, which on paper looks great: Sight, Sound, Damage and Touch events for your AI, just by adding a simple component. Woo! And at least half of that system works! The rest, largely undocumented, doesn’t appear to, but it’s labelled WIP so this is either my fault, or there’s some arcane magic that I’m missing.</p>\n\n<p>After an hour I really couldn’t be arsed stepping through the code to work out which, so I reverted back to the old Pawn Sensing stuff. This clearly isn’t as good, and it doesn’t provide anywhere near as fancy debugging output (which I’m a sucker for) but it works, and I could move on.</p>\n\n<p>After a day I had my FSM, a little AI dude, a derivation of the player weapons that the AI could use to kill me, and everything was working in co-op with a connected second player. Hurrah! Except that’s only the tip of the iceberg. This stuff only looks good, or becomes convincing, when the transitions between the states have some range of probability, a bit of variation, and reactions can be deferred a little. This means adding transitional states, which means FSMs in code quickly become unwieldy. Adding time delays to state changes also makes things harder to read…</p>\n\n<p>I wasn’t excited about carrying this forward and then having to debug it at some point in the future, and I do want something a tiny bit more advanced that Doom’s AI, so on reflection, straight C++ didn’t seem like the best bet either.</p>\n\n<p>The upward turn (grief stage 5, apparently) was when I worked out how to use BTs with C++. Even moving the tasks — operations in a BT that do something to the character or it’s data — to C++ is a massive win. I can debug my character, my controller and individual AI tasks within Visual Studio, with a decent call-stack and inspector, and use the BT to add in all the little random waits, variations, or sub-routes, without clogging up the code. Things immediately started looking better.</p>\n\n<p>Behaviour Trees also make the Environment Query System a tad easier to use and it seems like something that’s potentially cool, but I’ll be honest, I’m still on the up-hill climb with this. Have a look for yourself.</p>\n\n<p><img src=\"/images/2017-07-14-EQS.png\" alt=\"EQS\" /></p>\n\n<p>Spot the system written by a coder, for a coder.</p>\n\n<p>So far I’ve been able to use the EQS to generate random places to look for a player when the AI loses them, and random locations around the player, so the AI isn’t a stationary target when engaging. But I need to spend more time to actually understand how to use this system properly. Having the AI run for cover, or flank the player, would be cool and eminently doable.</p>\n\n<p><img src=\"/images/2017-07-14-DebuggingInGame.PNG\" alt=\"In Game\" /></p>\n\n<p>So where am I now?</p>\n\n<p>Well, the header image shows the BT I ended up with after all of this experimentation. One thing that’s abundantly clear is that using a BT to sense and make state decisions dynamically, each frame, isn’t the way to go. The stack of conditionals you end up with prior to running sequences and progressing down the tree is messy, and still not fun to debug. I’m going to re-do this next week, but with a stored “current state” that pulls from an enumerated list in the Blackboard. I’ll combine the pawn-sensing, via the AI controller, with the simple tests in the BT to change state at given circumstances, and write a small set of methods in the AI controller to set the animation params, replicate, and /or call multicast stuff for clients.</p>\n\n<p>I think this will reduce the surface area for debugging, make the BT itself a bit cleaner, and leave me with a small collection of C++ BT Tasks that I can re-use.</p>\n\n<p>But those could be famous last words of stage 7; acceptance and hope.</p>",
            "summary": "",
            "date_published": "2017-07-17T00:00:00+03:00",
            "date_modified": "2017-07-17T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2017/06/26/Devlog:-Frigging-in-the-Rigging...",
            "url": "https://www.triple-aye.com/2017/06/26/Devlog-Frigging-in-the-Rigging",
            "title": "Devlog: Frigging in the Rigging…",
            "content_html": "<p><img src=\"/images/rigging1.png\" alt=\"AI Test Dungeon\" /></p>\n\n<p>What I know about animation you could happily fit on the back of a postage stamp. I purposefully dodged it when making Lumo — through a cunning lack of in-game NPC characters — but I have vivid memories of swearing in 3DS Max for a couple of weeks, while trying to learn how to rig, then skin, what characters I did have. It was horrible, and the end result looks shite.</p>\n\n<p>Fortunately, you don’t get particularly close to the characters in Lumo, otherwise you’d notice lots of silly little folds and polygon creases where the skinning isn’t quite right. There’s one very obvious issue that’s visible in the close-up cut-scene, when you collect the wand, and it still annoys the shit out of me to this day.</p>\n\n<p>Anyway, that’s a long way of saying that, eek, I’m skinning / rigging the first character for Next Game. This time with Modo.</p>\n\n<p>As I’d not bothered adding any animation controls before, I figure it was time to do things “properly”, especially as the characters in Next Game will be much more in your face. There are some really nice tutorials on Plural Sight, which got me over the hump with this, but it’s still a long, incredibly boring process, that I’m ashamed to admit took me the better part of a week. It’s stupidly easy to get distracted when you’re just fiddling about with vert weights…</p>\n\n<p>But I have something that resembles an animation rig:</p>\n\n<p><img src=\"/images/rigging2.png\" alt=\"Almost looks like the real thing...\" /></p>\n\n<p>Once you get there, animating things is actually a lot of fun. I do really enjoy the process and I’ve got a new found respect for the people that do this well. Modo’s whole animation process — like the rest of the software — just fits my head, so it’s actually nice to sit there and tweak things, with the added bonus that the export process into UE4 is flawless, which is more than I can say for Max into Mecanim…</p>\n\n<p>One thing I love about animating in Modo is the Actions. These are short animation clips that are tucked away behind a little drop down menu. With Max I ended up with a timeline full of different animations, or multiple copies of the character, each with a different animation on. Now I have everything at my finger tips, and I can cut-and-paste bits between different animations. It’s clean, and it’s tidy, and it works. And when I export a single FBX, UE4 takes each Action and makes a single Animation Clip out of it. Each of these can be re-imported singularly, meaning iteration times are nice and short. Big thumbs up.</p>\n\n<p>After another week of fiddling, I ended up with this:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qE7HklpJwG4\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<p>I’ve never done a “proper” walk (or run) cycle before, so I’m pretty happy with those. There’re not perfect, for a start there’s not enough follow-through, or looseness, in the hands and arms. Particularly in the run cycle. I think that’s a result of me using an IK chain on those limbs, which limited my ability to control the elbow angle at certain points. It was fiddly to make sure the swing stayed in a clean arc as the body moved up and down, as well, so with hindsight, I don’t think I’ll use IK on the arms in future. Everything else, though? Not baaaaaad, 7/10.</p>\n\n<p>I’ve spent the rest of this week preparing to develop the character AI. I’ve created a new Game Mode for the co-op campaign, and I’m halfway through building an open space for the AI to run around in (see the screenshot at the top of this page).</p>\n\n<p>Next up: it’s all about UE4’s AI system…</p>",
            "summary": "",
            "date_published": "2017-06-26T00:00:00+03:00",
            "date_modified": "2017-06-26T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2017/06/03/Devlog:-The-Price-Is-Right",
            "url": "https://www.triple-aye.com/2017/06/03/Devlog-The-Price-Is-Right/",
            "title": "Devlog: The Price Is Right",
            "content_html": "<p><img src=\"/images/price1.jpg\" alt=\"Price is right!\" /></p>\n\n<p>So, some lucky person on the U.S. version of The Price is Right walked away with a copy of Lumo (plus Uncharted &amp; Ghostbusters) and a shiny PS4. That was a surprise, to say the least.</p>\n\n<p>I’ve not thought about the game in a while, but Lumo’s popped up three times this week: Once in the issue of Edge I was reading, once on the PC Gamer podcast, and now this. One year on — it was released on May 24th, so happy 1st birthday, little game! — and I’m still being surprised by it.</p>\n\n<h1 id=\"next-game\">Next Game</h1>\n\n<p>Last time I wrote I’d made the fairly drastic decision of binning most of my code and starting fresh, with a clean project, to build the networking from the ground up. I’ve continued down that path over the last couple of weeks, and bar a few exceptions — moving platforms, trigger spawns and a bit of front-end UI— I’m past where I was before “the great purge”.</p>\n\n<p>Unreal’s RPC &amp; replication system is actually pretty straight-forward, for the most part. And now I’ve got everything working I think I have a reasonably good understanding of it, but the documentation can definitely be improved. ShooterGame takes a fair old while to Grok.</p>\n\n<p>I’ve ended up structuring things as follows:</p>\n\n<h2 id=\"game-mode\">Game Mode</h2>\n\n<p>This mainly handles players logging in-and-out of the game session, as well as tracking which team the players are assigned to and what spawn points are available at any given time. Initial spawning (and re-spawning) are also handled here, as well as “starting” the game and passing that fact on to the Game State to track. What I’ve not done atm, but will have to go back to, is handling a clean exit out of a game and back to the main menu.</p>\n\n<p>Oh, and acceptance of invites to a running game, but that’s probably a problem for a different area…</p>\n\n<p>I am handling the travel between maps as the game defaults to starting in an empty one before jumping everyone to my test level when the host presses a button. That should “just work” when it comes to detecting end game logic, but we’ll see.</p>\n\n<h2 id=\"game-state\">Game State</h2>\n\n<p>This is doing very little right now apart from tracking if the game is running, and telling the HUD to switch between Lobby and In-Game presentations, if so. For the co-op games it’ll be tracking everything from number of pickups &amp; secrets collected, to how and why players got their score. I’d already written this code before the purge.</p>\n\n<h2 id=\"player-state\">Player State</h2>\n\n<p>This is the 3rd time I’ve tried to structure a player character in UE4 and this time, rather than split things like health and score between the Character and the Player State I’ve opted to put everything not related to movement, rendering and audio into the Player State. All changes to Player State values happen on the server and replicate out. All requests for information; “Can I change to this weapon?”, “Can I pick up this item”, etc. are all server authoritative, as well.</p>\n\n<p>Because of this there’s a lag in the update of a client player’s HUD, say when taking damage, as the new value may take a while to propagate over, but interestingly, all control related stuff is instant. I’m guessing this is the way UE4 networking is optimised internally. I’ll need to look into the HUD issues, but at a guess I can mirror values locally, do non-authoritative updates to them, and overwrite with replicated values when they appear. I doubt the player will care or notice.</p>\n\n<h2 id=\"player-controller\">Player Controller</h2>\n\n<p>I not done any customisation to the default player controller at the moment.</p>\n\n<h2 id=\"player-character\">Player Character</h2>\n\n<p>Re-writing this has been the biggest win, by far. It’s significantly less code than previously, and what I am replicating is done in a much cleaner fashion.</p>\n\n<p>Important control stuff, like firing/changing weapons is server authoritative and there are multicast functions for things like playing audio cues, or hit effects. Will this feel laggy in the real world? I’m not sure, but everything I’ve read points to this being the normal way to do things, and it’s absolutely fine in the test environment.</p>\n\n<p>I still need to put things like the damage beans back in, but that’s a five minute job…</p>\n\n<h2 id=\"other-stuff\">Other Stuff</h2>\n\n<p>Because I’m networked I’ve been able to spend a few days with the weapons, armour and damage calculations. I’ve ended up creating custom Damage Types, which I’m passing through the normal UE4 damage system. These are dead handy, and it means I can detect what weapon has been used, who fired it, and even scale damage down for things like my own rocket jumps. Or, muhaha, scale up because the player is on a multiplier…</p>\n\n<p>This obviously opens up the whole balancing can-of-worms, so for now I’ve side-stepped it by using a mixture of weapon damage values from Doom 2 and Quake 1. Just to get me started, like…</p>\n\n<p>My double barrel shotgun is fucking lethal, though. You do not want to be meeting that in a dark corridor.</p>\n\n<p>Armour has been interesting, not only how to scale the damage, but how to split the percentages between absorption and immediate health deductions. I can already tell that I’ll be moving this lever up and down until release…</p>\n\n<p>…</p>\n\n<p>It was a nervy few days, starting again, but it was the right choice. Doing networking with a bunch of existing code, that you need to break in many ways in the effort to rebuild, was absolutely the wrong way to go. So even though my current build doesn’t have the nice front end, and my test level is just a bunch of unused FBX files that haven’t even been imported, I have the basis for everything else going forward: a networked pvp environment that I can drop onto any level.</p>\n\n<p>Next up, animating this fella, before exploring how to do some AI against co-op chums.</p>\n\n<p><img src=\"/images/Copper.jpg\" alt=\"Copper\" /></p>",
            "summary": "",
            "date_published": "2017-06-03T00:00:00+03:00",
            "date_modified": "2017-06-03T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": ["Devlog"]},{
            "id": "https://www.triple-aye.com/2017/05/12/Devlog:-12.05.17---Replication",
            "url": "https://www.triple-aye.com/2017/05/12/Devlog-12.05.17-Replication/",
            "title": "Devlog: Replication",
            "content_html": "<p>First week back on Next Game, for oooh, a few weeks, and time to tackle the networking side of things. I had an inkling that retro-fitting multiplayer into the work I’d already done would be a bit of a ball-ache, but I was wrong. It was a massive fucking pain in the hairy-tits.</p>\n\n<p>The problem wasn’t so much that I didn’t understand the theory behind it all — although it does take a while to bed-in, and in all honesty Epic could really do with providing some better documentation on the C++ side of things — but that switching something simple, like the character responses to items being picked up, involves changing a lot of small bits of code in various classes. So where, sensibly, do you start?</p>\n\n<p>I tried a couple of things, first the pickups, then the weapons, but half-way through each it was clear that I’d basically have to refactor a whole bunch of supporting code. Admittedly, there’re some easy wins with the default replication that’s built into the engine; things move, things spawn and you can feel good about your progress quite quickly. But the devil’s in the detail. Do things destroy themselves correctly for client and server, when either side triggers the event? Are modifications happening on the server instance and replicating correctly? Should this multi-cast or is there a better way?</p>\n\n<p>And obviously, debugging this stuff isn’t fun when you have multiple copies of the same instance running, and try to breakpoint something.</p>\n\n<p>I spent four days poking about at this, and although I’d made pretty reasonable progress there were bugs, little fiddly fucks that I really didn’t want to carry along with me. So yesterday I started a clean project and wrote a very simple Team Deathmatch game. Even re-built the characters from the ground up, this time using the Animation Starter Kit from the UE4 Marketplace.</p>\n\n<p><img src=\"/images/2017-05-11-TDM_8Player.png\" alt=\"TDM\" /></p>\n\n<p>That’s not a particularly exciting screenshot, but it’s 8 players in a TDM game mode, with a dedicated server. Players automatically join and leave teams and you can run around and kill each other.</p>\n\n<p>If you’d told me a week ago that I’d effectively be starting from scratch to get this working I’d have given you the sad panda eyes, but now I’m on the other-side I’m happy. It was a good thing to do. I’m pretty confident I’m entering and exiting the game mode properly, I’m going through the login process and I’m cleaning transferring Player States and Controllers about. None of that was working 100% properly in the previous branch. And, I still have all the “old” code lying about. The HUDs, menus etc will “just work” when I drop them back in, and under the hood it’s going to be easier to migrate things over, piece-by-piece, test, and then move forward.</p>\n\n<p>So, lesson of the week — and worse, something I knew anyway — if you’re making a networked game, do it from the beginning, don’t try and bolt it on afterwards.</p>\n\n<p><em>Quite pleased I managed to get through all that without making the obvious “built to last” Bladerunner/Replicant joke.</em></p>\n\n<p><em>Oh.</em></p>",
            "summary": "First week back on Next Game, for oooh, a few weeks, and time to tackle the networking side of things. I had an inkling that retro-fitting multiplayer into the work I’d already done would be a bit of a ball-ache, but I was wrong. It was a massive fucking pain in the hairy-tits.",
            "date_published": "2017-05-12T00:00:00+03:00",
            "date_modified": "2017-05-12T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2017/04/29/Devlog:-Making-Pixels-Glow",
            "url": "https://www.triple-aye.com/2017/04/29/Devlog-Making-Pixels-Glow/",
            "title": "Devlog: Making Pixels Glow",
            "content_html": "<p>Easter and consultancy work have got in the way a bit, but the side project’s taken a big step forward…</p>\n\n<p><img src=\"/images/2017-04-28-AddedAudio.PNG\" alt=\"Screenshot\" /></p>\n\n<h1 id=\"neutrino\">Neutrino</h1>\n<p>When I last wrote Neutrino was rendering directly to the screen, which wasn’t exactly the look I was after for low resolution, pixel-based games. So last week I took a day to sit down and finish off the rendering path, with the aim being to have some control over the process and get closer to a CRT “glow”.</p>\n\n<p>I’ve ended up with a fairly standard process that you’ve probably read about before.</p>\n\n<p><em>Stage 1:</em> The background tile-map and all the sprites collected in the VBO during the current tick are rendered to a 480x270 pixel texture. I picked this size because it’s a quarter of a 1080p screen, so scales nicely to my 4k monitor, but isn’t too chunky as to leave pixels the size of my face on-screen.</p>\n\n<p><em>Stage2:</em> The texture generated in Stage 1 is then rendered to a second 480x270 texture, via a high-pass “filter”. Atm this filter checks for pixel luminance, rendering any pixel above a certain brightness as normal, and any below that level at some, definable, smaller multiple of itself. I could discard these failing pixels completely, but I found the effect looks nicer when there’s a ramp.</p>\n\n<p><em>Stage3:</em> The texture from stage 2 is blurred in two passes, once horizontally, and once vertically. The resolution of this can be defined at run-time, but I’ve found that I get good results by blurring the low resolution texture from stage 2, and then getting the benefits of bi-linear filtering as I draw the blurred result, enlarged, as part of the final composite</p>\n\n<p><em>Stage4:</em> I draw a single full-screen quad to the screen, using the low resolution texture from stage 1. This is rendered with a trivially simple “scanline” shader, that checks the output position of the pixel: Every other line is rendered “dark”, for the scanlines. For “normal” lines, the shader checks the pixel, rendering the 1st biased to red, the 2nd biased to green, the 3rd biased to blue and the 4th “dark”. After this, the same quad is re-drawn, but using the blurred textured from pass 4, and again, I have controls for how much this bloomed texture contributes…</p>\n\n<p>This is probably the simplest form of scanline effect. It’s not emulating PAL, or NTSC screens. There’s no phosphor persistence — although I probably will add that in, to a degree, by using the blurred “bloom” texture as an accumulator — and there is no barrel shifter to simulate the curve of an old screen.</p>\n\n<p>I did look at <a href=\"https://www.shadertoy.com/view/XsjSzR\">Tim Lottes CRT pixel shader</a> but it needs a fair amount of tweaking to run well on my X1’s Intel GPU. And there’s also Kyle PIttman’s <a href=\"http://www.gamasutra.com/blogs/KylePittman/20150420/241442/CRT_Simulation_in_Super_Win_the_Game.php\">shader from Super Win The Game</a>, which I also discounted.</p>\n\n<p>To be honest, I’m not going for either of these looks. All I actually care about is the feel of staring into an arcade, in a dark room, where those white pixels were too white, and where certain colours left a bit of a tint on your eyeball. The screenshot at the top of the page is a fairly toned down example of where I’ll end up, cos, If I crank some of the settings up, I can get to some pretty mad places.</p>\n\n<p>All of this will be optional for the player. I know some people hate scanlines — why emulate broken technology? — but I’ll probably setup a few different presets to pick and choose from, so those of us of a certain vintage feel a bit more at home.</p>\n\n<p>(I’d be tempted to leave all the settings available, but that’d probably mean that every time I saw a screenshot of the game online it’d be at some crazy-bastard setting, that I hate…)</p>\n\n<p>Possible todo items: Adding some saturation controls to this may be handy. And maybe a colour look-up table, so I can set curves in Affinty Photo and have them baked into the final output?</p>\n\n<h1 id=\"next-game\">Next Game</h1>\n<p>I’m dead excited. Hoping to have more to show soon. ;)</p>",
            "summary": "Easter and consultancy work have got in the way a bit, but the side project’s taken a big step forward…",
            "date_published": "2017-04-29T00:00:00+03:00",
            "date_modified": "2017-04-29T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": ["Shaders","Game Programming"]},{
            "id": "https://www.triple-aye.com/2017/04/08/Devlog---08.04.17",
            "url": "https://www.triple-aye.com/2017/04/08/Devlog-08.04.17/",
            "title": "Devlog - 08.04.17",
            "content_html": "<p>Zelda has been pushed to the back-burner, I’ve been to the UK for a trade show, and started up a new consultancy gig. Even found some time to do some programming…</p>\n\n<h2 id=\"eurogamer-rezzed\">Eurogamer: Rezzed</h2>\n\n<p>I’ve not been to Rezzed in four or five years, but I can safely say that it’s my favourite “trade” show. It’s far more chill than the Expo, and there are plenty of opportunities to \ncatch up with Developers, ask them techie questions, and get the shizz on who’s getting published by whom, and where the funding’s at. Eurogamer also do a good range of panel discussions, \nwhich are great to watch, and what with it being in central London, getting ruinously drunk in the evening is entirely possible.</p>\n\n<p>It’s hard to pick stand-outs at shows like these, but ExoOne and Tokyo 42 were the two that got me, and were by far the best looking Unity developed games at the show. I \nknow it doesn’t matter what engine a game is written in, but having spent 2 days walking around it was incredibly obvious - for the most part - who was using what. Unity on the\nNintendo Switch looking rough as balls (Overcooked was running at 15-20fps at points) and there were many many tales of people having the same problems as I had, while shipping Lumo. So I did leave the \nshow thinking that I’d made the right choice moving to UE4, and Epic having a large presence at the venue definitely didn’t hurt that.</p>\n\n<p>And if Snake Pass really was ported to Switch in a week, well, I’m looking forward to begging Nintendo for some Devkits toward the end of the year… :D</p>\n\n<p>I didn’t show anything, or talk to publishers this time around. It was just nice to go to a show with no pressure and mooch around. My Zub t-shirt had its first public airing. :D</p>\n\n<h2 id=\"new-gig\">New Gig</h2>\n\n<p>I’ve picked up some consultancy work with a start-up in Helsinki. Can’t say much about it atm, but that’s one or two days a week helping them get going with their project. It’s time away from \ndoing my own stuff, but extra cash in the bank is never a bad thing, and I’m working in an area I’ve not really touched before, so a few things to learn.</p>\n\n<h2 id=\"neutrino\">Neutrino</h2>\n\n<p>You’d think with all the planes and trains I’ve been on this month, I’d have done more, but it turns out that in my excitement at getting exit row seats on the plane, I forgot that no bags are allowed to be stashed and the table barely \nholds a cup, let alone my laptop. But I did manage to do a few things.</p>\n\n<p>I’ve put in the various game states so Neutrino moves through the splash-screen, “main menu”, and into a test level, and finished off the saving of tilemaps to a binary file. I can load this, and I can create a static \nVBO that holds the tile-data. But I’ve not quite got it all hooked up so the level is being displayed. That’s the next job.</p>\n\n<p>Most games have several versions, Debug and Release being the most common. Normally these will do slightly different things: Debug will have more integrity checks, print out more logging information, and may even contain different modes \n(none of Neurino’s editors, for example, are even compiled into the release build).</p>\n\n<p>Release, as the name suggests, is normally what gets shipped to the players. To date I’ve only ever been working in Debug builds, so I thought it was about time \nthat I checked out how the release build was getting on… And the good news is, excellently! I’d made a couple of mistakes with some #ifdef wrapping, but once fixed, Release was up and running in a couple of minutes. I’m mildly \nsurprised about that.</p>\n\n<h2 id=\"next-game\">Next Game</h2>\n\n<p>Work’s been a bit stop/start, but quite a lot’s been done. The bulk of the effort has been working on the game-flow: at launch the game presents a little splash-screen with the company logo on, which nicely fades into the main \nmenu. From there, you can jump into the first level, or quit out to the desktop. In-game it’s now possible to pause (in single player) and the level’s exit teleporters will take control away from the player and \npresent an end of level stats screen, showing score, items collected, time taken and any bonuses earned, etc.</p>\n\n<p>This was a good exercise and I uncovered a few things: for a start, I’m still not using the various game and player state classes correctly. Things like the inventory are currently in my Player Controller, and should\nbe in the Player State class. Level pick-ups and secrets aren’t being tracked in the Game State class, but by the player or individually. All of this comes back to UE4 being opinionated about how to structure the \ngame, and I’m still learning that stuff. What I have “works”, but will be completely broken in a networked game.</p>\n\n<p>I’m at the point now - having basically got my head around how to do the single player stuff - that I’m going to refactor the bits I’ve got wrong, and then make a start on the network replication. I’ve no idea how to handle \nthe lobby system, or picking game-modes, but if I can get the players, weapons, projectiles and pick-ups replicating, that puts me in a good position to then start on the AI. I can work the rest out later.</p>\n\n<p>I also discovered that it was possible to have a static library of C++ functions you could provide to Blueprints, but despite this working well for a few days it eventually started to give me \nbuild errors, complaining that things were compiled with out-of-date outers (or something). I’ve no idea what this meant, and I’m starting to become more and more distrustful of Blueprints in general. They’re ok for little \nthrow-away things, but even doing the UI flow in them was tedious. Debugging them is an absolute nightmare…</p>\n\n<p><a href=\"https://www.youtube.com/playlist?list=PLqfZolvobgUADL9xLhimuX3TQONLZGJO5\">51Daedalus</a> is giving a serious of lighting lectures over on his You Tube channel. I can highly recommend these, as I’ve learned a lot from the \nfew hours he’s already done, including a lovely little trick for faking volumetric light areas (which I’ve nicked and slapped all over my test level). I think lit particles and these sorts of faked volumetric tricks \nare going to be really important, in Next Game. Some of the best looking stuff at Rezzed was doing of a lot of this for atmosphere, so it’s something I’m really keen to try and learn.</p>\n\n<p>Also, a shout out to the Unofficial Unreal Discord Community: <a href=\"http://unrealslackers.org/\">Unreal Slackers</a> I’ve been able to get a few questions answered, and people seem nice and friendly. It’s good to be able to bounce \nstuff off other developers now and again.</p>",
            "summary": "Zelda has been pushed to the back-burner, I’ve been to the UK for a trade show, and started up a new consultancy gig. Even found some time to do some programming…",
            "date_published": "2017-04-08T00:00:00+03:00",
            "date_modified": "2017-04-08T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2017/04/08/Devlog---17.03.17",
            "url": "https://www.triple-aye.com/2017/04/08/Devlog-17.03.17/",
            "title": "Devlog - 17.03.17",
            "content_html": "<p>The flip-side to blogging about my progress is that you get to see the occasions where I’ve not been massively productive. So I’m going to waffle on about what’s really had its hooks in me over the last couple of weeks…</p>\n\n<h2 id=\"zelda-breath-of-the-wild\">Zelda: Breath of the Wild</h2>\n\n<p>Of course I bought a Nintendo Switch at launch!</p>\n\n<p>I’ll probably find some time to talk about the device over on my personal blog, for it is perfect in many, many ways, but Zelda? Wow, what a game. \n“Not much” has been done since it came out and this week I basically gave up any pretence of getting work done. It’s been time very well spent…</p>\n\n<p>During the middle part of Lumo’s development I completed Link Between Worlds. That was a bit of a double-edged sword at the time, as, naturally, I started to become influenced by what I was playing. \nI have pages of notes about things to do in “dungeons”, but Lumo wasn’t ever that sort of game. Overlaid systems design — things that work well across multiple rooms &amp; outer-world based travel, for \nexample — wouldn’t be introduced to the genre until the Pickford brother’s Equinox, and I was determined to stick as closely to the confines defined by Jon Ritman’s early work as possible, \nand then poke out in directions from there…</p>\n\n<p>(Lumo would have been “better” if the scope was wider, but, honestly, that was never really the point.)</p>\n\n<p>Because of this (and with the exception of the occasionally mooted “Lost Levels”) it’s been obvious since the start that any spiritual sequel to Lumo would move more toward Zelda’s \ndungeons and away from the bespoke, single room designs. Not because the genre necessarily dictates it — although it is a natural progression — but because it’s the thing I want to make. \nIt’s the direction that I’d have taken it, back in the ‘90s. It’s also exactly the design pattern that Nintendo have moved away from…</p>\n\n<p>—</p>\n\n<p>Having grown up in the ’80s I’m a student of the Arcades, and I came of age with the SNES. Systems design is important. The best game mechanics are simple systems, confined by a set of rules, \nthat are obscured from the player by the machine. Their rules may evolve, slowly, over time, but the player is always encouraged to explore these confines, to learn the rules, through play. \nGreat games — for me — are not about story, or narrative (although these may work well to support an overall theme) but about sets of systems that encourage and allow for the player to create \ntheir own experiences. To make “stories” in their head. Some of these stories will be to mentally explain a system’s ruleset. Others will be entirely unique to the player, based on how they interpret \nand apply their ‘abillities’ through play.</p>\n\n<p>I was lucky enough to work with teams that understood this — Crackdown and Fable spring to mind — but I’ll never forget one meeting, where the publisher’s large and expensive writing team tried to “fix” \nour proposals by spending several hours arguing over the feelings and motivations of the NPCs in the world. The player wasn’t even mentioned once. I fucking hate this about modern, predominantly western, \nAAA games, and I could explain it succinctly with an animated gif I saw on Twitter, that I stupidly didn’t save. It showed Lara Croft climbing up a cliff as a thunder storm raged, and then cut away to the \nsame design, done in the style of an Atari VCS. Lara dodges a rock, lightning strikes, it looks and sounds amazing, she says something to herself (the player) … and the dot on the VCS moves right one space, \nbefore slowly continuing up, along its pre-determined path.</p>\n\n<p>When I play games I just see the dot.</p>\n\n<p>Zelda has several easily understood systems that are very robustly engineered. This has given Nintendo license to let the player explore them deeply, and not worry about too much about unintended consequences. \nIf anything, I think they’re fully aware of some of the exploits and are happy for you to use them (the hidden Koroks give the game away), but how these are applied in the world, and more importantly, how Nintendo \nnudge you toward their uses, will be studied for quite a while. At least by me.</p>\n\n<p>Probably the simplest example is cooking — something I never normally like in games — a self-determined means to buff (as well as heal), whose different ingredients are distributed over every region of the map. \nIt’s only possible to uncover all the recipes through extended play, but that 20 minute break to cook everything you’ve foraged over the last couple of hours becomes an enjoyable, repeatable ritual. I’m 50 hours \nin and I’m still making new things, and more importantly, I still want to see what I can do with it. The world design backs up this system’s rules: There will always be something spicy growing halfway up a mountain. \nMelons grow in hot regions, and their watery content will cool you. The body parts of electric Krese can be made into an elixir that provides shock protection. It’s simple, easy to break down — trivial when you look \nat it — but the player groks it with very little conscious thought. Only one example of how to combine these things for a given end is provided, but it’s enough to explain that experimentation is key, so off you trot, \ntry and shoot every animal, and cook everything you see. I’m reminded of Minecraft’s crafting table.</p>\n\n<p>Another easy example is Link’s stamina. You can run, climb or cling onto your para-glider for a short-period of time via a button press, and a simple UI shows the drain on your stamina. But Breath of the Wild \nis an enormous world that requires exertion to explore. Even the short-cuts to travel — tame animals — require a certain level of stamina in order to bring them under your control. And you’re encouraged to ignore \nthese limitations by cooking up elixirs that will replenish your stamina whenever you need it.</p>\n\n<p>My first few hours were all about cheating this “artificial limitation”. Pockets full of potions, I was desperate to run to the horizon and climb everything I could see, which is entirely possible as soon as you \nleave the starting plateau. Can you imagine how much better World of Warcraft, or Guildwars 2 would be if you could climb ANY mountain you could see? And when you got to the top there’d be a hidden Korok, or a mini-boss, \nor even just a breakable rock containing a diamond, waiting for you? Vista after vista unfolds, reinforcing a sense of place, and by the end-game, when you’ve powered this system up, you’re no longer taking your time, \nmapping out a safe route up the mountain, but leaping and bounding to the top with barely a care in the world. It feels a bit Crackdown-y, and makes a compete fucking mockery of Assassin’s Creed. \nStamina moves from a game-y limitation to something empowering in the space of a few hours. And you should see the horses I have now…</p>\n\n<p>Combat stays closest to the old Zelda way of doing things (from an interaction point of view) but even that has been completely over-turned. The traditional Z-Lock, jumps and doges are there, but now with weapons that are breakable.</p>\n\n<p>On the face of it, breakable weapons should be a design faux pas best left to the F2P market, but the way it’s been applied is entirely logical within the context of the rest of the world. \nEach region’s NPCs have different weapons, some many times stronger than others, and if you’re like me and you’ve Leeroy’d off into the distance, one hit kills will be rife. Disarmed NPCs will run to \nwhatever is lying on the ground and use it to attack you (even their fallen comrades, in some cases), but this is exactly Nintendo’s expectation for the player: Pick up the weapons that you see lying around. \nYou’re a scavenger, as well. Save your best ones for the larger foes, and use a branch for the pests. You can even sneak into a camp to steal enemy weapons before they see you, meaning any resulting fight will \nbe comically one-sided. Simple, easily understood, but with the benefit of giving real meaning to some of the items you discover. (And if you have a favourite, keep hold of it, as you can repair it by letting an Octorock eat it!)</p>\n\n<p>There’s example after example of how the rules for the player are applied — designed — with thought to the other interactive elements in the world. Even the mechanic for taming a horse can be used with other animals you find in the wild. Want to rock-up riding a glowing Stag, or a Bear? Well, you can. Experiment. Explore.</p>\n\n<p>The areas I love most though, and the thing I’d steal in a heart-beat, are the Shrines. (Oddly enough, the closest thing to what I wanted to do, but couldn’t, with the rooms in Lumo…)</p>\n\n<p>Shrines in BotW serve multiple purposes. They act as fast-travel waypoints. The Spirit Orbs you collect from them are the means to more hearts and stamina. They act as bespoke puzzle and combat arenas, \nreplacing the monolithic dungeon designs of Zeldas-past. And for me, they became the biggest driver to explore the world, safe in the knowledge that if I could just get to that orange glow, \nI’d be able to return at some later point.</p>\n\n<p>The shrines are often just one or two puzzle ideas, beautifully crafted, but on a grander scale than you’d get in previous Zelda dungeons. A 20–30 minute diversion, often toying with the physics \nengine, that serve to distil the sort of inventiveness we only see when the Nintendo’s design-team is firing on all cylinders. I absolutely fucking love them, and the way you can dip in-and-out of \nthem as a break from whatever you’re doing, makes them a constant, compelling, distraction.</p>\n\n<p>And perhaps that is Breath of the Wild’s greatest strength. Open world games have always tried to distract you, but at their core has been the constant nagging of NPCs, and the gentle redirection back \nonto the “Golden Path”. Fable 2 — OK, not an “open world” game in the sense of GTA — took it so far as to manifest the Golden Path in the world itself (!) but BotW just does not care. At no point do I \nfeel the need to “do” the “game”. I’m allowed the freedom to explore anywhere, at any point, to make of my avatar what I want. And even when I do sit down with the express desire to get back onto the \nmain-quest, I invariably end up doing something entirely different. Nearly every NPC in the game is intent on sending you off, away, from the Golden Path. The number of half finished sub-quests I have \nis insane and I justkeep uncovering more.</p>\n\n<p>On one of these diversions I saw Farosh…</p>\n\n<p>I spend the first few weeks of my design lectures trying to explain what a game mechanic is by breaking down “systems”. Why systems design and implementation is the real meat-and-potatoes of a \ngreat development team, not story or “ideas”. About how to communicate things in-world, without text, and why that’s more important than the things we explain to a player verbally. How you can \nreward styles of play through the simple placement of “secrets”, how the player’s experimentation and mastery of things provides them ownership over the experience. I’m constantly pulling from \nNintendo’s back catalogue for examples of all this, but now I could pretty much re-write the entire course and just use Breath of the Wild. I’ve not even spoken here about the camera, the slate’s \npowers and how these manifest differently across the “world” and the “dungeons”. It all makes me a little breathless at times. :D</p>\n\n<p>Personally, I think it takes monumental brass-balls to be as confident in what you’ve made as this, to let go, to let the player just be. Many, many aspects of BotW will be copied in the future \n(I’ll be nicking stuff), but this is a game I’m worried could only be made in Japan, and now Kojima is off, probably only by Nintendo. I cannot see any Western publisher funding the level of\nexperimentation and iteration that’s required to design and implement these mechanics, this world, so robustly. To eschew business model (for the most part, DLC and Amiibos <em>cough</em>) and trust in \nquality. Certainly not on a scale as grand and as beautiful as this.</p>\n\n<p>That’s a fucking shame, really, isn’t it?</p>\n\n<p>Anyway, I’ve got that Friday feeling, and I’ve only one Divine Beast left to do.</p>\n\n<p>Maybe a quick go before I get back to doing some real work. Next week…</p>",
            "summary": "The flip-side to blogging about my progress is that you get to see the occasions where I’ve not been massively productive. So I’m going to waffle on about what’s really had its hooks in me over the last couple of weeks…",
            "date_published": "2017-04-08T00:00:00+03:00",
            "date_modified": "2017-04-08T00:00:00+03:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2017/03/08/Devlog---08.03.17",
            "url": "https://www.triple-aye.com/2017/03/08/Devlog-08.03.17/",
            "title": "Devlog - 08.03.17",
            "content_html": "<p>Early update, this time, as I’m off to the UK for a wedding. Because of that – and because I’m meeting up with a friend \nwho’s helping me with some concept art – it’s been a race-to-make-a-face since my last post.</p>\n\n<h2 id=\"next-game\">Next Game</h2>\n\n<p><a href=\"/images/2017-03-08-TestLevel_Courtyard2.jpg\"><img src=\"/images/2017-03-08-TestLevel_Courtyard2.jpg\" alt=\"Screenie\" /></a></p>\n\n<p>The second iteration of the test level is basically done. As I said, it’s super chunky and super low-poly, but it looks a lot better than my \nfirst iteration. And I can get very dark areas, as well as very light areas. Pretty important for a Quake-a-like.</p>\n\n<p>Although this scene is essentially outdoor, I don’t actually think I’ll do that in many of the levels. My plan for most of it is \nto do something darker and not as well lit, but for the purposes of a test I just wanted to see if I could do both. So I’ve aped a bit of the \nQuake 1 start thing, and done an imaginary “intro” level.</p>\n\n<p>There’s a lot wrong with it; the scale is on the, er, large side – but the minute you start rocket jumping that’s less of a problem –  there’s a lack of secondary motion – wibbly grass, lights swaying, stuff like that – \nand hardly any props to dress the scene. Although the colours work for me, a bit more detail would definitely help.</p>\n\n<p>I’m not too bothered about all this atm, the main function \nof the test was to find a workflow that’s quick enough to let me bang out [reasonably] good looking geometry, and the lack of texturing definitely helps that. I’ve\ngone from zero to a level I can run around, in 8 days. And half that time’s been trying to understand lighting.  Nearly all the missing things \nwill happen over time and I can dress the scenes with more props as and when I make them. It’s how I worked the environment in Lumo.</p>\n\n<p>I’m still toying with the idea of bevelling the larger geometry pieces as \nthe extra edges would play in the light. Nintendo do this all the time in Mario and Zelda, so it might be worth a test…</p>\n\n<p>Anyway. After the mild depression at going down the wrong path and throwing out a couple of week’s work, this whole exercise turned out to be super useful. The untextured “matte” look forced me to work out how the baked lighting is applied, especially \nwhen the various shadow schemes are thrown into the mix. There’s no where to hide so setting this up was a lot of trial and error, not helped by the \nfact that my lighting build-quality was set to “preview” for God knows how long. That flushed out lots of stupid things, but derp. Fucking idiot, etc.</p>\n\n<p>The Modo side of things has been great, although it took me a long time to uvunwrap for clean bakes.  Initially I was just ignoring it, letting the UE importer \ngenerate the lightmaps and then wondering why I had dirty big splotches everywhere. Then I started adding a second UV channel in the model to mitigate, \nwhich gives some control over how the model parts are split. But the real-trick, which it took me a couple of days to clock-on to, is making sure edges/verts \nare clamped to texel boundaries. In Modo this is trivial, you can set the UVGrid to 1/64, and then use the snapping tool to make sure that edges/verts are all \nnice and clean. It’s a bit handraulic, but if done right, a one shot deal.  I think.</p>\n\n<p>I still have some light-bleeding in parts of the level, but this is either where I’ve not added an edge to the wall (one model) where it meets the floors \n(a different model), or have a polygon that extrudes through the wall, so catches the light and the dark. The second issue is just me not knowing what I was<br />\ndoing at the start and then being too lazy to go back in and fix it. You can see it on the window frames.</p>\n\n<p>I’ve also had a good play around with Cascade, and although I don’t feel as confident with it as Unity’s particle system, I’m able to do the basics. The same \ncan be pretty much said for the material editor. I’m hoping to pick stuff up via osmosis and concentrate on the big things for the foreseeable.</p>\n\n<p>Code-wise, I don’t think I’ve had any problems. I’ve even started doing a few things – the on screen messages for example – in Blueprints. Quick and dirty is, \nas Quick and Dirty does, and all that.</p>\n\n<p>I’ve stuck a little video of all this up on You Tube. It should go without saying that the Quake 1 sound effects won’t be there for long, and everything is liable \nto change. It’s heading in the right direction, though.</p>\n\n<div style=\"text-align: center\"><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gxeUt0OoUMo\" frameborder=\"0\" allowfullscreen=\"\"></iframe><p>&nbsp;</p></div>\n\n<p>Click screenies to enbiggen.</p>\n\n<p><a href=\"/images/2017-03-08-TestLevel_Underground.jpg\"><img src=\"/images/2017-03-08-TestLevel_Underground.jpg\" alt=\"Screenie\" /></a></p>\n\n<p><a href=\"/images/2017-03-08-TestLevel_TP1.jpg\"><img src=\"/images/2017-03-08-TestLevel_TP1.jpg\" alt=\"Screenie\" /></a></p>\n\n<p><a href=\"/images/2017-03-08-TestLevel_Armour.jpg\"><img src=\"/images/2017-03-08-TestLevel_Armour.jpg\" alt=\"Screenie\" /></a></p>\n\n<p><a href=\"/images/2017-03-08-TestLevel_Corridor2.jpg\"><img src=\"/images/2017-03-08-TestLevel_Corridor2.jpg\" alt=\"Screenie\" /></a></p>",
            "summary": "Early update, this time, as I’m off to the UK for a wedding. Because of that – and because I’m meeting up with a friend who’s helping me with some concept art – it’s been a race-to-make-a-face since my last post.",
            "date_published": "2017-03-08T00:00:00+02:00",
            "date_modified": "2017-03-08T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2017/02/24/Devlog---24.02.17",
            "url": "https://www.triple-aye.com/2017/02/24/Devlog-24.02.17/",
            "title": "Devlog - 24.02.17",
            "content_html": "<p>Oops, I missed a week and the devlog is late. Sorry! Game Dev and all that. Shipping late’s what we do…</p>\n\n<p>I put off posting as I was hopeful that I’d have something nice to show, but things haven’t quite worked out as planned:</p>\n\n<h2 id=\"next-game\">Next Game</h2>\n\n<p>I added a damage effect –  the “damage beans” – on the screen edges to indicate that the player’s been hurt. It’s a simple post-process overlay, but with a normal map  added you get a nice distortion of the \nscreen as it fades in and out. Standard stuff for the most part. Except I have two versions, one that’s a blood-splat, and one that’s a nice high-res picture of actual baked beans. :D</p>\n\n<p>I’ve also had a quick play with the audio system in UE4. My natural inclination is to integrate FMOD, but I’m hearing from fellow developers on Mastodon that UE4’s system is pretty good, and from the quick tests \nit might well be. Audio attenuation and geometry occlusion definite seem to work, which could be enough for what I need.</p>\n\n<p>But for the last 10 days or so I’ve been playing around with look and feel tests.</p>\n\n<p><img src=\"/images/17.02.17-SkyBox.jpg\" alt=\"Nice skies\" /></p>\n\n<p>This skybox got me into a lot of trouble.</p>\n\n<p>My intention with Next Game is to do everything quite low-poly and avoid as much texturing as possible. One reason for that is to look different, but texturing and modelling \ntake time, and time/money aren’t something that I have a lot of. If I have to get into texturing then I’d probably go for something old-school, like Gibhard or Strafe, but for obvious reasons I’d like to avoid that. \nI think every man and his dog will be doing that style in a year or two…</p>\n\n<p>Unfortunately having a super realistic skybox lead me down a path where geometry got a bit too complex, and things rapidly looked incongruous when flat-shaded with high quality lighting. Basically, I couldn’t get it to look good unless it was\nextremely high-contrast. Which was unplayable. Although, I did spend a day flirting with an entirely black-and-white grading that I might go back to for some levels.</p>\n\n<p>Anyway, I’ve thrown away all that work. All the geometry modelled so far, the test level, the greybox, all the materials and all the textures. That stung a bit.</p>\n\n<p>This week I started again, but from a better footing: I chose a nice, harmonious, palette, and put a simple gradient in the sky-box. The palette is very limited: four base colours, four shades of each colour, and a gradient from top to bottom of each colour. I’ll \nmost likely add to that over time, but for now this is working well.</p>\n\n<p>UV-unwrapping can be done extremely quickly. Anything single colour can just be atlas unwrapped and pushed over the appropriate shade in the texture, while things with gradients just need a little \nmore attention to align them properly. Because the palette is fixed, everything sits in the scene, and with some lightmass settings tweaked I’m getting really rich colour gradients, colour bounces being picked up and \ndeep shadows. It looks better, basically. It’s also super colourful, to the point of being cartoony – far too much for this game – but I find it easier to turn everything up to 11 and then slowly dial it in over time. (Early screenshots of Lumo are\npractically black because I was shooting for a Scooby-Doo vibe. The final game looks nothing like it…)</p>\n\n<p>What needs sorting out now is the correct scale for things. My character moves extremely quickly, and rocket jumps go for miles. This will take a bit of two-and-fro, but that’s next week’s mission. At the minute everything’s a little too big but I find it quite endearing. Iterate, iterate.</p>\n\n<h2 id=\"neutrino\">Neutrino</h2>\n\n<p><img src=\"/images/2017-02-19-TilemapAddRemove.png\" alt=\"Tilemap Editor\" /></p>\n\n<p>Still train-coding my way through this and the big news is, the tile map editor that I said I’d never write is basically done. It’s missing the ability to create re-usable brushes from placed tiles, so I might go back and add that at some point, but bar some tidying up and \ndeciding on the save format it’s doing what I’ll need.  This threw up a couple of interesting things.</p>\n\n<p>I was about to delve into the murk of C’s directory and file-handling, which is annoyingly different depending on the platform, but decided to have a quick search through Github to see what was already out there, and came across this little gem: <a href=\"https://github.com/cxong/tinydir\">Tinydir</a>, \n works brilliantly.</p>\n\n<p>While testing the tilemap editor I thought I’d throw in some massive numbers to see how it performed. Turns out things started crawling pretty quickly, which was er, a shock. After pushing it through Richard Mitton’s <a href=\"http://www.codersnotes.com/sleepy/\">Very Sleepy</a> \nthe hot spot seemed to be in how I’m populating the VBOs, which again, was a bit of a surprise. This was supposed to be an optimised version of what I’d written a few years back on iOS…</p>\n\n<p>For some reason I was only getting ~8k sprites per frame. I was expecting quite a few more. The culprit was this line:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>mTransform = mTranslate * mRotation * mScale;\n</code></pre>\n</div>\n\n<p>Pretty standard stuff, this is just creating the translation matrix which I’m pushing all my vertices through before copying the result into the VBO. (Yes, at some point I should just do all that into the shader…)  I’ve done this before and had much better performance, \nexcept then I was using my own math class, and this time I’m using <a href=\"http://glm.g-truc.net/0.9.8/index.html\">OpenGL Math</a>. I figured it’d  be better to pass off the optimisation and maintenance of my maths stuff to, well, people that know some maths.</p>\n\n<p>So I dug into the operator * overload:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>GLM_FUNC_QUALIFIER tmat4x4&lt;T, P&gt; operator*(tmat4x4&lt;T, P&gt; const &amp; m1, tmat4x4&lt;T, P&gt; const &amp; m2)\n{\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcA0 = m1[0];\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcA1 = m1[1];\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcA2 = m1[2];\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcA3 = m1[3];\n\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcB0 = m2[0];\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcB1 = m2[1];\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcB2 = m2[2];\n\ttypename tmat4x4&lt;T, P&gt;::col_type const SrcB3 = m2[3];\n\n\ttmat4x4&lt;T, P&gt; Result(uninitialize);\n\tResult[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];\n\tResult[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];\n\tResult[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];\n\tResult[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];\n\treturn Result;\n}\n</code></pre>\n</div>\n\n<p>Ow. That’s creating a lot of vec4 variables over the course of a few thousand sprites.</p>\n\n<p>I admit, I’m learning GLM as I go, and maybe there’re some functions to do mat4 multiplications in place but the docs make my nose bleed, and to be honest I couldn’t be arsed to trawl through it all.</p>\n\n<p>So instead of using a glm::mat4, my matrix is now a simple array, allocated at the start of the function, that only contains the scale and rotation. I can push the sprite corners through this \nand add the translation, and remove a lot of obviously zero multiplications from the process.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>vBL.x = (vBL_Pos-&gt;x * s_mTransMat[0]) + (vBL_Pos-&gt;y * s_mTransMat[1]) + vPos-&gt;x;\nvBL.y = (vBL_Pos-&gt;y * s_mTransMat[3]) + (vBL_Pos-&gt;y * s_mTransMat[4]) + vPos-&gt;y;\nvBL.z = vPos-&gt;z;\n\netc. etc. \n\n</code></pre>\n</div>\n\n<p>This is fine for 2D stuff, which is all I intend to use this engine for.</p>\n\n<p>And the result? About a 15x speed-up. In fact, I get exactly the same number of sprites out of a single thread on my X1 laptop, as I do on my big fat devrig: ~150k @ 60fps.</p>\n\n<p>I’ll probably look to multi-thread this once the physics engine and fmod have been integrated, but for now it’s more than good enough for a little shoot-em-up.</p>\n\n<p>The moral of the story: Future Gareth, you should probably look into how to use GLM properly.</p>",
            "summary": "Oops, I missed a week and the devlog is late. Sorry! Game Dev and all that. Shipping late’s what we do…",
            "date_published": "2017-02-24T00:00:00+02:00",
            "date_modified": "2017-02-24T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": ["Devlog"]},{
            "id": "https://www.triple-aye.com/2017/02/03/Devlog---03.02.2017",
            "url": "https://www.triple-aye.com/2017/02/03/Devlog-03.02.2017/",
            "title": "Devlog - 03.02.2017",
            "content_html": "<p><img src=\"/images/17.02.03-DecalsTest2.jpg\" alt=\"Hello Mum\" /></p>\n\n<p>It’s been a mad-cap couple of weeks. Here’s what I’ve been up to:</p>\n\n<h2 id=\"lumo\">Lumo</h2>\n\n<p>Yesterday I pushed out version 1.17.2, to fix issues found with wireless Xbone pads running on Windows 7. Thanks go out to \nPatrick Hogan — the developer of InControl, a nice cross platform input library for Unity that I can recommend, <a href=\"http://www.gallantgames.com/pages/incontrol-introduction\">available here</a> —  for sparing the time to test around the issue and provide a fix.</p>\n\n<p>In addition to taking on the new version of InControl, I’ve also moved over to XInput, so — in theory —  joypad support should be a \nlittle more robust on Windows going forward. (Crosses Fingers)</p>\n\n<p>This build also fixes a possible bug with joypad “submit” actions not being registered by the pause screen UI, as well as turning \noff Unity’s bullshit “automatic” navigation option on some of the button layouts. Honestly, fuck that UI system.</p>\n\n<h2 id=\"neutrino\">Neutrino</h2>\n\n<p>I’ve been doing a bit of train / weekend coding, so this has moved forward:</p>\n\n<ul>\n  <li>Finished off the Input system. You can now poll mouse and up to four joypads. Previously it only handled attach/dettach events.</li>\n  <li>Added some keystate handling for specific inputs in editor modes (keyboard shortcuts, basically)</li>\n  <li>Added a bunch of helper functions to quickly get sprites from texture pages</li>\n  <li>Got the Tile Map editor to the point where you can select and place tiles, freely, or snapped to a grid</li>\n</ul>\n\n<p>Next job is to store that in something I can spit out and reload that’ll be the basis of the level data. I’ll probably do a very thin \nCommand pattern wrapper over this so I can support unlimited Undo/Redo as well.</p>\n\n<h2 id=\"next-game\">Next Game</h2>\n\n<p>I’ve been all over the shop with this the last couple of weeks:</p>\n\n<ul>\n  <li>Finished off the weapon-types code and added weapon pickups</li>\n  <li>Player can now be killed, either through damage or falling out of the world</li>\n  <li>Player respawns properly</li>\n  <li>Added Ammo to the HUD</li>\n  <li>Added decals, and spent a morning drawing swears on walls</li>\n  <li>Added a new “Pain Room” to the test room, for traps and damage/stat tweaking</li>\n  <li>Dipped my toe into Cascade, UE4’s particle system, and made some effects for pickups</li>\n  <li>Started on a shotgun model for the first person view</li>\n  <li>Added some new models for the ammunition pickpus</li>\n</ul>\n\n<p>The last item in that list has been my main diversion since the last post.</p>\n\n<p>I know that I’m going to be doing a fair amount of modelling on this project so I’m still slowly schooling myself on workflows. For this, I decided \nto do some fairly high poly models of the pickup items and then bake them down to a low poly cage. Like everything, once I worked out how to \ndo it, it’s reasonably straight forward, but it took a day or so to really get it working.</p>\n\n<p>Building low poly cages seems to be a bit of an art, depending on the sorts of shapes you want, but after a lot of attempts I was able to bake AO and \nnormals in Modo that looked pretty clean on the low poly asset, and came out clearly in-engine. I’m far from an expert at this, but it’s something I \nwanted to have in the toolbox even if I don’t use it very often.</p>\n\n<p>I also spent a day or two messing about with Substance Painter. The “rent to own” model really appeals to me, as well as fitting in my budget, so I \njumped on that. It’s a little unstable on my rig - I’ve had 4 or 5 really messy crashes - but when it’s working, it’s great. I doubt I’ll delve too \ndeeply into the materials for this game, but anything that speeds up texturing is going to be worth the effort learning.</p>\n\n<p>Now that Vine is dead I’ve started posting screenshots and little vids onto my Instagram account. You can keep an eye-out, <a href=\"https://www.instagram.com/garethnoyce/\">here</a>.</p>\n\n<p>Also, there’s been a big migration of developers from Twitter onto Mastodon.social. If you’re a twitter user then I don’t really need to explain why this \nis happening, but if not and you’re interested in a low traffic, Nazi-free open source Twitter-alike then <a href=\"https://mastodon.social\">Mastodon</a> is worth \nchecking out. I’m @korruptor as usual.</p>",
            "summary": "",
            "date_published": "2017-02-03T00:00:00+02:00",
            "date_modified": "2017-02-03T00:00:00+02:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []}]
}