{
    "version": "https://jsonfeed.org/version/1",
    "title": "Triple Eh?",
    "description": "Triple Eh? Ltd.",
    "home_page_url": "https://www.triple-aye.com/",
    "feed_url": "https://www.triple-aye.com/feed.json",
    "author": {
        "name": "Gareth Noyce"},
    "items": [
      {
            "id": "https://www.triple-aye.com/2019/10/27/Cecconoid-Camera-Setup",
            "url": "https://www.triple-aye.com/2019/10/27/Cecconoid-Camera-Setup/",
            "title": "Cecconoid’s Camera Setup",
            "content_html": "<p>Cecconoid’s an old school game, with an old school aesthetic, which means big fat chunky pixels on super high-resolution displays. Uh Oh.</p>\n\n<p>I’ve ranted at length (on my personal blog) about some simple sins against the pixel that I see again and again in modern indie games:</p>\n\n<ul>\n  <li>Use of different “sizes” for pixels, across different assets</li>\n  <li>Rotated, or “diamond” pixels…</li>\n</ul>\n\n<p>Both of these occur, generally, because, although the sprites’ texture is pixel-art, the sprite is then rendered to a high-res display, with no other cares in the world. As assets are scaled, rotated, or, you know, otherwise moved about in a “gamey” fashion, those poor little pixels get munged into unnatural shapes. Or worse, all that lovely filtering that’s applied to textures to make them look good, gets applied to our sprites, and before you know it, there’s sub-pixel stuff going on, bi-linear filtering, and stuff’s a mess.</p>\n\n<p>I know, I know. I shouldn’t care, I should just leave it be, but honestly, I’ve walked away from games that do this. It annoys me so much.</p>\n\n<p>So yeah, Cecconoid wasn’t going to be doing any of that guff.</p>\n\n<p>My chosen display resolution is as close to ancient as I could reasonably get: 384x216px (1920x1080 / 5), or, at the Unity default of 100 pixels per unit, 3.84 by 2.16. To put that into perspective, the original ZX Speccy was 256x192px, so given the aspect ratio, we’re not too far out. This also works well with Box2D, as it’s expecting to be given objects with sensible kilo ranges. Our movement speeds are also going to be pretty sane and easy to conceptualise. The only problem is that the Unity editor isn’t really built for doing stuff at this scale, so your snap settings are going to be at 0.01 if you want per-pixel, or 0.16/0.08, depending on the size of your tiles. Prefab views will open a billion miles out, and most of your initial particle stuff will be the size of a small moon. It gets filddly, quickly and ugh, whatever, I give up…</p>\n\n<p>Anyway. The trick to respecting the pixel, once you’ve got this far, is simple: render to an off-screen Render Target (texture), and then display that \non a full screen quad. Bingo. No more diamonds. No more rotated, or sheered pixels. You can get on with your business. You don’t have any stupid clamping to do, you move on with life, and ship, looking like this:</p>\n\n<p><img src=\"images/PIcture1.PNG\" alt=\"Image 1\" /></p>\n\n<p>This is cool. This is enough to ensure grouchy old people like me will play your game and not moan about your pixels. Job done.</p>\n\n<p>Here’s the game camera, that renders to the off-screen render target:</p>\n\n<p><img src=\"images/Picture5.PNG\" alt=\"Image 5\" /></p>\n\n<p>Here’s the fullscreen quad:</p>\n\n<p><img src=\"images/Picture2.PNG\" alt=\"Images 3\" /></p>\n\n<p>The fullscreen quad is wrapped up in a UI canvas, that’s a screen overlay on Cam_FinalRenderOutput:</p>\n\n<p><img src=\"images/Picture3.PNG\" alt=\"Image 2\" /></p>\n\n<p>This is the layout of all that in the inspector:</p>\n\n<p><img src=\"images/Picture4.PNG\" alt=\"Image 4\" /></p>\n\n<p>All the hip-kids try and get close to the old CRT look, and given I’m of a certain vintage, I’m obviously going to have a pop as well. The ‘best’ way to do this is to add post processing to the full-screen quad:</p>\n\n<h3 id=\"scanlines\">“Scanlines”</h3>\n\n<p>Stuff was low res, and things were slow. The beam in CRTs rasterscaned the computer’s output, line by line, and depending on the type of TV / Monitor you were using, you’d see darker areas between these scaned lines. If you got your nose up really close, the RGB pattern of the phosphorescent screen that the beam would illuminate, would also be visible.</p>\n\n<p>We have 4k screens, so surely that’s enough pixels to make little RGB triads a thing again?</p>\n\n<h3 id=\"glow\">Glow</h3>\n\n<p>Those illuminated phosphors popped. The glowed. They bled into each other. They created final colours that weren’t in the original image. And white things used to leave a trail, like a scar across your eyeball…</p>\n\n<p>Well, as much as I’d like to, adding trails to a B&amp;W game would actually make it a little too hard to read, so I’m going to skip that. But white is going to glow. And colours (red, in my case) should bleed. Oh yes.</p>\n\n<h3 id=\"noise\">Noise.</h3>\n\n<p>TVs were shit back in the day, and even your fav monitor wasn’t pin-sharp. And, I’m a fully paid-up member of the “grain makes all computer graphics look better” club. Unlucky.</p>\n\n<h3 id=\"fish-eye\">Fish Eye.</h3>\n\n<p>CRTs were curved. It adds nothing, and tbh normally ends up making stuff look worse, but a tiny smidge here and there won’t hurt.</p>\n\n<p>So lets break that down one by one. First up the scanlines. What you don’t is dirty black horizontal lines going across your pixels. Old CRTs had RGB triads, so pick your poison from the available patterns that were used. I’ve gone for:</p>\n\n<p><img src=\"images/Picture7.PNG\" alt=\"RGB\" /></p>\n\n<p>This gives you the following, which is quite subtle:</p>\n\n<p><img src=\"images/Picture6.PNG\" alt=\"Scanlines\" /></p>\n\n<p>It’s important to set this up before you do much work on the art side, because it seriously changes the gamut. You’ll notice the range of hues becomes a little muddier, and overall brightness is lowered, although I was alright, because I was mainly using white. You can compensate in the actual texture, if you want, but you can also bring it up a little with the glow, which is what I opted for.</p>\n\n<p>Glow, on its own, gives you some nice bleed across the pixels. I’ve tried to set mine up so that white pixels affect quite a large area around themselves, which is kinda similar to what you get on CRT monitors, but dialled up to 11.</p>\n\n<p><img src=\"images/Picture8.PNG\" alt=\"Glow\" /></p>\n\n<p>For the noise I’ve tried to focus it on the black areas. Just enough to create some movement, like a bit of bad reception, but not enough that you’d really notice it if you looked at any lit areas. If I was doing a game with more than two colours, I’d ramp this waaaay up. Anyway, this image has the brightness turned up a little so you can see how the noise interacts with what we have in the post-chain:</p>\n\n<p><img src=\"images/Picture9.PNG\" alt=\"Noise\" /></p>\n\n<p>Fish eye, does what it says on the tin. I’ve also opted to add some very small amount of Vignette. I’ve not gone for the RGB separation in the corners, because I’m going to use that in the sequel to Eugatron as a gameplay effect. Keeping my powder dry for a while.</p>\n\n<p>Anyway, all together, we get the final image:</p>\n\n<p><img src=\"images/Picture10.PNG\" alt=\"Final\" /></p>\n\n<p>That’s a lot of effort for my dodgy pixel art, but on a 4k Oled, it’s well worth every cycle. And no dodgy pixels in sight.</p>\n\n<p>We ended up stripping all of this from the mobile version as there’s very little value in adding scanlines to such a tiny screen, but for desktop or console, sweating the details, even for stuff like this, gives you a pretty good final image. In my old-man opinion, anyway.</p>",
            "summary": "Cecconoid’s an old school game, with an old school aesthetic, which means big fat chunky pixels on super high-resolution displays. Uh Oh.",
            "date_published": "2019-10-27T00:00:00+01:00",
            "date_modified": "2019-10-27T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/10/26/Dev-Vlog:-010",
            "url": "https://www.triple-aye.com/2019/10/26/Dev-Vlog-010/",
            "title": "Dev Vlog: 010",
            "content_html": "<p>I’m long overdue a video update. Apologies. Cecconoid was taking over for a while. Speaking of which, if you’ve not added it to your wish list, please do! It’ll be in all the winter sales ;)</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/arJqL2xS1AQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>",
            "summary": "I’m long overdue a video update. Apologies. Cecconoid was taking over for a while. Speaking of which, if you’ve not added it to your wish list, please do! It’ll be in all the winter sales ;)",
            "date_published": "2019-10-26T00:00:00+01:00",
            "date_modified": "2019-10-26T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/10/20/Saving-Project-Lumo...",
            "url": "https://www.triple-aye.com/2019/10/20/Saving-Project-Lumo",
            "title": "Saving Project Lumo…",
            "content_html": "<p>Cecconoid has been out for just over a week and people seem to be pretty happy with it. If \nyou’ve not had a look, yet, please head over to:</p>\n\n<ul>\n  <li><a href=\"https://store.steampowered.com/app/683310/Cecconoid/\">Steam</a></li>\n  <li><a href=\"https://triple-eh.itch.io/cecconoid\">Itch.io</a></li>\n</ul>\n\n<hr />\n\n<p>There’s been a (minor) flurry of emails in the air regarding Apple’s introduction of notarisation for \napps that are distributed outside of the Mac App Store. This affects everything on Steam, \nincluding Lumo. As it happens, I’ve been working on Lumo since Cecconoid was released, with\nan eye on adjusting the difficulty balance so it isn’t murderously tricky on a phone. The timing couldn’t \nbe better.</p>\n\n<p>To be honest, I’ve wanted to go back to Lumo for a long time. I’ve never been happy with the end sections of the \ngame because they were put together as I was running out of cash. A bit more art, here and there, would go a long \nway. But the main problem with Lumo has always been the way it was built. Part of that is my fault; I took a lot of \nshortcuts, I bought in Asset Store packages where I thought there would save me time, and I chose to use Unity over UE4 \nbecause it was easier to get going, and slightly better documented. I’ve regretted that ever since.</p>\n\n<p>The path from Unity 4.x to 5.x was horrendous, with every core system of the engine being re-written or \nbroken in some way. The entire 5.x range of Unity was a shit-show, stability-wise (see my personal blog for rants about that). \nSo Lumo needs a specific, hot-fix version of Unity, for every sku that exists, because there are show-stopping bugs on that platform if you use \nthe wrong version of Unity to build it. Because of this, the console versions diverged from the PC versions, and the PC versions ended up being frozen.</p>\n\n<p>What I’ve wanted to do for the longest time is try and get a consolidated build, a “director’s cut” of the game, on a new version of Unity, with most of these problems fixed. Now seems like a reasonable time to do it.</p>\n\n<p>Thalamus have made good progress. The iOS version of the game is basically a port of the Switch version, on 2019.2.x, that’s running well. We’ll be able to ship that, no problem. But it’s not the version I want, as we’ll be lowering shader quality and turning off a lot of post. Not to mention it’ll\nhave a balance tailored for touch-screen. It’s a compromise.</p>\n\n<p>No, for me, the PC version has always been the canonical build, so I’ve been looking into what it would take to get that tidied up, get all the niggly, platform-specific bugs fixed, and the whole thing moved onto a new, “stable” version of Unity, and made somewhat future proof.</p>\n\n<p>After a cursory look:</p>\n\n<ul>\n  <li>Scene management needs a re-write, as I’m on the deprecated API</li>\n  <li>All the use of GUI layers (all the HUDs in-game) need to be re-built, using the current UI, as they’re deprecated</li>\n  <li>The FMOD I’m using has been deprecated, meaning everything in-editor is broken. All audio needs to be moved over to a new version of FMOD</li>\n  <li>All the FMOD uses in code needs to be moved over to the new API</li>\n  <li>All the shaders built in Shader Forge (ie: 50% of the materials in the game) need to be re-writen as they no longer compile (Everything transparent is purple atm)</li>\n  <li>Post on all cameras needs to be re-done (simple) but the way I colour correct doesn’t exist any more, so most of the textures and all the lighting will need to be checked, or re-built.</li>\n  <li>InControl needs bouncing up to latest, meaning I’ll have to re-write the re-definable controls (I’ve hacked InControl to do what I need)</li>\n  <li>Steam API needs bouncing up to latest</li>\n  <li>The package I use for ropes doesn’t work on any new version of Unity</li>\n  <li>Reflections are broken (no idea why)</li>\n  <li>Fireworks and all particles with sub-emitters are broken (I’ve no idea why)</li>\n</ul>\n\n<p>A few of these will have to be fixed for iOS/Android, but we’re going to ship with all the deprecated stuff, which is less than ideal.</p>\n\n<p>As for the “main” version, well, it’s sold less than 300 copies on the Mac. There’s no way I’m going to do that work just to get Lumo on an updated Unity, so that I can properly notarise. The existing version of Lumo on the Mac will die when it dies, and that’ll be that.</p>\n\n<p>Assuming the iOS/Android version turn out nicely (and they’re looking very good atm) then it’ll be possible to notarise a Mac build from that, and get it on a couple of the stores, which I’ll definitely consider, but it depends how much work it is to revert the balance changes. Even then, it won’t be the “PC” version, and my hopes of getting to a consolidated, official, “Director’s Cut” of the game are basically dashed. There’s no way it’s worth the effort to re-engineer that much of the game.</p>\n\n<p>I’m genuinely sad about this. I was getting a bit excited about going in and polishing up the areas that I’ve always had a problem with, but it’s not to be.</p>\n\n<p>I did, at least, learn my lesson with Cecconoid. I used the minimum of 3rd Party stuff, I wrote everything as simply as possible, and I didn’t use any of the Unity stuff that’s a moving target, because hey, it’s a stupid little 2D game!</p>\n\n<p>So, Lumo is what it is. It will “die” at some point.</p>\n\n<p>But I’ve got some other ideas.</p>",
            "summary": "Cecconoid has been out for just over a week and people seem to be pretty happy with it. If you’ve not had a look, yet, please head over to:",
            "date_published": "2019-10-20T00:00:00+01:00",
            "date_modified": "2019-10-20T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/09/10/Cecconoid-Gameplay",
            "url": "https://www.triple-aye.com/2019/09/10/Cecconoid-Gameplay/",
            "title": "Cecconoid Gameplay",
            "content_html": "<p>I’ve just got the leaderboards and achievements to integrate into Steam and then we’re good to go! While you’re waiting, here’s a little gameplay taster vid:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/c8Ue2jLDcjk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>",
            "summary": "I’ve just got the leaderboards and achievements to integrate into Steam and then we’re good to go! While you’re waiting, here’s a little gameplay taster vid:",
            "date_published": "2019-09-10T00:00:00+01:00",
            "date_modified": "2019-09-10T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/07/28/25-Waves-of-Cecconoid",
            "url": "https://www.triple-aye.com/2019/07/28/25-Waves-of-Cecconoid/",
            "title": "25 Waves of Cecconoid",
            "content_html": "<p>For some reason I’m always busier in the summer. It’s been a pattern since the last year of Lumo and 2019\nhas been no different. I’ve picked up some great contract work – so the rent is paid – but it’s not left \na lot of time for me to work on my own stuff. 1st World Problems… But it’s worked out really well, having \nthe opportunity to look back at Cecconoid and Eugatron with fresh eyes has been fantastic. I’ve been \nable to pull them apart, spot issues and tweak stuff to get them much closer to what I was envisaging at the start.</p>\n\n<p>This week I did the “final” balance pass on Eugatron. It’s hard. It’ll punish you. But it’s easier than Robotron,\nwhich is my concession to modern gamers. I recorded 25 waves so you can have a look, and then I went back in and \nmade them more difficult. You can thank me later :)</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=-0hmFKJgdIo\">Check out the video on my You Tube Channel</a></p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-0hmFKJgdIo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>",
            "summary": "For some reason I’m always busier in the summer. It’s been a pattern since the last year of Lumo and 2019 has been no different. I’ve picked up some great contract work – so the rent is paid – but it’s not left a lot of time for me to work on my own stuff. 1st World Problems… But it’s worked out really well, having the opportunity to look back at Cecconoid and Eugatron with fresh eyes has been fantastic. I’ve been able to pull them apart, spot issues and tweak stuff to get them much closer to what I was envisaging at the start.",
            "date_published": "2019-07-28T00:00:00+01:00",
            "date_modified": "2019-07-28T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/07/03/Dev-Vlog:-009---Starting-on-the-Combat",
            "url": "https://www.triple-aye.com/2019/07/03/Dev-Vlog-009-Starting-on-the-Combat/",
            "title": "Dev-Vlog: 009 - Starting on the Combat",
            "content_html": "<p>I’ve finally bitten the bullet and started on the combat system. Here’s a <a href=\"https://www.youtube.com/watch?v=EmtR1sNbWl4\">little video</a> discussing it.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/EmtR1sNbWl4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>It’s been a really busy month. I’ve nearly shipped an iOS game (contract work), Cecconoid’s store presences are \nbasically done, the trailer is up and I’m slowly gathering wishlists. Unfortunately a lot of the work I’ve been \ndoing isn’t on my own projects, but that’s a good problem to have. :)</p>",
            "summary": "I’ve finally bitten the bullet and started on the combat system. Here’s a little video discussing it.",
            "date_published": "2019-07-03T00:00:00+01:00",
            "date_modified": "2019-07-03T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/06/08/Making-a-game-in-90-days...",
            "url": "https://www.triple-aye.com/2019/06/08/Making-a-game-in-90-days",
            "title": "Making a game in 90 days…",
            "content_html": "<p>Because of my involvement with the TAMK Games Academy I’ve had a bit of a voice in how the course is structured. Back when I first got involved, many years ago, students got \nthe opportunity to make one game over the course of a year, but I’ve long argued that more, smaller games, would give everyone involved a better insight into what it’s\nlike as a profession. It’s too easy for team members to hide, or worse, disappear, over a year-long project, and it’s practically impossible for a green software developer to \nrisk assess and get a handle on scope. Should those mistakes really mean they bounce out of the course with nothing to show for it? So now we get the students, in groups, to make one  game per semester.</p>\n\n<p>A semester isn’t a very long time – by the time you knock out holidays, and all the top and tail admin of getting things setup, it’s basically 3 months and change – so scope is a real issue. \nEvery developer has eyes bigger than their bellies, but young developers even more so, and it’s pretty \ncommon for one of the projects to fail. It can go one of two ways: the initial excitement of working in a team means the first project is wildly out of scope, has to be pared \nback (normally by me) and the result is a half finished mess. Or, the listeners in the class make a very small, very casual, single mechanic game, and manage to apply some \npolish to it, meaning their second project will be an attempt at an MMO. MM No! As they used to say at MGS.</p>\n\n<p>My advice has always been the same. Pick a single (or very fucking small) set of mechanic[s], that you can evolve over time, and use this to do some proper level design. \nEven better, steal an arcade game, or something small from the 16bit era, and clone it. You’ll still have to solve all the same problems as the original developers. But, do that\nand actually attempt to build the ramp for the player, from the initial introduction of the mechanic, to them finally acting like a master, and you’ll have a game with a bucket load of content. You \nmight even start to realise that polish takes up 90% of the time…</p>\n\n<p>But…</p>\n\n<p>I’ve never actually made a game in 90 days. Even with modern tools. (Don’t get me started on Game Jams, that’s a whole separate rant that I’ll save for another day)</p>\n\n<p>Back in Feb there was a small confluence of events that made me consider this. I was starting to notice that I was a little Rusty in C# and Unity – having moved to UE4 after Lumo – and \nI was also concerned that the programming students didn’t actually have access to a full, open source, reasonable quality game, made in Unity that they could draw \nfrom. I know from my own experience that I’ve learned far more from reading other people’s code than I have from a book (thank you John Carmack) so I figured this might be a really\nuseful diversion. So I set about making Cecconoid/Eugatron, which I’ve posted about in the last few Dev Vlogs.</p>\n\n<p>I’d set myself a deadline of the end of May – the same duration the students had – and that deadline’s made a nice whizzing sound as it’s gone past. So where am I?</p>\n\n<p>In short, not finished. Lol.</p>\n\n<p>Some stats:</p>\n\n<ul>\n  <li>Development ‘days’ spent so far: 71</li>\n  <li>Of those, full-time (6hrs or more): 50</li>\n  <li>550 commits to get to alpha</li>\n  <li>20k lines of code</li>\n  <li>260 sprites/env tiles made</li>\n  <li>50 levels in Eugatron</li>\n  <li>42 rooms in Cecconoid</li>\n  <li>6 power-ups</li>\n  <li>Dunno how many baddies, but double that, because each game mode ended up with it’s own version</li>\n  <li>30-ish unique SFX</li>\n  <li>~350 hours of work, so far…</li>\n</ul>\n\n<p>Most of those stats don’t surprise me. 350 hours sounds about right for a bare bones arcade game. But 20k lines of code? Damn, that’s way more than I would have guessed. \nTurns out Lumo was 120k, and that’s less than I would have guessed, so even after all these years I basically have no clue how much code a thing will take… Hmm.</p>\n\n<p>But, this really is just an alpha. The following are missing:</p>\n\n<ul>\n  <li>Cecconoid doesn’t have enough content. Maybe another 20 rooms needed</li>\n  <li>Eugatron isn’t balanced as well as I’d like. Probably a few more days to give that a proper tweak.</li>\n  <li>Neither mode actually has a high score table</li>\n  <li>Cecconoid doesn’t have a save game, although it’s debatable that it needs one</li>\n  <li>I’ll need to do some sort of settings screen, so the postFX work on a toggle</li>\n  <li>I’ve not produced a Linux version yet, but I will bet good money this will cause problems.</li>\n</ul>\n\n<p>So maybe another 5-10 days or work to get most of that knocked off.</p>\n\n<p>And then you have to consider the stores:</p>\n\n<ul>\n  <li>Steam: Leaderboards, controller, cloud saves, achievements, trading cards</li>\n  <li>Discord: Rich presence?</li>\n</ul>\n\n<p>Steam is reasonably easy, and it is the one thing that I can pretty much lift wholesale out of Lumo. But it’s still a few days work. Discord, well, lets maybe pass on that\nand save it for another game.</p>\n\n<p>But we’re still not done. The stores all need art of various sizes, all of which are different dimensions on each store. Hero images, capsule headers, icons, detail view listings,\npage banners, sale banners… it all adds up and very few of them can be cut-and-paste out of a single piece of key art. In fact, I’ve already spent three days \non this.</p>\n\n<p>Oh, and you need a trailer. And some screenshots. And a web page of some description…</p>\n\n<p>So Cecconoid isn’t finished. Although it kinda is. I mean, the fun, development part is basically done, bar the boring bits, but those boring bits are another 60-100 hours of work, if you count\nall the stuff needed to make it ready to sell.</p>\n\n<p>–</p>\n\n<p>It’s been an interesting experience to tackle a game in this way.</p>\n\n<p>Like every developer before me I still struggled with scope. I stupidly made two games (but, but, Eugatron!) instead \nof putting all my focus into Cecconoid, and then to make matters worse, spent days playing the thing I shouldn’t have made, trying to pop a million points.</p>\n\n<p>Unity still gets on my tits. There’s a massive amount of scaffold code that needed to be written just to get a well structured base for the game, and I’m spoiled that UE4 \njust provides all this stuff straight off the bat. The editor is absolutely rubbish for editing 2D tile based stuff, and their plugin for it didn’t come anywhere close to \ndoing what I needed. The UI stack still annoys the shit out of me. Input still isn’t fit for purpose, so I had to go back to InControl half-way through the project. The audio \nsystem is still laughable bare-bones unless you bring in FMOD (I didn’t). The project window, where you organise all the files, is so weak compared to UE4 that it gave me constant rage. In short, \nnone of the failings I wrote-up, post Lumo, have been addressed in a way that I’m happy with.</p>\n\n<p>But, Cecconoid does appear to work everywhere, even the web, and for that the Unity Player does deserve credit.</p>\n\n<p>Would the project have been done any faster in UE4? Probably not, as the C++ compile cycle is definitely slower than C#. But, I’ve noticed that it doesn’t take me very long \nto slip back into bad habits with C#. It’s far too easy to let things slide…</p>\n\n<p>So I’m in a lucky position where I’ve made a game that I wasn’t expecting to, and I’ve no immediate need to push it out to the stores. This gives me a rare chance to let the thing \nsit there for a while, meaning I can go back to it with a fresh set of eyes, do the balance pass, and give it a proper tweak without being caught up in all the niggles of development.</p>\n\n<p>But I’ve answered the question; yes, it’s definitely possible to make a good quality, simple game, in 90 days on your own. It’s probably not possible to make that and a Robotron clone, though.</p>\n\n<p>Oh, and, look, shiny trailer!</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lFtRonr1VqM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>I’m going to be doing some contract work over the summer, but in-between that I’ll be back on Maenhir, and normal service will be resumed. Enjoy the sun, everyone!</p>",
            "summary": "Because of my involvement with the TAMK Games Academy I’ve had a bit of a voice in how the course is structured. Back when I first got involved, many years ago, students got the opportunity to make one game over the course of a year, but I’ve long argued that more, smaller games, would give everyone involved a better insight into what it’s like as a profession. It’s too easy for team members to hide, or worse, disappear, over a year-long project, and it’s practically impossible for a green software developer to risk assess and get a handle on scope. Should those mistakes really mean they bounce out of the course with nothing to show for it? So now we get the students, in groups, to make one game per semester.",
            "date_published": "2019-06-08T00:00:00+01:00",
            "date_modified": "2019-06-08T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/05/07/Dev-Vlog:-008---Eugatron",
            "url": "https://www.triple-aye.com/2019/05/07/Dev-Vlog-008-Eugatron/",
            "title": "Dev Vlog: 008 - Eugatron",
            "content_html": "<p>Back again with a quick update.</p>\n\n<p>The Unity side-project is drawing to an end! The second game-mode, Eugatron, is basically done and now contains 50 levels\n of manic Robotron style blasting. I’ve gotta be honest, I’ve had a right laugh playing it, and spent waaaaay too long \n “testing” it. I’ve definitely coming back to this at some point in the future for a sequel.</p>\n\n<p>Here’s a quick video of me playing through it:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JbF_Iz4KgZ0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>",
            "summary": "Back again with a quick update.",
            "date_published": "2019-05-07T00:00:00+01:00",
            "date_modified": "2019-05-07T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2019/04/03/Dev-Vlog-007---Where's-Wally-Been",
            "url": "https://www.triple-aye.com/2019/04/03/Dev-Vlog-007-Where's-Wally-Been/",
            "title": "Dev Vlog 007 - Where’s Wally Been?",
            "content_html": "<p>Damn, I’m sorry, it’s been ages. Honestly, between travel and the day job, the last couple of months have been mental. But here you go, a quick <a href=\"https://youtu.be/UbAxk4reW7g\">video</a> to catch up:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UbAxk4reW7g\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>Also, I’ve just setup a <a href=\"https://vimeo.com/tripleeh\">Vimeo</a> channel, as the videos tend to be a little higher quality over there. I’ll try and keep it up-to-date from now on.</p>",
            "summary": "Damn, I’m sorry, it’s been ages. Honestly, between travel and the day job, the last couple of months have been mental. But here you go, a quick video to catch up:",
            "date_published": "2019-04-03T00:00:00+01:00",
            "date_modified": "2019-04-03T00:00:00+01:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []},{
            "id": "https://www.triple-aye.com/2018/12/24/Dev-Vlog-006",
            "url": "https://www.triple-aye.com/2018/12/24/Dev-Vlog-006/",
            "title": "Dev Vlog 006",
            "content_html": "<p>Something unscripted, this time. A quick tour of the build as-is:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jvTixxZzVAI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p><a href=\"https://www.youtube.com/watch?v=jvTixxZzVAI\">Direct Link</a></p>\n\n<p>Happy Xmas, everyone. I hope you and yours have a great holiday season. Fingers crossed 2019 isn’t as tumultuous as 2018…</p>",
            "summary": "Something unscripted, this time. A quick tour of the build as-is:",
            "date_published": "2018-12-24T00:00:00+00:00",
            "date_modified": "2018-12-24T00:00:00+00:00",
            "author": {
              "name": "Gareth Noyce"},
            "tags": []}]
}